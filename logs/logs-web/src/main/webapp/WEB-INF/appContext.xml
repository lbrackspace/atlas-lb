<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd"
        default-autowire="byName">

      <!--STANDALONE SPRING SETTINGS-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="file:/etc/openstack/atlas/hadoop-logs.conf"/>
    </bean>

    <bean id="controllerHandlerAdapter" class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>

    <bean id="cloudFilesDao" class="org.openstack.atlas.cloudfiles.CloudFilesDaoImpl"/>
    <bean id="logDateFormat" class="org.openstack.atlas.logs.hadoop.util.LogDateFormat"/>

    <bean id="authService" class="org.openstack.atlas.auth.AuthServiceImpl" scope="prototype" >
        <constructor-arg index="0"  ref="conf"/>
    </bean>

    <bean id="conf"
          class="org.openstack.atlas.config.LbLogsConfiguration"
          scope="prototype"/>

    <bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="applicationContextSchedulerContextKey">
            <value>applicationContext</value>
        </property>

        <property name="schedulerContextAsMap">
            <map>
               <entry key="jobStateRepository">
                   <ref bean="jobStateRepository"/>
               </entry>

               <entry key="logDateFormat">
                   <ref bean="logDateFormat"/>
               </entry>

               <entry key="conf">
                   <ref bean="conf"/>
               </entry>

               <entry key="fileWatchdogJobExecution">
                   <ref bean="fileWatchdogJobExecution"/>
               </entry>

               <entry key="fileMoveJobExecution">
                   <ref bean="fileMoveJobExecution"/>
               </entry>
               <entry key="orderLoadBalancerLogsJobExecution">
                   <ref bean="orderLoadBalancerLogsJobExecution"/>
               </entry>
               <entry key="splitLoadBalancerLogsJobExecution">
                    <ref bean="splitLoadBalancerLogsJobExecution"/>
               </entry>
               <entry key="archiveLoadBalancerLogsJobExecution">
                   <ref bean="archiveLoadBalancerLogsJobExecution"/>
               </entry>

            </map>
        </property>
        <property name="triggers">
            <list>
                <ref bean="runFileWatchdogTrigger"/>
                <ref bean="runSystemCleanupTrigger"/>
                <ref bean="reuploaderJobTrigger"/>
            </list>
        </property>
    </bean>

   <!-- <bean id="timeZone" class="java.util.TimeZone" factory-method="getTimeZone">
        <constructor-arg value="America/Chicago"/>
    </bean>-->

    <bean name="fileWatchdogJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="org.openstack.atlas.scheduler.FileWatchdogJob"/>
        <property name="jobDataAsMap">
            <map>
                <entry key="jobStateService" value-ref="jobStateService"/>
                <entry key="lzoService" value-ref="lzoService"/>
                <entry key="loadBalancerRepository" value-ref="loadBalancerRepository"/>
            </map>
        </property>

    </bean>

    <bean id="runFileWatchdogTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="fileWatchdogJob"/>
        <!--<property name="startDelay" value="300"/>-->
        <!--<property name="repeatInterval" value="${job.repeat.interval}"/>-->
        <property name="cronExpression" value="${job.repeat.interval}" />
    </bean>

    <bean name="reuploaderJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="org.openstack.atlas.scheduler.ReuploaderJob"/>
        <property name="jobDataAsMap">
            <map>
                <entry key="jobStateService" value-ref="jobStateService"/>
                <entry key="loadBalancerRepository" value-ref="loadBalancerRepository"/>
            </map>
        </property>
    </bean>

    <bean id="reuploaderJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="reuploaderJob"/>
        <property name="cronExpression" value="${job.logreup.interval}"/>
    </bean>

    <bean name="systemCleanupJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="org.openstack.atlas.scheduler.SystemCleanupJob"/>
        <property name="jobDataAsMap">
            <map>
                <entry key="jobStateService" value-ref="jobStateService"/>
            </map>
        </property>
    </bean>

    <bean id="runSystemCleanupTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="systemCleanupJob"/>
        <!--<property name="startDelay" value="300"/>-->
        <!--<property name="repeatInterval" value="${job.repeat.interval}"/>-->
        <property name="cronExpression" value="0 0 0 * *  ?" />
        <!--<property name="cronExpression" value="0 0/5 * * * ?" />-->
    </bean>


    <bean id="jobScheduler" class="org.openstack.atlas.scheduler.JobScheduler">
        <property name="schedulerFactoryBean" ref="schedulerFactoryBean"/>
    </bean>

    <bean id="loggableJobExecution" class="org.openstack.atlas.scheduler.execution.LoggableJobExecution">
        <property name="jobStateRepository" ref="jobStateRepository"/>
        <property name="lzoService" ref="lzoService" />
        <property name="conf" ref="conf"/>
    </bean>
    <bean id="fileWatchdogJobExecution"
          class="org.openstack.atlas.scheduler.execution.FileWatchdogJobExecution"/>
    <bean id="fileMoveJobExecution"
          class="org.openstack.atlas.scheduler.execution.FileMoveJobExecution"/>
    <bean id="orderLoadBalancerLogsJobExecution"
          class="org.openstack.atlas.scheduler.execution.MapReduceAggregateLogsJobExecution"/>
    <bean id="splitLoadBalancerLogsJobExecution"
          class="org.openstack.atlas.scheduler.execution.SplitLoadBalancerLogsJobExecution"/>
    <bean id="archiveLoadBalancerLogsJobExecution"
          class="org.openstack.atlas.scheduler.execution.ArchiveLoadBalancerLogsJobExecution"/>

    <!-- The EM Factory is where the magic happens :) -->

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory1"/>
    </bean>

    <tx:annotation-driven/>

    <bean id="entityManagerFactory1" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceXmlLocation"
                  value="classpath:META-INF/lb-persistence.xml"/>
        <property name="persistenceUnitName" value="loadbalancing"/>
    </bean>

    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

    <bean id="loadBalancerRepository"
          class="org.openstack.atlas.service.domain.repository.LoadBalancerRepository"
          scope="prototype"/>

    <bean id="jobStateRepository"
          class="org.openstack.atlas.service.domain.repository.JobStateRepository"
          scope="prototype"/>

    <bean id="lzoRepository"
          class="org.openstack.atlas.service.domain.repository.LzoRepository"
          scope="prototype"/>

    <bean id="jobStateService" class="org.openstack.atlas.service.domain.services.impl.JobStateServiceImpl" parent="baseService"/>
    <bean id="lzoService" class="org.openstack.atlas.service.domain.services.impl.LzoServiceImpl" parent="baseService"/>
    <bean id="baseService" class="org.openstack.atlas.service.domain.services.impl.BaseService">
        <property name="jobStateRepository" ref="jobStateRepository" />
        <property name="lzoRepository" ref="lzoRepository" />
    </bean>
</beans>
