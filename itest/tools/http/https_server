#!/usr/bin/env python

from threading import Thread
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
from SocketServer import ForkingMixIn, ThreadingMixIn
import socket
import thread
import json
import copy
import time
import ssl
import sys
import os

def usage(prog):
    printf("usage is %s <host> <port> <keyfile> <crtfile>\n",prog)
    printf("Examples\n")
    printf("#if you want to advertise the CA as apart of your chain\n")
    printf("%s 127.0.0.1 8080 ./localhost.key all.crt\n\n",prog)
    printf("#if you want to advertise only the chain\n")
    printf("%s 127.0.0.1 8080 ./localhost.key chain.crt\n\n",prog)
    printf("#if you want to only want to show the local crt\n")
    printf("%s 127.0.0.1 8080 ./localhost.key localhost.crt\n\n",prog)


def printf(format,*args): sys.stdout.write(format%args)

def fprintf(fp,format,*args): fp.write(format%args)

class ThreadedHTTPServer(ThreadingMixIn,HTTPServer):
    pass

class TestHandler(BaseHTTPRequestHandler):
    def __init__(self,*args,**kw):
        BaseHTTPRequestHandler.__init__(self,*args,**kw)

    def headers2json(self):
        obj = {}
        obj["headers"]=[]
        obj["local_ip"]=self.request.getsockname()[0]
        obj["remote_ip"]=self.request.getpeername()[0]
        for hdr in self.headers.headers:
            obj["headers"].append(hdr)
        jsonData = json.dumps(obj,indent=2)
        return jsonData

    def do_GET(self):
        data = self.headers2json()
        self.send_response(200)
        self.send_header("content-length",len(data))
        self.send_header("content-type","application/json")
        self.end_headers()
        self.wfile.write(data)
        return

def dirPrint(obj):
    for m in sorted(dir(obj)):
        print m

if __name__ == '__main__':
    prog = os.path.basename(sys.argv[0])
    if len(sys.argv)<5:
        usage(prog)
        sys.exit()
    wrapOpts = {}
    host = sys.argv[1]
    port = int(sys.argv[2])
    wrapOpts["keyfile"] = sys.argv[3]
    wrapOpts["certfile"] = sys.argv[4]
    wrapOpts["server_side"] = True

    printf("proces id = %s\n",os.getpid())
    printf("Listening on %s:%s\n",host,port)
    server = ThreadedHTTPServer((host,port),TestHandler)
    server.socket = ssl.wrap_socket(server.socket,**wrapOpts)
    printf("Serving forever\n")
    server.serve_forever()
    
    

