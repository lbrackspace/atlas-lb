#!/usr/bin/env python
import MySQLdb.cursors
import MySQLdb
import string
import json
import sys
import os

active_loadbalancers_query = """
select h.cluster_id, count(*) as "active loadbalancers" 
    from loadbalancer l, host h where l.host_id = h.id and l.status = "ACTIVE"  
        group by cluster_id order by cluster_id;
"""

def max_collengths(rows,include_key_length=False):
    max_length = {}
    for r in rows:
        for (k,v) in r.iteritems():
            if not max_length.has_key(k):
                max_length[k] = 0
            if max_length[k] < len(str(v)):
                max_length[k] = len(str(v))
            if include_key_length and max_length[k] < len(k):
                max_length[k] = len(k)
    return max_length

def lpad(str_val,padlength,padchar=" "):
    return "%s%s%s%s"%(padchar,str_val,padchar*(padlength-len(str_val)),padchar)

def format_rows(rows,keys=None,include_key_length=False):
    col_length = max_collengths(rows,include_key_length)
    if keys == None:
        keys = sorted(col_length.keys())
    border = "+" + string.join(["-"*(col_length[k]+2) for k in keys],"+") + "+\n"
    out  = ""
    out += border
    out += "|" + string.join([lpad(str(k),col_length[k]," ") for k in keys],"|") + "|\n"
    out += border
    for r in rows:
        out += "|" + string.join([lpad(str(r[k]),col_length[k]," ") for k in keys],"|") + "|\n"
    out += border
    return out


def printf(format,*args): sys.stdout.write(format%args)

def usage(prog,conf):
    printf("usage is %s <dataCenter>\n",prog)
    printf("\n")
    printf("Scans the database at the specified data center\n")
    printf("To count how many active load balancers there are\n")
    printf("per cluster:\n")
    for dc in conf["db"].iterkeys():
        printf("    %s\n",dc)

def load_json(pathIn):
    return json.loads(open(os.path.expanduser(pathIn),"r").read())

def save_json(pathOut,obj):
    open(os.path.expanduser(pathOut),"w").write(json.dumps(obj,indent=2))


def main(*args):
    prog = os.path.basename(args[0])
    if len(args)<2:
        usage(prog)
        sys.exit()
    conf = load_json("~/lbaas_dbs.json")
    dc = args[1]
    dbconf = conf["db"][dc]
    conn = MySQLdb.connect(**dbconf)
    curr = conn.cursor(MySQLdb.cursors.DictCursor)
    curr.execute(active_loadbalancers_query)
    active_rows = curr.fetchall()
    curr.close()
    conn.close()
    cluster_total = 0
    for r in active_rows:
        cid = r["cluster_id"]
        count = r["active loadbalancers"]
        cluster_total += count
    keys = ["cluster_id", "active loadbalancers"]
    printf("%s",format_rows(active_rows,keys=keys,include_key_length=True))
    printf("total active = %d\n", cluster_total)
    printf("\n")

if __name__ == "__main__":
    main(*sys.argv)

