{
   "$schema":       "http://json-schema.org/draft-03/schema#",
   "id":            "/rvbd/schema/tm/1.0/config/active/pools#",
   "title":         "Pool",
   "description":   "A pool manages a group of backend nodes. It routes traffic to the most appropriate node, based on load balancing and session persistence criteria.",
    "javaType" :     "org.rackspace.stingray.client.pool.Pool",
   "type":          "object",
   "required":      false,
    "additionalProperties":  false,

   
   "properties": {
      "properties": {
          "javaType" :     "org.rackspace.stingray.client.pool.PoolProperties",
         "type":                  "object",
         "required":              true,
         "additionalProperties":  false,
         
         "properties": {
            
            "basic": {
                "javaType" :     "org.rackspace.stingray.client.pool.PoolBasic",
               "type":                  "object",
               "required":              false,
               "additionalProperties":  false,
               
               "properties": {
                  "bandwidth_class": {
                     "description":   "The Bandwidth Management Class this pool uses, if any.",
                     
                     "type":          "string"
                  },
                  
                  "disabled": {
                     "description":   "A list of nodes in the pool that are in the 'disabled' state.",
                     
                     "type":          "array",
                     "uniqueItems":   true,
                     
                     "items": {
                        "type":          "string"
                     }
                  },
                  
                  "draining": {
                     "description":   "A list of nodes in the pool that are in the 'draining' state.",
                     
                     "type":          "array",
                     "uniqueItems":   true,
                     
                     "items": {
                        "type":          "string"
                     }
                  },
                   
                  "max_connection_attempts": {
                     "description":   "The maximum number of connection attempts. Zero signifies no limit.",

                     "type":          "integer",
                     "minimum":       0,
                     "maximum":       10
                  },
                  
                  "failure_pool": {
                     "description":   "If all of the nodes in this pool have failed, then requests can be diverted to another pool.",
                     
                     "type":          "string"
                  },
                  
                  "max_idle_connections_pernode": {
                     "description":   "The maximum number of unused HTTP keepalive connections that should be maintained to an individual node.  Zero signifies no limit.",
                     
                     "type":          "integer",
                     "minimum":       0,
                     "maximum":       999999
                  },

                  "max_timed_out_connection_attempts": {
                     "description":   "The maximum number of timed out connection attempts. Zero signifies no limit.",

                     "type":          "integer",
                     "minimum":       0,
                     "maximum":       10
                  },
                  
                  "monitors": {
                     "description":   "The monitors assigned to this pool, used to detect failures in the back end nodes.",
                     
                     "type":          "array",
                     "uniqueItems":   true,
                     
                     "items": {
                        "type":          "string"
                     }
                  },
                  
                  "node_connection_attempts": {
                     "description":   "The number of times the software will attempt to connect to the same back-end node before marking it as failed.  This is only used when \"passive_monitoring\" is enabled.",
                     
                     "type":          "integer",
                     "minimum":       1,
                     "maximum":       100
                  },
                  
                  "nodes": {
                     "description":   "A list of all active and draining nodes in this pool.  A node should be specified as a \"<ip>:<port>\" pair.",
                     
                     "type":          "array",
                     "uniqueItems":   true,
                     
                     "items": {
                        "type":          "string"
                     }
                  },
                  
                  "note": {
                     "description":   "A description of the pool.",
                     
                     "type":          "string"
                  },
                  
                  "passive_monitoring": {
                     "description":   "Whether or not the software should check that 'real' requests (i.e. not those from monitors) to this pool appear to be working.  This should normally be enabled, so that when a node is refusing connections, responding too slowly, or sending back invalid data, it can mark that node as failed, and stop sending requests to it. <br>If this is disabled, you should ensure that suitable health monitors are configured to check your servers instead, otherwise failed requests will not be detected and subsequently retried.",
                     
                     "type":          "boolean"
                  },
                  
                  "persistence_class": {
                     "description":   "The default Session Persistence class this pool uses, if any.",
                     
                     "type":          "string"
                  },
                  
                  "transparent": {
                     "description":   "Whether or not connections to the back-ends appear to originate from the source client IP address.",
                     
                     "type":          "boolean"
                  }
               }
            },
            

              "auto_scaling": {
                  "javaType" :     "org.rackspace.stingray.client.pool.PoolAutoScale",
               "type":                  "object",
               "required":              false,
               "additionalProperties":  false,

               "properties": {
                  "cloud_credentials": {
                     "description":   "The Cloud Credentials object containing authentication credentials to use in cloud API calls.",

                     "type":          "string",
                     "required":      true
                  },

                  "cluster": {
                     "description":   "The ESX host or ESX cluster name to put the new virtual machine instances on.",

                     "type":          "string",
                     "required":      true
                  },

                  "data_center": {
                     "description":   "The name of the logical datacenter on the vCenter server. Virtual machines will be scaled up and down under the datacenter root folder.",

                     "type":          "string",
                     "required":      true
                  },

                  "data_store": {
                     "description":   "The name of the datastore to be used by the newly created virtual machine.",

                     "type":          "string",
                     "required":      true
                  },

                  "enabled": {
                     "description":   "Are the nodes of this pool subject to auto-scaling?  If yes, nodes will be automatically added and removed from the pool by the chosen auto-scaling mechanism.",

                     "type":          "boolean",
                     "required":      true
                  },

                  "external": {
                     "description":   "Whether or not auto-scaling is being handled by an external system. Set this value to true if all aspects of auto-scaling are handled by an external system, such as RightScale. If set to false, the traffic manager will determine when to scale the pool and will communicate with the cloud provider to create and destroy nodes as necessary.",

                     "type":          "boolean",
                     "required":      true
                  },

                  "hysteresis": {
                     "description":   "The time period in seconds for which a change condition must persist before the change is actually instigated.",

                     "type":          "integer",
                     "required":      true,
                     "minimum":       0
                  },

                  "imageid": {
                     "description":   "The identifier for the image of the instances to create.",

                     "type":          "string",
                     "required":      true
                  },

                  "ips_to_use": {
                     "description":   "Which type of IP addresses on the node to use.  Choose private IPs if the traffic manager is in the same cloud as the nodes, otherwise choose public IPs.",

                     "type":          "string",
                     "required":      false
                  },

                  "last_node_idle_time": {
                     "description":   "The time in seconds for which the last node in an auto-scaled pool must have been idle before it is destroyed.  This is only relevant if min_nodes is 0.",

                     "type":          "integer",
                     "required":      true,
                     "minimum":       0
                  },

                  "max_nodes": {
                     "description":   "The maximum number of nodes in this auto-scaled pool.",

                     "type":          "integer",
                     "required":      true,
                     "minimum":       0
                  },

                  "min_nodes": {
                     "description":   "The minimum number of nodes in this auto-scaled pool.",

                     "type":          "integer",
                     "required":      true,
                     "minimum":       0
                  },

                  "name": {
                     "description":   "The beginning of the name of nodes in the cloud that are part of this auto-scaled pool",

                     "type":          "string",
                     "required":      true,
                     "pattern":       "^[A-Za-z]*$"
                  },

                  "port": {
                     "description":   "The port number to use for each node in this auto-scaled pool.",

                     "type":          "integer",
                     "required":      true,
                     "minimum":       0
                  },

                  "refractory": {
                     "description":   "The time period in seconds after the instigation of a re-size during which no further changes will be made to the pool size.",

                     "type":          "integer",
                     "required":      true,
                     "minimum":       0
                  },

                  "response_time": {
                     "description":   "The expected response time of the nodes in ms.  This time is used as a reference when deciding whether a node's response time is conforming.  All responses from all the nodes will be compared to this reference and the percentage of conforming responses is the base for decisions about scaling the pool up or down.",

                     "type":          "integer",
                     "required":      true,
                     "minimum":       0
                  },

                  "scale_down_level": {
                     "description":   "The fraction, in percent, of conforming requests above which the pool size is decreased.  If the percentage of conforming requests exceeds this value, the pool is scaled down.",

                     "type":          "integer",
                     "required":      true,
                     "minimum":       0,
                     "maximum":       100
                  },

                  "scale_up_level": {
                     "description":   "The fraction, in percent, of conforming requests below which the pool size is increased.  If the percentage of conforming requests drops below this value, the pool is scaled up.",

                     "type":          "integer",
                     "required":      true,
                     "minimum":       0,
                     "maximum":       100
                  },

                  "size_id": {
                     "description":   "The identifier for the size of the instances to create.",

                     "type":          "string",
                     "required":      true
                  }
               }
            },
            
            "connection": {
                "javaType" :     "org.rackspace.stingray.client.pool.PoolConnection",
               "type":                  "object",
               "required":              false,
               "additionalProperties":  false,
               
               "properties": {
                  "max_connect_time": {
                     "description":   "How long the pool should wait for a connection to a node to be established before giving up and trying another node.",
                     
                     "type":          "integer",
                     "minimum":       1,
                     "maximum":       99999
                  },
                  
                  "max_connections_per_node": {
                     "description":   "The maximum number of concurrent connections allowed to each back-end node in this pool per machine. A value of 0 means unlimited connections.",
                     
                     "type":          "integer",
                     "minimum":       0,
                     "maximum":       999999
                  },
                  
                  "max_queue_size": {
                     "description":   "The maximum number of connections that can be queued due to connections limits. A value of 0 means unlimited queue size.",
                     
                     "type":          "integer",
                     "minimum":       0,
                     "maximum":       999999
                  },
                  
                  "max_reply_time": {
                     "description":   "How long the pool should wait for a response from the node before either discarding the request or trying another node (retryable requests only).",
                     
                     "type":          "integer",
                     "minimum":       1,
                     "maximum":       99999
                  },
                  
                  "queue_timeout": {
                     "description":   "The maximum time to keep a connection queued in seconds.",
                     
                     "type":          "integer",
                     "minimum":       0,
                     "maximum":       31536000
                  }
               }
            },
            
            "ftp": {
                "javaType" :     "org.rackspace.stingray.client.pool.PoolFtp",
               "type":                  "object",
               "required":              false,
               "additionalProperties":  false,
               
               "properties": {
                  "support_rfc_2428": {
                     "description":   "Whether or not the backend IPv4 nodes understand the EPRT and EPSV command from RFC 2428.  It is always assumed that IPv6 nodes support these commands.",
                     
                     "type":          "boolean"
                  }
               }
            },
            
            "http": {
                "javaType" :     "org.rackspace.stingray.client.pool.PoolHttp",
               "type":                  "object",
               "required":              false,
               "additionalProperties":  false,
               
               "properties": {
                  "keepalive": {
                     "description":   "Whether or not the pool should maintain HTTP keepalive connections to the nodes.",
                     
                     "type":          "boolean"
                  },
                  
                  "keepalive_non_idempotent": {
                     "description":   "Whether or not the pool should maintain HTTP keepalive connections to the nodes for non-idempotent requests.",
                     
                     "type":          "boolean"
                  }
               }
            },
            
            "load_balancing": {
                "javaType" :     "org.rackspace.stingray.client.pool.PoolLoadbalancing",
               "type":                  "object",
               "required":              false,
               "additionalProperties":  false,
               
               "properties": {
                  "algorithm": {
                     "description":   "The load balancing algorithm that this pool uses to distribute load across its nodes.",
                     
                     "type":          "string"
                  },
                  
                  "node_weighting": {
                     "description":   "A table containing per-node weighting for use in some load balancing algorithms (weighted least connections and weighted round robin).",
                     
                     "type":          "array",
                     "required":      true,
                     
                     "items": {
                         "javaType" :     "org.rackspace.stingray.client.pool.PoolNodeWeight",
                        "type":                  "object",
                        "additionalProperties":  false,
                        
                        "properties": {
                           "node": {
                              "description":   "Node to which the weighting should be applied.",
                              
                              "type":          "string",
                              "required":      true
                           },
                           "weight": {
                              "description":   "Weight for the node. The actual value in isolation does not matter: As long as it is a valid integer 1-100, the per-node weightings are calculated on the relative values between the nodes.",
                              
                              "type":          "integer",
                              "required":      true,
                              "minimum":       1,
                              "maximum":       100
                           }
                        }
                     }
                  },
                  
                  "priority_enabled": {
                     "description":   "Enable priority lists.",
                     
                     "type":          "boolean"
                  },
                  
                  "priority_nodes": {
                     "description":   "Minimum number of highest-priority active nodes.",
                     
                     "type":          "integer",
                     "minimum":       1,
                     "maximum":       65535
                  },
                  
                  "priority_values": {
                     "description":   "A list of node priorities, higher values signify higher priority.  Priorities are specified using the format \"<ip>:<port>:<priority>\", if a priority is not specified for a node it is assumed to be \"1\".",
                     
                     "type":          "array",
                     "uniqueItems":   true,
                     
                     "items": {
                        "type":          "string"
                     }
                  }
               }
            },
            
            "node": {
                "javaType" :     "org.rackspace.stingray.client.pool.PoolNode",
               "type":                  "object",
               "required":              false,
               "additionalProperties":  false,
               
               "properties": {
                  "close_on_death": {
                     "description":   "Close all connections to a node once we detect that it has failed.",
                     
                     "type":          "boolean"
                  },
                  
                  "retry_fail_time": {
                     "description":   "The amount of time, in seconds, that a traffic manager will wait before re-trying a node that has been marked as failed by passive monitoring.",
                     
                     "type":          "integer",
                     "minimum":       1,
                     "maximum":       99999
                  }
               }
            },
            
            "smtp": {
                "javaType" :     "org.rackspace.stingray.client.pool.PoolSmtp",
               "type":                  "object",
               "required":              false,
               "additionalProperties":  false,
               
               "properties": {
                  "send_starttls": {
                     "description":   "If we are encrypting traffic for an SMTP connection, should we upgrade to SSL using STARTTLS.",
                     
                     "type":          "boolean"
                  }
               }
            },
            
            "ssl": {
                "javaType" :     "org.rackspace.stingray.client.pool.PoolSsl",
               "type":                  "object",
               "required":              false,
               "additionalProperties":  false,
               
               "properties": {
                  "client_auth": {
                     "description":   "Whether or not a suitable certificate and private key from the SSL Client Certificates catalog be used if the back-end server requests client authentication.",
                     
                     "type":          "boolean"
                  },
                  
                  "enable": {
                     "description":   "Whether or not the pool should encrypt data before sending it to a back-end node.",
                     
                     "type":          "boolean"
                  },
                  
                  "enhance": {
                     "description":   "SSL protocol enhancements allow your traffic manager to prefix each new SSL connection with information about the client. This enables Riverbed Web Servers to run multiple SSL sites, and to discover the client's IP address. Only enable this if you are using nodes for this pool which are Riverbed Web Servers or Stingray Traffic Managers, whose virtual servers have the \"ssl_trust_magic\" setting enabled.",
                     
                     "type":          "boolean"
                  },
                  
                  "send_close_alerts": {
                     "description":   "Whether or not to send an SSL/TLS \"close alert\" when initiating a socket disconnection.",
                     
                     "type":          "boolean"
                  },
                  
                  "server_name": {
                     "description":   "Whether or not the software should use the TLS 1.0 server_name extension, which may help the back-end node provide the correct certificate. Enabling this setting will force the use of at least TLS 1.0.",
                     
                     "type":          "boolean"
                  },
                  
                  "strict_verify": {
                     "description":   "Whether or not strict certificate verification should be performed. This will turn on checks to disallow server certificates that don't match the server name, are self-signed, expired, revoked, or have an unknown CA.",
                     
                     "type":          "boolean"
                  }
               }
            },
            
            "tcp": {
                "javaType" :     "org.rackspace.stingray.client.pool.PoolTcp",
               "type":                  "object",
               "required":              false,
               "additionalProperties":  false,
               
               "properties": {
                  "nagle": {
                     "description":   "Whether or not Nagle's algorithm should be used for TCP connections to the back-end nodes.",
                     
                     "type":          "boolean"
                  }
               }
            },
            
            "udp": {
                "javaType" :     "org.rackspace.stingray.client.pool.PoolUdp",
               "type":                  "object",
               "required":              false,
               "additionalProperties":  false,
               
               "properties": {
                  "accept_from": {
                     "description":   "The IP addresses and ports from which responses to UDP requests should be accepted. \n If set to accept responses from a specific set of IP addresses, you will need to enter a CIDR Mask (such as 10.100.0.0/16).",
                     
                     "type":          "string"
                  },
                  
                  "accept_from_mask": {
                     "description":   "The CIDR mask that matches IPs we want to receive responses from.",
                     
                     "type":          "string"
                  }
               }
            }
         }
      }
   }
}
