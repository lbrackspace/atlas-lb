<?xml version="1.0" ?>

<!--
    Copyright (c) 2005-2015 Zeus Technology. All rights reserved.

-->

<definitions name="Catalog.Kerberos.Principals"
 targetNamespace="http://soap.zeus.com/zxtm/1.0/"
 xmlns:zeusns="http://soap.zeus.com/zxtm/1.0/"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
 xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
 xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
 xmlns="http://schemas.xmlsoap.org/wsdl/">
   
   <types>
      <xsd:schema targetNamespace='http://soap.zeus.com/zxtm/1.0/'
       xmlns='http://www.w3.org/2001/XMLSchema'
       xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/'
       xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/'>
         
         <xsd:complexType name="Catalog.Kerberos.Principals.PrincipalParameter">
           <xsd:annotation>
             <xsd:documentation>This structure contains the required configuration values for a Kerberos principal.</xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="service" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The service name part of the Kerberos principal name the traffic manager should use to authenticate itself.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="realm" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The Kerberos realm where the principal belongs.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="keytab" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The name of the Kerberos keytab file containing suitable credentials to authenticate as the specified Kerberos principal.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="Catalog.Kerberos.Principals.PrincipalParameterArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:Catalog.Kerberos.Principals.PrincipalParameter[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="StringArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:string[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="StringArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:StringArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:boolean[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:booleanArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         
         <xsd:complexType name="doubleArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:double[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="intArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:int[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="longArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:long[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedIntArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedInt[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedLongArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedLong[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="DeploymentError">
           <xsd:annotation>
            <xsd:documentation>
              The DeploymentError fault is raised when a configuration
              change causes errors when attempting to apply the configuration
              to a running traffic manager.
         
              It would be raised in cases such as failing to bind to
              a port when enabling a Virtual Server.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidInput">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidInput fault is raised when the input to a function is
              invalid, for example a number was out of range. This fault is also
              raised in cases such as VirtualServer.setPool() where the Pool
              doesn't exist
         
              The details in the fault contain the object, key and value
              that caused the fault. These might be blank if they are not relevant
              to the fault.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidObjectName">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidObjectName fault is raised when attempting to create
              a new object (e.g. via an add, rename or copy) and the name is
              invalid (e.g. it contains a '/').
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidOperation">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidOperation fault is emitted when attempting an operation
              that doesn't make sense or is prohibited, for example deleting
              a built-in monitor, or attempting to rename an object twice in
              the same call. 
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="LicenseError">
           <xsd:annotation>
            <xsd:documentation>
              The LicenseError fault is emitted when attempting to use functionality
              that is disabled by the license key.
         
              You will need to contact your support provider to get a new license
              key with the required functionality. There may be a charge for this.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="feature" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The license key feature that was missing
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectAlreadyExists">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectAlreadyExists fault is raised when attempting to create an
             object (such as a Virtual Server) that already exists. It will also
             be raised in cases such as renaming and copying objects.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectDoesNotExist">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectDoesNotExist fault is raised when attempting to perform an
             operation on an object (such as Virtual Server) that doesn't exist.
         
             This fault will only be raised if the primary object in the call doesn't
             exist. For example if calling VirtualServer.setPool(), then
             this fault will be raised if the Virtual Server doesn't exist, but if
             the Pool doesn't exist then the "InvalidInput" fault will be raised.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectInUse">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectInUse fault is raised when attempting to delete an object
             that is referenced by another object, for example deleting a Pool
             that is in use by a Virtual Server.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
      </xsd:schema>
   </types>
   
   <message name="addKDCsRequest">
      <part name="principal_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addKDCsResponse"></message>
   
   <message name="addKDCsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="principal_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addKDCsByLocationResponse"></message>
   
   <message name="addPrincipalRequest">
      <part name="principal_names" type="zeusns:StringArray" />
      <part name="principal_parameters" type="zeusns:Catalog.Kerberos.Principals.PrincipalParameterArray" />
   </message>
   
   <message name="addPrincipalResponse"></message>
   
   <message name="copyPrincipalRequest">
      <part name="principal_names" type="zeusns:StringArray" />
      <part name="new_names" type="zeusns:StringArray" />
   </message>
   
   <message name="copyPrincipalResponse"></message>
   
   <message name="deletePrincipalRequest">
      <part name="principal_names" type="zeusns:StringArray" />
   </message>
   
   <message name="deletePrincipalResponse"></message>
   
   <message name="getKDCsRequest">
      <part name="principal_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getKDCsResponse">
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getKDCsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="principal_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getKDCsByLocationResponse">
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getKRB5ConfRequest">
      <part name="principal_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getKRB5ConfResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getKRB5ConfByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="principal_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getKRB5ConfByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getKeytabRequest">
      <part name="principal_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getKeytabResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getKeytabByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="principal_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getKeytabByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getPrincipalNamesRequest"></message>
   
   <message name="getPrincipalNamesResponse">
      <part name="principal_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRealmRequest">
      <part name="principal_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRealmResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getRealmByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="principal_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRealmByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getServiceRequest">
      <part name="principal_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getServiceResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getServiceByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="principal_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getServiceByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="removeKDCsRequest">
      <part name="principal_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeKDCsResponse"></message>
   
   <message name="removeKDCsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="principal_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeKDCsByLocationResponse"></message>
   
   <message name="renamePrincipalRequest">
      <part name="principal_names" type="zeusns:StringArray" />
      <part name="new_names" type="zeusns:StringArray" />
   </message>
   
   <message name="renamePrincipalResponse"></message>
   
   <message name="setKDCsRequest">
      <part name="principal_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setKDCsResponse"></message>
   
   <message name="setKDCsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="principal_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setKDCsByLocationResponse"></message>
   
   <message name="setKRB5ConfRequest">
      <part name="principal_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setKRB5ConfResponse"></message>
   
   <message name="setKRB5ConfByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="principal_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setKRB5ConfByLocationResponse"></message>
   
   <message name="setKeytabRequest">
      <part name="principal_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setKeytabResponse"></message>
   
   <message name="setKeytabByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="principal_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setKeytabByLocationResponse"></message>
   
   <message name="setRealmRequest">
      <part name="principal_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setRealmResponse"></message>
   
   <message name="setRealmByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="principal_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setRealmByLocationResponse"></message>
   
   <message name="setServiceRequest">
      <part name="principal_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setServiceResponse"></message>
   
   <message name="setServiceByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="principal_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setServiceByLocationResponse"></message>
   
   <message name="DeploymentError">
      <part name="parameters" type="zeusns:DeploymentError" />
   </message>
   
   <message name="InvalidInput">
      <part name="parameters" type="zeusns:InvalidInput" />
   </message>
   
   <message name="InvalidObjectName">
      <part name="parameters" type="zeusns:InvalidObjectName" />
   </message>
   
   <message name="InvalidOperation">
      <part name="parameters" type="zeusns:InvalidOperation" />
   </message>
   
   <message name="LicenseError">
      <part name="parameters" type="zeusns:LicenseError" />
   </message>
   
   <message name="ObjectAlreadyExists">
      <part name="parameters" type="zeusns:ObjectAlreadyExists" />
   </message>
   
   <message name="ObjectDoesNotExist">
      <part name="parameters" type="zeusns:ObjectDoesNotExist" />
   </message>
   
   <message name="ObjectInUse">
      <part name="parameters" type="zeusns:ObjectInUse" />
   </message>
   
   <portType name="Catalog.Kerberos.PrincipalsPort">
      <operation name="addKDCs">
         <documentation>
            Add a host/port pair to the lists of KDCs, for each of the named principals
         </documentation>
         
         <input message="zeusns:addKDCsRequest"/>
         <output message="zeusns:addKDCsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="addKDCsByLocation">
         <documentation>
            Add a host/port pair to the lists of KDCs, for each of the named principals This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:addKDCsByLocationRequest"/>
         <output message="zeusns:addKDCsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="addPrincipal">
         <documentation>
            Add new Kerberos principals.
         </documentation>
         
         <input message="zeusns:addPrincipalRequest"/>
         <output message="zeusns:addPrincipalResponse"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="copyPrincipal">
         <documentation>
            Copy the named Kerberos principals.
         </documentation>
         
         <input message="zeusns:copyPrincipalRequest"/>
         <output message="zeusns:copyPrincipalResponse"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="deletePrincipal">
         <documentation>
            Delete the named Kerberos principals.
         </documentation>
         
         <input message="zeusns:deletePrincipalRequest"/>
         <output message="zeusns:deletePrincipalResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="ObjectInUse" message="zeusns:ObjectInUse"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="getKDCs">
         <documentation>
            Get the explicit list of Kerberos KDCs, for each of the named principals
         </documentation>
         
         <input message="zeusns:getKDCsRequest"/>
         <output message="zeusns:getKDCsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="getKDCsByLocation">
         <documentation>
            Get the explicit list of Kerberos KDCs, for each of the named principals This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getKDCsByLocationRequest"/>
         <output message="zeusns:getKDCsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="getKRB5Conf">
         <documentation>
            Get the name of the optional Kerberos configuration file
         </documentation>
         
         <input message="zeusns:getKRB5ConfRequest"/>
         <output message="zeusns:getKRB5ConfResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="getKRB5ConfByLocation">
         <documentation>
            Get the name of the optional Kerberos configuration file This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getKRB5ConfByLocationRequest"/>
         <output message="zeusns:getKRB5ConfByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="getKeytab">
         <documentation>
            Get the name of the associated Kerberos keytab file
         </documentation>
         
         <input message="zeusns:getKeytabRequest"/>
         <output message="zeusns:getKeytabResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="getKeytabByLocation">
         <documentation>
            Get the name of the associated Kerberos keytab file This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getKeytabByLocationRequest"/>
         <output message="zeusns:getKeytabByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="getPrincipalNames">
         <documentation>
            Get the names of all the configured Kerberos principals.
         </documentation>
         
         <input message="zeusns:getPrincipalNamesRequest"/>
         <output message="zeusns:getPrincipalNamesResponse"/>
      </operation>
      
      <operation name="getRealm">
         <documentation>
            Get the Kerberos realm
         </documentation>
         
         <input message="zeusns:getRealmRequest"/>
         <output message="zeusns:getRealmResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="getRealmByLocation">
         <documentation>
            Get the Kerberos realm This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getRealmByLocationRequest"/>
         <output message="zeusns:getRealmByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="getService">
         <documentation>
            Get the service name aspect of the Kerberos principal name the traffic manager should use to authenticate itself
         </documentation>
         
         <input message="zeusns:getServiceRequest"/>
         <output message="zeusns:getServiceResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="getServiceByLocation">
         <documentation>
            Get the service name aspect of the Kerberos principal name the traffic manager should use to authenticate itself This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getServiceByLocationRequest"/>
         <output message="zeusns:getServiceByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="removeKDCs">
         <documentation>
            Remove a host/port pair from the lists of KDCs, for each of the named principals
         </documentation>
         
         <input message="zeusns:removeKDCsRequest"/>
         <output message="zeusns:removeKDCsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="removeKDCsByLocation">
         <documentation>
            Remove a host/port pair from the lists of KDCs, for each of the named principals This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:removeKDCsByLocationRequest"/>
         <output message="zeusns:removeKDCsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="renamePrincipal">
         <documentation>
            Rename the named Kerberos principals.
         </documentation>
         
         <input message="zeusns:renamePrincipalRequest"/>
         <output message="zeusns:renamePrincipalResponse"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="setKDCs">
         <documentation>
            Set the explicit list of Kerberos KDCs, for each of the named principals
         </documentation>
         
         <input message="zeusns:setKDCsRequest"/>
         <output message="zeusns:setKDCsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="setKDCsByLocation">
         <documentation>
            Set the explicit list of Kerberos KDCs, for each of the named principals This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setKDCsByLocationRequest"/>
         <output message="zeusns:setKDCsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="setKRB5Conf">
         <documentation>
            Set the name of the optional Kerberos configuration file
         </documentation>
         
         <input message="zeusns:setKRB5ConfRequest"/>
         <output message="zeusns:setKRB5ConfResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="setKRB5ConfByLocation">
         <documentation>
            Set the name of the optional Kerberos configuration file This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setKRB5ConfByLocationRequest"/>
         <output message="zeusns:setKRB5ConfByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="setKeytab">
         <documentation>
            Set the name of the associated Kerberos keytab file
         </documentation>
         
         <input message="zeusns:setKeytabRequest"/>
         <output message="zeusns:setKeytabResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="setKeytabByLocation">
         <documentation>
            Set the name of the associated Kerberos keytab file This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setKeytabByLocationRequest"/>
         <output message="zeusns:setKeytabByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="setRealm">
         <documentation>
            Set the Kerberos realm
         </documentation>
         
         <input message="zeusns:setRealmRequest"/>
         <output message="zeusns:setRealmResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="setRealmByLocation">
         <documentation>
            Set the Kerberos realm This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setRealmByLocationRequest"/>
         <output message="zeusns:setRealmByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="setService">
         <documentation>
            Set the service name aspect of the Kerberos principal name the traffic manager should use to authenticate itself
         </documentation>
         
         <input message="zeusns:setServiceRequest"/>
         <output message="zeusns:setServiceResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="setServiceByLocation">
         <documentation>
            Set the service name aspect of the Kerberos principal name the traffic manager should use to authenticate itself This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setServiceByLocationRequest"/>
         <output message="zeusns:setServiceByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
   </portType>
   
   <binding name="Catalog.Kerberos.PrincipalsBinding" type="zeusns:Catalog.Kerberos.PrincipalsPort">
      <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
      <operation name="addKDCs">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/addKDCs"/>
         <documentation>
            Add a host/port pair to the lists of KDCs, for each of the named principals
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addKDCsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/addKDCsByLocation"/>
         <documentation>
            Add a host/port pair to the lists of KDCs, for each of the named principals This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addPrincipal">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/addPrincipal"/>
         <documentation>
            Add new Kerberos principals.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="copyPrincipal">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/copyPrincipal"/>
         <documentation>
            Copy the named Kerberos principals.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="deletePrincipal">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/deletePrincipal"/>
         <documentation>
            Delete the named Kerberos principals.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectInUse">
            <soap:fault use="encoded" name="ObjectInUse" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getKDCs">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/getKDCs"/>
         <documentation>
            Get the explicit list of Kerberos KDCs, for each of the named principals
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getKDCsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/getKDCsByLocation"/>
         <documentation>
            Get the explicit list of Kerberos KDCs, for each of the named principals This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getKRB5Conf">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/getKRB5Conf"/>
         <documentation>
            Get the name of the optional Kerberos configuration file
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getKRB5ConfByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/getKRB5ConfByLocation"/>
         <documentation>
            Get the name of the optional Kerberos configuration file This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getKeytab">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/getKeytab"/>
         <documentation>
            Get the name of the associated Kerberos keytab file
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getKeytabByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/getKeytabByLocation"/>
         <documentation>
            Get the name of the associated Kerberos keytab file This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getPrincipalNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/getPrincipalNames"/>
         <documentation>
            Get the names of all the configured Kerberos principals.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getRealm">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/getRealm"/>
         <documentation>
            Get the Kerberos realm
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRealmByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/getRealmByLocation"/>
         <documentation>
            Get the Kerberos realm This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getService">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/getService"/>
         <documentation>
            Get the service name aspect of the Kerberos principal name the traffic manager should use to authenticate itself
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getServiceByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/getServiceByLocation"/>
         <documentation>
            Get the service name aspect of the Kerberos principal name the traffic manager should use to authenticate itself This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeKDCs">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/removeKDCs"/>
         <documentation>
            Remove a host/port pair from the lists of KDCs, for each of the named principals
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeKDCsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/removeKDCsByLocation"/>
         <documentation>
            Remove a host/port pair from the lists of KDCs, for each of the named principals This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="renamePrincipal">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/renamePrincipal"/>
         <documentation>
            Rename the named Kerberos principals.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setKDCs">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/setKDCs"/>
         <documentation>
            Set the explicit list of Kerberos KDCs, for each of the named principals
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setKDCsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/setKDCsByLocation"/>
         <documentation>
            Set the explicit list of Kerberos KDCs, for each of the named principals This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setKRB5Conf">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/setKRB5Conf"/>
         <documentation>
            Set the name of the optional Kerberos configuration file
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setKRB5ConfByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/setKRB5ConfByLocation"/>
         <documentation>
            Set the name of the optional Kerberos configuration file This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setKeytab">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/setKeytab"/>
         <documentation>
            Set the name of the associated Kerberos keytab file
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setKeytabByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/setKeytabByLocation"/>
         <documentation>
            Set the name of the associated Kerberos keytab file This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRealm">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/setRealm"/>
         <documentation>
            Set the Kerberos realm
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRealmByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/setRealmByLocation"/>
         <documentation>
            Set the Kerberos realm This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setService">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/setService"/>
         <documentation>
            Set the service name aspect of the Kerberos principal name the traffic manager should use to authenticate itself
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setServiceByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/setServiceByLocation"/>
         <documentation>
            Set the service name aspect of the Kerberos principal name the traffic manager should use to authenticate itself This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Kerberos/Principals/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
   </binding>
   
   <service name="Catalog.Kerberos.Principals">
      <documentation>
         The Catalog.Kerberos.Principal interface allows management of Kerberos Principals. Using this interface, you can create, delete and rename Kerberos principals, and manage their configuration.
      </documentation>
      
      <port name="Catalog.Kerberos.PrincipalsPort" binding="zeusns:Catalog.Kerberos.PrincipalsBinding">
         <soap:address location="https://admin_server:9090/soap"/>
      </port>
   </service>
   
</definitions>
