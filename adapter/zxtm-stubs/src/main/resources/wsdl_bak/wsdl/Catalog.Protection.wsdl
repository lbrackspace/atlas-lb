<?xml version="1.0" ?>

<!--
    Copyright (c) 2005-2013 Zeus Technology. All rights reserved.

-->

<definitions name="Catalog.Protection"
 targetNamespace="http://soap.zeus.com/zxtm/1.0/"
 xmlns:zeusns="http://soap.zeus.com/zxtm/1.0/"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
 xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
 xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
 xmlns="http://schemas.xmlsoap.org/wsdl/">
   
   <types>
      <xsd:schema targetNamespace='http://soap.zeus.com/zxtm/1.0/'
       xmlns='http://www.w3.org/2001/XMLSchema'
       xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/'
       xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/'>
         
         <xsd:complexType name="StringArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:string[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="StringArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:StringArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:boolean[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:booleanArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         
         <xsd:complexType name="doubleArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:double[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="intArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:int[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="longArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:long[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedIntArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedInt[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedLongArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedLong[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="DeploymentError">
           <xsd:annotation>
            <xsd:documentation>
              The DeploymentError fault is raised when a configuration
              change causes errors when attempting to apply the configuration
              to a running traffic manager.
         
              It would be raised in cases such as failing to bind to
              a port when enabling a Virtual Server.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidInput">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidInput fault is raised when the input to a function is
              invalid, for example a number was out of range. This fault is also
              raised in cases such as VirtualServer.setPool() where the Pool
              doesn't exist
         
              The details in the fault contain the object, key and value
              that caused the fault. These might be blank if they are not relevant
              to the fault.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidObjectName">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidObjectName fault is raised when attempting to create
              a new object (e.g. via an add, rename or copy) and the name is
              invalid (e.g. it contains a '/').
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidOperation">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidOperation fault is emitted when attempting an operation
              that doesn't make sense or is prohibited, for example deleting
              a built-in monitor, or attempting to rename an object twice in
              the same call. 
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectAlreadyExists">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectAlreadyExists fault is raised when attempting to create an
             object (such as a Virtual Server) that already exists. It will also
             be raised in cases such as renaming and copying objects.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectDoesNotExist">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectDoesNotExist fault is raised when attempting to perform an
             operation on an object (such as Virtual Server) that doesn't exist.
         
             This fault will only be raised if the primary object in the call doesn't
             exist. For example if calling VirtualServer.setPool(), then
             this fault will be raised if the Virtual Server doesn't exist, but if
             the Pool doesn't exist then the "InvalidInput" fault will be raised.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectInUse">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectInUse fault is raised when attempting to delete an object
             that is referenced by another object, for example deleting a Pool
             that is in use by a Virtual Server.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
      </xsd:schema>
   </types>
   
   <message name="addAllowedAddressesRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addAllowedAddressesResponse"></message>
   
   <message name="addAllowedAddressesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addAllowedAddressesByLocationResponse"></message>
   
   <message name="addBannedAddressesRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addBannedAddressesResponse"></message>
   
   <message name="addBannedAddressesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addBannedAddressesByLocationResponse"></message>
   
   <message name="addProtectionRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="addProtectionResponse"></message>
   
   <message name="copyProtectionRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="new_names" type="zeusns:StringArray" />
   </message>
   
   <message name="copyProtectionResponse"></message>
   
   <message name="deleteProtectionRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="deleteProtectionResponse"></message>
   
   <message name="getAllowedAddressesRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAllowedAddressesResponse">
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getAllowedAddressesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAllowedAddressesByLocationResponse">
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getBannedAddressesRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getBannedAddressesResponse">
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getBannedAddressesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getBannedAddressesByLocationResponse">
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getDebugRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getDebugResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getDebugByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getDebugByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getEnabledRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getEnabledResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getEnabledByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getHTTPCheckRfc2396Request">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getHTTPCheckRfc2396Response">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getHTTPCheckRfc2396ByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getHTTPCheckRfc2396ByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getHTTPRejectBinaryRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getHTTPRejectBinaryResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getHTTPRejectBinaryByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getHTTPRejectBinaryByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getHTTPSendErrorPageRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getHTTPSendErrorPageResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getHTTPSendErrorPageByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getHTTPSendErrorPageByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getLogIntervalRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLogIntervalResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getLogIntervalByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLogIntervalByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMax10ConnectionsRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMax10ConnectionsResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMax10ConnectionsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMax10ConnectionsByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMax1ConnectionsRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMax1ConnectionsResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMax1ConnectionsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMax1ConnectionsByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxConnectionRateRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxConnectionRateResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxConnectionRateByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxConnectionRateByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxHTTPBodyLengthRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxHTTPBodyLengthResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxHTTPBodyLengthByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxHTTPBodyLengthByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxHTTPHeaderLengthRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxHTTPHeaderLengthResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxHTTPHeaderLengthByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxHTTPHeaderLengthByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxHTTPRequestLengthRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxHTTPRequestLengthResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxHTTPRequestLengthByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxHTTPRequestLengthByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxHTTPURLLengthRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxHTTPURLLengthResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxHTTPURLLengthByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxHTTPURLLengthByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMinConnectionsRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMinConnectionsResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMinConnectionsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMinConnectionsByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getNoteRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getNoteResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getPerProcessConnectionCountRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getPerProcessConnectionCountResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getPerProcessConnectionCountByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getPerProcessConnectionCountByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getProtectionNamesRequest"></message>
   
   <message name="getProtectionNamesResponse">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRateTimerRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRateTimerResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getRateTimerByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRateTimerByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getRuleRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRuleResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getRuleByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRuleByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getTestingRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getTestingResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getTestingByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getTestingByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="removeAllowedAddressesRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeAllowedAddressesResponse"></message>
   
   <message name="removeAllowedAddressesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeAllowedAddressesByLocationResponse"></message>
   
   <message name="removeBannedAddressesRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeBannedAddressesResponse"></message>
   
   <message name="removeBannedAddressesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeBannedAddressesByLocationResponse"></message>
   
   <message name="renameProtectionRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="new_names" type="zeusns:StringArray" />
   </message>
   
   <message name="renameProtectionResponse"></message>
   
   <message name="setAllowedAddressesRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setAllowedAddressesResponse"></message>
   
   <message name="setAllowedAddressesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setAllowedAddressesByLocationResponse"></message>
   
   <message name="setBannedAddressesRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setBannedAddressesResponse"></message>
   
   <message name="setBannedAddressesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setBannedAddressesByLocationResponse"></message>
   
   <message name="setDebugRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setDebugResponse"></message>
   
   <message name="setDebugByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setDebugByLocationResponse"></message>
   
   <message name="setEnabledRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setEnabledResponse"></message>
   
   <message name="setEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setEnabledByLocationResponse"></message>
   
   <message name="setHTTPCheckRfc2396Request">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setHTTPCheckRfc2396Response"></message>
   
   <message name="setHTTPCheckRfc2396ByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setHTTPCheckRfc2396ByLocationResponse"></message>
   
   <message name="setHTTPRejectBinaryRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setHTTPRejectBinaryResponse"></message>
   
   <message name="setHTTPRejectBinaryByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setHTTPRejectBinaryByLocationResponse"></message>
   
   <message name="setHTTPSendErrorPageRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setHTTPSendErrorPageResponse"></message>
   
   <message name="setHTTPSendErrorPageByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setHTTPSendErrorPageByLocationResponse"></message>
   
   <message name="setLogIntervalRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setLogIntervalResponse"></message>
   
   <message name="setLogIntervalByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setLogIntervalByLocationResponse"></message>
   
   <message name="setMax10ConnectionsRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMax10ConnectionsResponse"></message>
   
   <message name="setMax10ConnectionsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMax10ConnectionsByLocationResponse"></message>
   
   <message name="setMax1ConnectionsRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMax1ConnectionsResponse"></message>
   
   <message name="setMax1ConnectionsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMax1ConnectionsByLocationResponse"></message>
   
   <message name="setMaxConnectionRateRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxConnectionRateResponse"></message>
   
   <message name="setMaxConnectionRateByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxConnectionRateByLocationResponse"></message>
   
   <message name="setMaxHTTPBodyLengthRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxHTTPBodyLengthResponse"></message>
   
   <message name="setMaxHTTPBodyLengthByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxHTTPBodyLengthByLocationResponse"></message>
   
   <message name="setMaxHTTPHeaderLengthRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxHTTPHeaderLengthResponse"></message>
   
   <message name="setMaxHTTPHeaderLengthByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxHTTPHeaderLengthByLocationResponse"></message>
   
   <message name="setMaxHTTPRequestLengthRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxHTTPRequestLengthResponse"></message>
   
   <message name="setMaxHTTPRequestLengthByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxHTTPRequestLengthByLocationResponse"></message>
   
   <message name="setMaxHTTPURLLengthRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxHTTPURLLengthResponse"></message>
   
   <message name="setMaxHTTPURLLengthByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxHTTPURLLengthByLocationResponse"></message>
   
   <message name="setMinConnectionsRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMinConnectionsResponse"></message>
   
   <message name="setMinConnectionsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMinConnectionsByLocationResponse"></message>
   
   <message name="setNoteRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setNoteResponse"></message>
   
   <message name="setPerProcessConnectionCountRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setPerProcessConnectionCountResponse"></message>
   
   <message name="setPerProcessConnectionCountByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setPerProcessConnectionCountByLocationResponse"></message>
   
   <message name="setRateTimerRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setRateTimerResponse"></message>
   
   <message name="setRateTimerByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setRateTimerByLocationResponse"></message>
   
   <message name="setRuleRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setRuleResponse"></message>
   
   <message name="setRuleByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setRuleByLocationResponse"></message>
   
   <message name="setTestingRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setTestingResponse"></message>
   
   <message name="setTestingByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setTestingByLocationResponse"></message>
   
   <message name="DeploymentError">
      <part name="parameters" type="zeusns:DeploymentError" />
   </message>
   
   <message name="InvalidInput">
      <part name="parameters" type="zeusns:InvalidInput" />
   </message>
   
   <message name="InvalidObjectName">
      <part name="parameters" type="zeusns:InvalidObjectName" />
   </message>
   
   <message name="InvalidOperation">
      <part name="parameters" type="zeusns:InvalidOperation" />
   </message>
   
   <message name="ObjectAlreadyExists">
      <part name="parameters" type="zeusns:ObjectAlreadyExists" />
   </message>
   
   <message name="ObjectDoesNotExist">
      <part name="parameters" type="zeusns:ObjectDoesNotExist" />
   </message>
   
   <message name="ObjectInUse">
      <part name="parameters" type="zeusns:ObjectInUse" />
   </message>
   
   <portType name="Catalog.ProtectionPort">
      <operation name="addAllowedAddresses">
         <documentation>
            Add new IP addresses and CIDR IP subnets to the list of machines that are always allowed access.
         </documentation>
         
         <input message="zeusns:addAllowedAddressesRequest"/>
         <output message="zeusns:addAllowedAddressesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="addAllowedAddressesByLocation">
         <documentation>
            Add new IP addresses and CIDR IP subnets to the list of machines that are always allowed access. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:addAllowedAddressesByLocationRequest"/>
         <output message="zeusns:addAllowedAddressesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="addBannedAddresses">
         <documentation>
            Add new IP addresses and CIDR IP subnets to the list of machines that aren't allowed access.
         </documentation>
         
         <input message="zeusns:addBannedAddressesRequest"/>
         <output message="zeusns:addBannedAddressesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="addBannedAddressesByLocation">
         <documentation>
            Add new IP addresses and CIDR IP subnets to the list of machines that aren't allowed access. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:addBannedAddressesByLocationRequest"/>
         <output message="zeusns:addBannedAddressesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="addProtection">
         <documentation>
            Add new Protection classes.
         </documentation>
         
         <input message="zeusns:addProtectionRequest"/>
         <output message="zeusns:addProtectionResponse"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="copyProtection">
         <documentation>
            Copy the named Protection classes.
         </documentation>
         
         <input message="zeusns:copyProtectionRequest"/>
         <output message="zeusns:copyProtectionResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="deleteProtection">
         <documentation>
            Delete the named Protection classes.
         </documentation>
         
         <input message="zeusns:deleteProtectionRequest"/>
         <output message="zeusns:deleteProtectionResponse"/>
         <fault name="ObjectInUse" message="zeusns:ObjectInUse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="getAllowedAddresses">
         <documentation>
            Get the list of IP addresses and CIDR IP subnets that are always allowed access.
         </documentation>
         
         <input message="zeusns:getAllowedAddressesRequest"/>
         <output message="zeusns:getAllowedAddressesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAllowedAddressesByLocation">
         <documentation>
            Get the list of IP addresses and CIDR IP subnets that are always allowed access. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAllowedAddressesByLocationRequest"/>
         <output message="zeusns:getAllowedAddressesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getBannedAddresses">
         <documentation>
            Get the list of IP addresses and CIDR IP subnets that aren't allowed access.
         </documentation>
         
         <input message="zeusns:getBannedAddressesRequest"/>
         <output message="zeusns:getBannedAddressesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getBannedAddressesByLocation">
         <documentation>
            Get the list of IP addresses and CIDR IP subnets that aren't allowed access. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getBannedAddressesByLocationRequest"/>
         <output message="zeusns:getBannedAddressesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getDebug">
         <documentation>
            Get whether the service protection classes are in debug mode. When in debug mode, verbose log messages are written.
         </documentation>
         
         <input message="zeusns:getDebugRequest"/>
         <output message="zeusns:getDebugResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getDebugByLocation">
         <documentation>
            Get whether the service protection classes are in debug mode. When in debug mode, verbose log messages are written. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getDebugByLocationRequest"/>
         <output message="zeusns:getDebugByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getEnabled">
         <documentation>
            Get whether the service protection classes are enabled.
         </documentation>
         
         <input message="zeusns:getEnabledRequest"/>
         <output message="zeusns:getEnabledResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getEnabledByLocation">
         <documentation>
            Get whether the service protection classes are enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getEnabledByLocationRequest"/>
         <output message="zeusns:getEnabledByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getHTTPCheckRfc2396">
         <documentation>
            Get whether requests with poorly-formed URLs (as specified in RFC 2396) should be rejected.
         </documentation>
         
         <input message="zeusns:getHTTPCheckRfc2396Request"/>
         <output message="zeusns:getHTTPCheckRfc2396Response"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getHTTPCheckRfc2396ByLocation">
         <documentation>
            Get whether requests with poorly-formed URLs (as specified in RFC 2396) should be rejected. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getHTTPCheckRfc2396ByLocationRequest"/>
         <output message="zeusns:getHTTPCheckRfc2396ByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getHTTPRejectBinary">
         <documentation>
            Get whether requests containing binary data (after decoding) should be rejected.
         </documentation>
         
         <input message="zeusns:getHTTPRejectBinaryRequest"/>
         <output message="zeusns:getHTTPRejectBinaryResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getHTTPRejectBinaryByLocation">
         <documentation>
            Get whether requests containing binary data (after decoding) should be rejected. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getHTTPRejectBinaryByLocationRequest"/>
         <output message="zeusns:getHTTPRejectBinaryByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getHTTPSendErrorPage">
         <documentation>
            Get whether an HTTP error message should be sent when a connection is dropped, rather than just dropping the connection.
         </documentation>
         
         <input message="zeusns:getHTTPSendErrorPageRequest"/>
         <output message="zeusns:getHTTPSendErrorPageResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getHTTPSendErrorPageByLocation">
         <documentation>
            Get whether an HTTP error message should be sent when a connection is dropped, rather than just dropping the connection. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getHTTPSendErrorPageByLocationRequest"/>
         <output message="zeusns:getHTTPSendErrorPageByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLogInterval">
         <documentation>
            Get the interval between logging service protection messages (in seconds).
         </documentation>
         
         <input message="zeusns:getLogIntervalRequest"/>
         <output message="zeusns:getLogIntervalResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLogIntervalByLocation">
         <documentation>
            Get the interval between logging service protection messages (in seconds). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getLogIntervalByLocationRequest"/>
         <output message="zeusns:getLogIntervalByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMax10Connections">
         <documentation>
            Get the maximum number of simultaneous connections allowed from the 10 busiest IP addresses.
         </documentation>
         
         <input message="zeusns:getMax10ConnectionsRequest"/>
         <output message="zeusns:getMax10ConnectionsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMax10ConnectionsByLocation">
         <documentation>
            Get the maximum number of simultaneous connections allowed from the 10 busiest IP addresses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMax10ConnectionsByLocationRequest"/>
         <output message="zeusns:getMax10ConnectionsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMax1Connections">
         <documentation>
            Get the maximum number of simultaneous connections allowed from an individual IP address (0 means unlimited).
         </documentation>
         
         <input message="zeusns:getMax1ConnectionsRequest"/>
         <output message="zeusns:getMax1ConnectionsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMax1ConnectionsByLocation">
         <documentation>
            Get the maximum number of simultaneous connections allowed from an individual IP address (0 means unlimited). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMax1ConnectionsByLocationRequest"/>
         <output message="zeusns:getMax1ConnectionsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxConnectionRate">
         <documentation>
            Get the maximum number of connections and HTTP keepalive requests allowed from 1 IP address in the 'rate_timer' interval (0 means unlimited).
         </documentation>
         
         <input message="zeusns:getMaxConnectionRateRequest"/>
         <output message="zeusns:getMaxConnectionRateResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxConnectionRateByLocation">
         <documentation>
            Get the maximum number of connections and HTTP keepalive requests allowed from 1 IP address in the 'rate_timer' interval (0 means unlimited). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaxConnectionRateByLocationRequest"/>
         <output message="zeusns:getMaxConnectionRateByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxHTTPBodyLength">
         <documentation>
            Get the maximum size of the HTTP request body data (in bytes, 0 means no limit).
         </documentation>
         
         <input message="zeusns:getMaxHTTPBodyLengthRequest"/>
         <output message="zeusns:getMaxHTTPBodyLengthResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxHTTPBodyLengthByLocation">
         <documentation>
            Get the maximum size of the HTTP request body data (in bytes, 0 means no limit). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaxHTTPBodyLengthByLocationRequest"/>
         <output message="zeusns:getMaxHTTPBodyLengthByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxHTTPHeaderLength">
         <documentation>
            Get the maximum size of a single HTTP request header (in bytes, 0 means no limit).
         </documentation>
         
         <input message="zeusns:getMaxHTTPHeaderLengthRequest"/>
         <output message="zeusns:getMaxHTTPHeaderLengthResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxHTTPHeaderLengthByLocation">
         <documentation>
            Get the maximum size of a single HTTP request header (in bytes, 0 means no limit). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaxHTTPHeaderLengthByLocationRequest"/>
         <output message="zeusns:getMaxHTTPHeaderLengthByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxHTTPRequestLength">
         <documentation>
            Get the maximum size of all the HTTP request headers (in bytes, 0 means no limit).
         </documentation>
         
         <input message="zeusns:getMaxHTTPRequestLengthRequest"/>
         <output message="zeusns:getMaxHTTPRequestLengthResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxHTTPRequestLengthByLocation">
         <documentation>
            Get the maximum size of all the HTTP request headers (in bytes, 0 means no limit). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaxHTTPRequestLengthByLocationRequest"/>
         <output message="zeusns:getMaxHTTPRequestLengthByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxHTTPURLLength">
         <documentation>
            Get the maximum size of the request URL (in bytes, 0 means no limit).
         </documentation>
         
         <input message="zeusns:getMaxHTTPURLLengthRequest"/>
         <output message="zeusns:getMaxHTTPURLLengthResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxHTTPURLLengthByLocation">
         <documentation>
            Get the maximum size of the request URL (in bytes, 0 means no limit). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaxHTTPURLLengthByLocationRequest"/>
         <output message="zeusns:getMaxHTTPURLLengthByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMinConnections">
         <documentation>
            Get the number of simultaneous connections that are always allowed from each IP address (0 means unlimited).
         </documentation>
         
         <input message="zeusns:getMinConnectionsRequest"/>
         <output message="zeusns:getMinConnectionsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMinConnectionsByLocation">
         <documentation>
            Get the number of simultaneous connections that are always allowed from each IP address (0 means unlimited). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMinConnectionsByLocationRequest"/>
         <output message="zeusns:getMinConnectionsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNote">
         <documentation>
            Get the note for each of the named Protection classes
         </documentation>
         
         <input message="zeusns:getNoteRequest"/>
         <output message="zeusns:getNoteResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getPerProcessConnectionCount">
         <documentation>
            Get whether or not each process within a Traffic Manager counts connections independently, when limiting the maximum simultaneous connections allowed from one IP address.
         </documentation>
         
         <input message="zeusns:getPerProcessConnectionCountRequest"/>
         <output message="zeusns:getPerProcessConnectionCountResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getPerProcessConnectionCountByLocation">
         <documentation>
            Get whether or not each process within a Traffic Manager counts connections independently, when limiting the maximum simultaneous connections allowed from one IP address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getPerProcessConnectionCountByLocationRequest"/>
         <output message="zeusns:getPerProcessConnectionCountByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getProtectionNames">
         <documentation>
            Get the names of all the configured Protection classes.
         </documentation>
         
         <input message="zeusns:getProtectionNamesRequest"/>
         <output message="zeusns:getProtectionNamesResponse"/>
      </operation>
      
      <operation name="getRateTimer">
         <documentation>
            Get how frequently the max_connection_rate is assessed.  For example, a value of 1 second will impose a limit of max connections/second; a value of 60 will impose a limit of max connections/minute controlling how our connection rates are calculated. The valid range is 1-99999 seconds.
         </documentation>
         
         <input message="zeusns:getRateTimerRequest"/>
         <output message="zeusns:getRateTimerResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRateTimerByLocation">
         <documentation>
            Get how frequently the max_connection_rate is assessed.  For example, a value of 1 second will impose a limit of max connections/second; a value of 60 will impose a limit of max connections/minute controlling how our connection rates are calculated. The valid range is 1-99999 seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getRateTimerByLocationRequest"/>
         <output message="zeusns:getRateTimerByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRule">
         <documentation>
            Get the TrafficScript rule to be applied to all connections.
         </documentation>
         
         <input message="zeusns:getRuleRequest"/>
         <output message="zeusns:getRuleResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRuleByLocation">
         <documentation>
            Get the TrafficScript rule to be applied to all connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getRuleByLocationRequest"/>
         <output message="zeusns:getRuleByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getTesting">
         <documentation>
            Get whether the service protection classes are in testing mode. When in testing mode the class logs when a connection would be dropped, but it allows all connections through.
         </documentation>
         
         <input message="zeusns:getTestingRequest"/>
         <output message="zeusns:getTestingResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getTestingByLocation">
         <documentation>
            Get whether the service protection classes are in testing mode. When in testing mode the class logs when a connection would be dropped, but it allows all connections through. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getTestingByLocationRequest"/>
         <output message="zeusns:getTestingByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="removeAllowedAddresses">
         <documentation>
            Remove IP addresses and CIDR IP subnets from the list of machines that are always allowed access.
         </documentation>
         
         <input message="zeusns:removeAllowedAddressesRequest"/>
         <output message="zeusns:removeAllowedAddressesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="removeAllowedAddressesByLocation">
         <documentation>
            Remove IP addresses and CIDR IP subnets from the list of machines that are always allowed access. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:removeAllowedAddressesByLocationRequest"/>
         <output message="zeusns:removeAllowedAddressesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="removeBannedAddresses">
         <documentation>
            Remove IP addresses and CIDR IP subnets from the list of machines that aren't allowed access.
         </documentation>
         
         <input message="zeusns:removeBannedAddressesRequest"/>
         <output message="zeusns:removeBannedAddressesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="removeBannedAddressesByLocation">
         <documentation>
            Remove IP addresses and CIDR IP subnets from the list of machines that aren't allowed access. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:removeBannedAddressesByLocationRequest"/>
         <output message="zeusns:removeBannedAddressesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="renameProtection">
         <documentation>
            Rename the named Protection classes.
         </documentation>
         
         <input message="zeusns:renameProtectionRequest"/>
         <output message="zeusns:renameProtectionResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
      </operation>
      
      <operation name="setAllowedAddresses">
         <documentation>
            Set the list of IP addresses and CIDR IP subnets that are always allowed access.
         </documentation>
         
         <input message="zeusns:setAllowedAddressesRequest"/>
         <output message="zeusns:setAllowedAddressesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setAllowedAddressesByLocation">
         <documentation>
            Set the list of IP addresses and CIDR IP subnets that are always allowed access. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAllowedAddressesByLocationRequest"/>
         <output message="zeusns:setAllowedAddressesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setBannedAddresses">
         <documentation>
            Set the list of IP addresses and CIDR IP subnets that aren't allowed access.
         </documentation>
         
         <input message="zeusns:setBannedAddressesRequest"/>
         <output message="zeusns:setBannedAddressesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setBannedAddressesByLocation">
         <documentation>
            Set the list of IP addresses and CIDR IP subnets that aren't allowed access. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setBannedAddressesByLocationRequest"/>
         <output message="zeusns:setBannedAddressesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setDebug">
         <documentation>
            Set whether the service protection classes are in debug mode. When in debug mode, verbose log messages are written.
         </documentation>
         
         <input message="zeusns:setDebugRequest"/>
         <output message="zeusns:setDebugResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setDebugByLocation">
         <documentation>
            Set whether the service protection classes are in debug mode. When in debug mode, verbose log messages are written. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setDebugByLocationRequest"/>
         <output message="zeusns:setDebugByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setEnabled">
         <documentation>
            Set whether the service protection classes are enabled.
         </documentation>
         
         <input message="zeusns:setEnabledRequest"/>
         <output message="zeusns:setEnabledResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setEnabledByLocation">
         <documentation>
            Set whether the service protection classes are enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setEnabledByLocationRequest"/>
         <output message="zeusns:setEnabledByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setHTTPCheckRfc2396">
         <documentation>
            Set whether requests with poorly-formed URLs (as specified in RFC 2396) should be rejected.
         </documentation>
         
         <input message="zeusns:setHTTPCheckRfc2396Request"/>
         <output message="zeusns:setHTTPCheckRfc2396Response"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setHTTPCheckRfc2396ByLocation">
         <documentation>
            Set whether requests with poorly-formed URLs (as specified in RFC 2396) should be rejected. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setHTTPCheckRfc2396ByLocationRequest"/>
         <output message="zeusns:setHTTPCheckRfc2396ByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setHTTPRejectBinary">
         <documentation>
            Set whether requests containing binary data (after decoding) should be rejected.
         </documentation>
         
         <input message="zeusns:setHTTPRejectBinaryRequest"/>
         <output message="zeusns:setHTTPRejectBinaryResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setHTTPRejectBinaryByLocation">
         <documentation>
            Set whether requests containing binary data (after decoding) should be rejected. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setHTTPRejectBinaryByLocationRequest"/>
         <output message="zeusns:setHTTPRejectBinaryByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setHTTPSendErrorPage">
         <documentation>
            Set whether an HTTP error message should be sent when a connection is dropped, rather than just dropping the connection.
         </documentation>
         
         <input message="zeusns:setHTTPSendErrorPageRequest"/>
         <output message="zeusns:setHTTPSendErrorPageResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setHTTPSendErrorPageByLocation">
         <documentation>
            Set whether an HTTP error message should be sent when a connection is dropped, rather than just dropping the connection. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setHTTPSendErrorPageByLocationRequest"/>
         <output message="zeusns:setHTTPSendErrorPageByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setLogInterval">
         <documentation>
            Set the interval between logging service protection messages (in seconds).
         </documentation>
         
         <input message="zeusns:setLogIntervalRequest"/>
         <output message="zeusns:setLogIntervalResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setLogIntervalByLocation">
         <documentation>
            Set the interval between logging service protection messages (in seconds). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setLogIntervalByLocationRequest"/>
         <output message="zeusns:setLogIntervalByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setMax10Connections">
         <documentation>
            Set the maximum number of simultaneous connections allowed from the 10 busiest IP addresses.
         </documentation>
         
         <input message="zeusns:setMax10ConnectionsRequest"/>
         <output message="zeusns:setMax10ConnectionsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setMax10ConnectionsByLocation">
         <documentation>
            Set the maximum number of simultaneous connections allowed from the 10 busiest IP addresses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMax10ConnectionsByLocationRequest"/>
         <output message="zeusns:setMax10ConnectionsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setMax1Connections">
         <documentation>
            Set the maximum number of simultaneous connections allowed from an individual IP address (0 means unlimited).
         </documentation>
         
         <input message="zeusns:setMax1ConnectionsRequest"/>
         <output message="zeusns:setMax1ConnectionsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setMax1ConnectionsByLocation">
         <documentation>
            Set the maximum number of simultaneous connections allowed from an individual IP address (0 means unlimited). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMax1ConnectionsByLocationRequest"/>
         <output message="zeusns:setMax1ConnectionsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setMaxConnectionRate">
         <documentation>
            Set the maximum number of connections and HTTP keepalive requests allowed from 1 IP address in the 'rate_timer' interval (0 means unlimited).
         </documentation>
         
         <input message="zeusns:setMaxConnectionRateRequest"/>
         <output message="zeusns:setMaxConnectionRateResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setMaxConnectionRateByLocation">
         <documentation>
            Set the maximum number of connections and HTTP keepalive requests allowed from 1 IP address in the 'rate_timer' interval (0 means unlimited). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaxConnectionRateByLocationRequest"/>
         <output message="zeusns:setMaxConnectionRateByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setMaxHTTPBodyLength">
         <documentation>
            Set the maximum size of the HTTP request body data (in bytes, 0 means no limit).
         </documentation>
         
         <input message="zeusns:setMaxHTTPBodyLengthRequest"/>
         <output message="zeusns:setMaxHTTPBodyLengthResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setMaxHTTPBodyLengthByLocation">
         <documentation>
            Set the maximum size of the HTTP request body data (in bytes, 0 means no limit). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaxHTTPBodyLengthByLocationRequest"/>
         <output message="zeusns:setMaxHTTPBodyLengthByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setMaxHTTPHeaderLength">
         <documentation>
            Set the maximum size of a single HTTP request header (in bytes, 0 means no limit).
         </documentation>
         
         <input message="zeusns:setMaxHTTPHeaderLengthRequest"/>
         <output message="zeusns:setMaxHTTPHeaderLengthResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setMaxHTTPHeaderLengthByLocation">
         <documentation>
            Set the maximum size of a single HTTP request header (in bytes, 0 means no limit). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaxHTTPHeaderLengthByLocationRequest"/>
         <output message="zeusns:setMaxHTTPHeaderLengthByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setMaxHTTPRequestLength">
         <documentation>
            Set the maximum size of all the HTTP request headers (in bytes, 0 means no limit).
         </documentation>
         
         <input message="zeusns:setMaxHTTPRequestLengthRequest"/>
         <output message="zeusns:setMaxHTTPRequestLengthResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setMaxHTTPRequestLengthByLocation">
         <documentation>
            Set the maximum size of all the HTTP request headers (in bytes, 0 means no limit). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaxHTTPRequestLengthByLocationRequest"/>
         <output message="zeusns:setMaxHTTPRequestLengthByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setMaxHTTPURLLength">
         <documentation>
            Set the maximum size of the request URL (in bytes, 0 means no limit).
         </documentation>
         
         <input message="zeusns:setMaxHTTPURLLengthRequest"/>
         <output message="zeusns:setMaxHTTPURLLengthResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setMaxHTTPURLLengthByLocation">
         <documentation>
            Set the maximum size of the request URL (in bytes, 0 means no limit). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaxHTTPURLLengthByLocationRequest"/>
         <output message="zeusns:setMaxHTTPURLLengthByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setMinConnections">
         <documentation>
            Set the number of simultaneous connections that are always allowed from each IP address (0 means unlimited).
         </documentation>
         
         <input message="zeusns:setMinConnectionsRequest"/>
         <output message="zeusns:setMinConnectionsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setMinConnectionsByLocation">
         <documentation>
            Set the number of simultaneous connections that are always allowed from each IP address (0 means unlimited). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMinConnectionsByLocationRequest"/>
         <output message="zeusns:setMinConnectionsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setNote">
         <documentation>
            Set the note for each of the named Protection classes
         </documentation>
         
         <input message="zeusns:setNoteRequest"/>
         <output message="zeusns:setNoteResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setPerProcessConnectionCount">
         <documentation>
            Set whether or not each process within a Traffic Manager counts connections independently, when limiting the maximum simultaneous connections allowed from one IP address.
         </documentation>
         
         <input message="zeusns:setPerProcessConnectionCountRequest"/>
         <output message="zeusns:setPerProcessConnectionCountResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setPerProcessConnectionCountByLocation">
         <documentation>
            Set whether or not each process within a Traffic Manager counts connections independently, when limiting the maximum simultaneous connections allowed from one IP address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setPerProcessConnectionCountByLocationRequest"/>
         <output message="zeusns:setPerProcessConnectionCountByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setRateTimer">
         <documentation>
            Set how frequently the max_connection_rate is assessed.  For example, a value of 1 second will impose a limit of max connections/second; a value of 60 will impose a limit of max connections/minute controlling how our connection rates are calculated. The valid range is 1-99999 seconds.
         </documentation>
         
         <input message="zeusns:setRateTimerRequest"/>
         <output message="zeusns:setRateTimerResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setRateTimerByLocation">
         <documentation>
            Set how frequently the max_connection_rate is assessed.  For example, a value of 1 second will impose a limit of max connections/second; a value of 60 will impose a limit of max connections/minute controlling how our connection rates are calculated. The valid range is 1-99999 seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setRateTimerByLocationRequest"/>
         <output message="zeusns:setRateTimerByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setRule">
         <documentation>
            Set the TrafficScript rule to be applied to all connections.
         </documentation>
         
         <input message="zeusns:setRuleRequest"/>
         <output message="zeusns:setRuleResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setRuleByLocation">
         <documentation>
            Set the TrafficScript rule to be applied to all connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setRuleByLocationRequest"/>
         <output message="zeusns:setRuleByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setTesting">
         <documentation>
            Set whether the service protection classes are in testing mode. When in testing mode the class logs when a connection would be dropped, but it allows all connections through.
         </documentation>
         
         <input message="zeusns:setTestingRequest"/>
         <output message="zeusns:setTestingResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="setTestingByLocation">
         <documentation>
            Set whether the service protection classes are in testing mode. When in testing mode the class logs when a connection would be dropped, but it allows all connections through. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setTestingByLocationRequest"/>
         <output message="zeusns:setTestingByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
   </portType>
   
   <binding name="Catalog.ProtectionBinding" type="zeusns:Catalog.ProtectionPort">
      <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
      <operation name="addAllowedAddresses">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/addAllowedAddresses"/>
         <documentation>
            Add new IP addresses and CIDR IP subnets to the list of machines that are always allowed access.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addAllowedAddressesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/addAllowedAddressesByLocation"/>
         <documentation>
            Add new IP addresses and CIDR IP subnets to the list of machines that are always allowed access. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addBannedAddresses">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/addBannedAddresses"/>
         <documentation>
            Add new IP addresses and CIDR IP subnets to the list of machines that aren't allowed access.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addBannedAddressesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/addBannedAddressesByLocation"/>
         <documentation>
            Add new IP addresses and CIDR IP subnets to the list of machines that aren't allowed access. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addProtection">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/addProtection"/>
         <documentation>
            Add new Protection classes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="copyProtection">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/copyProtection"/>
         <documentation>
            Copy the named Protection classes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="deleteProtection">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/deleteProtection"/>
         <documentation>
            Delete the named Protection classes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectInUse">
            <soap:fault use="encoded" name="ObjectInUse" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAllowedAddresses">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getAllowedAddresses"/>
         <documentation>
            Get the list of IP addresses and CIDR IP subnets that are always allowed access.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAllowedAddressesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getAllowedAddressesByLocation"/>
         <documentation>
            Get the list of IP addresses and CIDR IP subnets that are always allowed access. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getBannedAddresses">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getBannedAddresses"/>
         <documentation>
            Get the list of IP addresses and CIDR IP subnets that aren't allowed access.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getBannedAddressesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getBannedAddressesByLocation"/>
         <documentation>
            Get the list of IP addresses and CIDR IP subnets that aren't allowed access. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getDebug">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getDebug"/>
         <documentation>
            Get whether the service protection classes are in debug mode. When in debug mode, verbose log messages are written.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getDebugByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getDebugByLocation"/>
         <documentation>
            Get whether the service protection classes are in debug mode. When in debug mode, verbose log messages are written. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getEnabled"/>
         <documentation>
            Get whether the service protection classes are enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getEnabledByLocation"/>
         <documentation>
            Get whether the service protection classes are enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getHTTPCheckRfc2396">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getHTTPCheckRfc2396"/>
         <documentation>
            Get whether requests with poorly-formed URLs (as specified in RFC 2396) should be rejected.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getHTTPCheckRfc2396ByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getHTTPCheckRfc2396ByLocation"/>
         <documentation>
            Get whether requests with poorly-formed URLs (as specified in RFC 2396) should be rejected. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getHTTPRejectBinary">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getHTTPRejectBinary"/>
         <documentation>
            Get whether requests containing binary data (after decoding) should be rejected.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getHTTPRejectBinaryByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getHTTPRejectBinaryByLocation"/>
         <documentation>
            Get whether requests containing binary data (after decoding) should be rejected. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getHTTPSendErrorPage">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getHTTPSendErrorPage"/>
         <documentation>
            Get whether an HTTP error message should be sent when a connection is dropped, rather than just dropping the connection.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getHTTPSendErrorPageByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getHTTPSendErrorPageByLocation"/>
         <documentation>
            Get whether an HTTP error message should be sent when a connection is dropped, rather than just dropping the connection. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLogInterval">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getLogInterval"/>
         <documentation>
            Get the interval between logging service protection messages (in seconds).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLogIntervalByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getLogIntervalByLocation"/>
         <documentation>
            Get the interval between logging service protection messages (in seconds). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMax10Connections">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getMax10Connections"/>
         <documentation>
            Get the maximum number of simultaneous connections allowed from the 10 busiest IP addresses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMax10ConnectionsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getMax10ConnectionsByLocation"/>
         <documentation>
            Get the maximum number of simultaneous connections allowed from the 10 busiest IP addresses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMax1Connections">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getMax1Connections"/>
         <documentation>
            Get the maximum number of simultaneous connections allowed from an individual IP address (0 means unlimited).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMax1ConnectionsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getMax1ConnectionsByLocation"/>
         <documentation>
            Get the maximum number of simultaneous connections allowed from an individual IP address (0 means unlimited). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxConnectionRate">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getMaxConnectionRate"/>
         <documentation>
            Get the maximum number of connections and HTTP keepalive requests allowed from 1 IP address in the 'rate_timer' interval (0 means unlimited).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxConnectionRateByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getMaxConnectionRateByLocation"/>
         <documentation>
            Get the maximum number of connections and HTTP keepalive requests allowed from 1 IP address in the 'rate_timer' interval (0 means unlimited). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxHTTPBodyLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getMaxHTTPBodyLength"/>
         <documentation>
            Get the maximum size of the HTTP request body data (in bytes, 0 means no limit).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxHTTPBodyLengthByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getMaxHTTPBodyLengthByLocation"/>
         <documentation>
            Get the maximum size of the HTTP request body data (in bytes, 0 means no limit). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxHTTPHeaderLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getMaxHTTPHeaderLength"/>
         <documentation>
            Get the maximum size of a single HTTP request header (in bytes, 0 means no limit).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxHTTPHeaderLengthByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getMaxHTTPHeaderLengthByLocation"/>
         <documentation>
            Get the maximum size of a single HTTP request header (in bytes, 0 means no limit). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxHTTPRequestLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getMaxHTTPRequestLength"/>
         <documentation>
            Get the maximum size of all the HTTP request headers (in bytes, 0 means no limit).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxHTTPRequestLengthByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getMaxHTTPRequestLengthByLocation"/>
         <documentation>
            Get the maximum size of all the HTTP request headers (in bytes, 0 means no limit). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxHTTPURLLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getMaxHTTPURLLength"/>
         <documentation>
            Get the maximum size of the request URL (in bytes, 0 means no limit).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxHTTPURLLengthByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getMaxHTTPURLLengthByLocation"/>
         <documentation>
            Get the maximum size of the request URL (in bytes, 0 means no limit). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMinConnections">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getMinConnections"/>
         <documentation>
            Get the number of simultaneous connections that are always allowed from each IP address (0 means unlimited).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMinConnectionsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getMinConnectionsByLocation"/>
         <documentation>
            Get the number of simultaneous connections that are always allowed from each IP address (0 means unlimited). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNote">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getNote"/>
         <documentation>
            Get the note for each of the named Protection classes
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getPerProcessConnectionCount">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getPerProcessConnectionCount"/>
         <documentation>
            Get whether or not each process within a Traffic Manager counts connections independently, when limiting the maximum simultaneous connections allowed from one IP address.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getPerProcessConnectionCountByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getPerProcessConnectionCountByLocation"/>
         <documentation>
            Get whether or not each process within a Traffic Manager counts connections independently, when limiting the maximum simultaneous connections allowed from one IP address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getProtectionNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getProtectionNames"/>
         <documentation>
            Get the names of all the configured Protection classes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getRateTimer">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getRateTimer"/>
         <documentation>
            Get how frequently the max_connection_rate is assessed.  For example, a value of 1 second will impose a limit of max connections/second; a value of 60 will impose a limit of max connections/minute controlling how our connection rates are calculated. The valid range is 1-99999 seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRateTimerByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getRateTimerByLocation"/>
         <documentation>
            Get how frequently the max_connection_rate is assessed.  For example, a value of 1 second will impose a limit of max connections/second; a value of 60 will impose a limit of max connections/minute controlling how our connection rates are calculated. The valid range is 1-99999 seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRule">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getRule"/>
         <documentation>
            Get the TrafficScript rule to be applied to all connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRuleByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getRuleByLocation"/>
         <documentation>
            Get the TrafficScript rule to be applied to all connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getTesting">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getTesting"/>
         <documentation>
            Get whether the service protection classes are in testing mode. When in testing mode the class logs when a connection would be dropped, but it allows all connections through.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getTestingByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/getTestingByLocation"/>
         <documentation>
            Get whether the service protection classes are in testing mode. When in testing mode the class logs when a connection would be dropped, but it allows all connections through. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeAllowedAddresses">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/removeAllowedAddresses"/>
         <documentation>
            Remove IP addresses and CIDR IP subnets from the list of machines that are always allowed access.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeAllowedAddressesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/removeAllowedAddressesByLocation"/>
         <documentation>
            Remove IP addresses and CIDR IP subnets from the list of machines that are always allowed access. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeBannedAddresses">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/removeBannedAddresses"/>
         <documentation>
            Remove IP addresses and CIDR IP subnets from the list of machines that aren't allowed access.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeBannedAddressesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/removeBannedAddressesByLocation"/>
         <documentation>
            Remove IP addresses and CIDR IP subnets from the list of machines that aren't allowed access. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="renameProtection">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/renameProtection"/>
         <documentation>
            Rename the named Protection classes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAllowedAddresses">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setAllowedAddresses"/>
         <documentation>
            Set the list of IP addresses and CIDR IP subnets that are always allowed access.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAllowedAddressesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setAllowedAddressesByLocation"/>
         <documentation>
            Set the list of IP addresses and CIDR IP subnets that are always allowed access. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setBannedAddresses">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setBannedAddresses"/>
         <documentation>
            Set the list of IP addresses and CIDR IP subnets that aren't allowed access.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setBannedAddressesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setBannedAddressesByLocation"/>
         <documentation>
            Set the list of IP addresses and CIDR IP subnets that aren't allowed access. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDebug">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setDebug"/>
         <documentation>
            Set whether the service protection classes are in debug mode. When in debug mode, verbose log messages are written.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDebugByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setDebugByLocation"/>
         <documentation>
            Set whether the service protection classes are in debug mode. When in debug mode, verbose log messages are written. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setEnabled"/>
         <documentation>
            Set whether the service protection classes are enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setEnabledByLocation"/>
         <documentation>
            Set whether the service protection classes are enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setHTTPCheckRfc2396">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setHTTPCheckRfc2396"/>
         <documentation>
            Set whether requests with poorly-formed URLs (as specified in RFC 2396) should be rejected.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setHTTPCheckRfc2396ByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setHTTPCheckRfc2396ByLocation"/>
         <documentation>
            Set whether requests with poorly-formed URLs (as specified in RFC 2396) should be rejected. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setHTTPRejectBinary">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setHTTPRejectBinary"/>
         <documentation>
            Set whether requests containing binary data (after decoding) should be rejected.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setHTTPRejectBinaryByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setHTTPRejectBinaryByLocation"/>
         <documentation>
            Set whether requests containing binary data (after decoding) should be rejected. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setHTTPSendErrorPage">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setHTTPSendErrorPage"/>
         <documentation>
            Set whether an HTTP error message should be sent when a connection is dropped, rather than just dropping the connection.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setHTTPSendErrorPageByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setHTTPSendErrorPageByLocation"/>
         <documentation>
            Set whether an HTTP error message should be sent when a connection is dropped, rather than just dropping the connection. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogInterval">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setLogInterval"/>
         <documentation>
            Set the interval between logging service protection messages (in seconds).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogIntervalByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setLogIntervalByLocation"/>
         <documentation>
            Set the interval between logging service protection messages (in seconds). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMax10Connections">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setMax10Connections"/>
         <documentation>
            Set the maximum number of simultaneous connections allowed from the 10 busiest IP addresses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMax10ConnectionsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setMax10ConnectionsByLocation"/>
         <documentation>
            Set the maximum number of simultaneous connections allowed from the 10 busiest IP addresses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMax1Connections">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setMax1Connections"/>
         <documentation>
            Set the maximum number of simultaneous connections allowed from an individual IP address (0 means unlimited).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMax1ConnectionsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setMax1ConnectionsByLocation"/>
         <documentation>
            Set the maximum number of simultaneous connections allowed from an individual IP address (0 means unlimited). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxConnectionRate">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setMaxConnectionRate"/>
         <documentation>
            Set the maximum number of connections and HTTP keepalive requests allowed from 1 IP address in the 'rate_timer' interval (0 means unlimited).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxConnectionRateByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setMaxConnectionRateByLocation"/>
         <documentation>
            Set the maximum number of connections and HTTP keepalive requests allowed from 1 IP address in the 'rate_timer' interval (0 means unlimited). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxHTTPBodyLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setMaxHTTPBodyLength"/>
         <documentation>
            Set the maximum size of the HTTP request body data (in bytes, 0 means no limit).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxHTTPBodyLengthByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setMaxHTTPBodyLengthByLocation"/>
         <documentation>
            Set the maximum size of the HTTP request body data (in bytes, 0 means no limit). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxHTTPHeaderLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setMaxHTTPHeaderLength"/>
         <documentation>
            Set the maximum size of a single HTTP request header (in bytes, 0 means no limit).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxHTTPHeaderLengthByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setMaxHTTPHeaderLengthByLocation"/>
         <documentation>
            Set the maximum size of a single HTTP request header (in bytes, 0 means no limit). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxHTTPRequestLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setMaxHTTPRequestLength"/>
         <documentation>
            Set the maximum size of all the HTTP request headers (in bytes, 0 means no limit).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxHTTPRequestLengthByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setMaxHTTPRequestLengthByLocation"/>
         <documentation>
            Set the maximum size of all the HTTP request headers (in bytes, 0 means no limit). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxHTTPURLLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setMaxHTTPURLLength"/>
         <documentation>
            Set the maximum size of the request URL (in bytes, 0 means no limit).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxHTTPURLLengthByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setMaxHTTPURLLengthByLocation"/>
         <documentation>
            Set the maximum size of the request URL (in bytes, 0 means no limit). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMinConnections">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setMinConnections"/>
         <documentation>
            Set the number of simultaneous connections that are always allowed from each IP address (0 means unlimited).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMinConnectionsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setMinConnectionsByLocation"/>
         <documentation>
            Set the number of simultaneous connections that are always allowed from each IP address (0 means unlimited). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNote">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setNote"/>
         <documentation>
            Set the note for each of the named Protection classes
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setPerProcessConnectionCount">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setPerProcessConnectionCount"/>
         <documentation>
            Set whether or not each process within a Traffic Manager counts connections independently, when limiting the maximum simultaneous connections allowed from one IP address.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setPerProcessConnectionCountByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setPerProcessConnectionCountByLocation"/>
         <documentation>
            Set whether or not each process within a Traffic Manager counts connections independently, when limiting the maximum simultaneous connections allowed from one IP address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRateTimer">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setRateTimer"/>
         <documentation>
            Set how frequently the max_connection_rate is assessed.  For example, a value of 1 second will impose a limit of max connections/second; a value of 60 will impose a limit of max connections/minute controlling how our connection rates are calculated. The valid range is 1-99999 seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRateTimerByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setRateTimerByLocation"/>
         <documentation>
            Set how frequently the max_connection_rate is assessed.  For example, a value of 1 second will impose a limit of max connections/second; a value of 60 will impose a limit of max connections/minute controlling how our connection rates are calculated. The valid range is 1-99999 seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRule">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setRule"/>
         <documentation>
            Set the TrafficScript rule to be applied to all connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRuleByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setRuleByLocation"/>
         <documentation>
            Set the TrafficScript rule to be applied to all connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTesting">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setTesting"/>
         <documentation>
            Set whether the service protection classes are in testing mode. When in testing mode the class logs when a connection would be dropped, but it allows all connections through.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTestingByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/setTestingByLocation"/>
         <documentation>
            Set whether the service protection classes are in testing mode. When in testing mode the class logs when a connection would be dropped, but it allows all connections through. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Protection/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
   </binding>
   
   <service name="Catalog.Protection">
      <documentation>
         The Catalog.Protection interface allows management of Service Protection classes. Using this interface, you can create, delete and rename Protection classes, and manage their configuration.
      </documentation>
      
      <port name="Catalog.ProtectionPort" binding="zeusns:Catalog.ProtectionBinding">
         <soap:address location="https://admin_server:9090/soap"/>
      </port>
   </service>
   
</definitions>
