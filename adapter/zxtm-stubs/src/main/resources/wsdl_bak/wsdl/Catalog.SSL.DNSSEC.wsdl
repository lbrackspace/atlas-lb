<?xml version="1.0" ?>

<!--
    Copyright (c) 2005-2013 Zeus Technology. All rights reserved.

-->

<definitions name="Catalog.SSL.DNSSEC"
 targetNamespace="http://soap.zeus.com/zxtm/1.0/"
 xmlns:zeusns="http://soap.zeus.com/zxtm/1.0/"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
 xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
 xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
 xmlns="http://schemas.xmlsoap.org/wsdl/">
   
   <types>
      <xsd:schema targetNamespace='http://soap.zeus.com/zxtm/1.0/'
       xmlns='http://www.w3.org/2001/XMLSchema'
       xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/'
       xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/'>
         
         <xsd:complexType name="Catalog.SSL.DNSSEC.IntArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:int[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="StringArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:string[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="StringArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:StringArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:boolean[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:booleanArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         
         <xsd:complexType name="doubleArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:double[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="intArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:int[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="longArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:long[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedIntArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedInt[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedLongArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedLong[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="DeploymentError">
           <xsd:annotation>
            <xsd:documentation>
              The DeploymentError fault is raised when a configuration
              change causes errors when attempting to apply the configuration
              to a running traffic manager.
         
              It would be raised in cases such as failing to bind to
              a port when enabling a Virtual Server.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidInput">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidInput fault is raised when the input to a function is
              invalid, for example a number was out of range. This fault is also
              raised in cases such as VirtualServer.setPool() where the Pool
              doesn't exist
         
              The details in the fault contain the object, key and value
              that caused the fault. These might be blank if they are not relevant
              to the fault.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidObjectName">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidObjectName fault is raised when attempting to create
              a new object (e.g. via an add, rename or copy) and the name is
              invalid (e.g. it contains a '/').
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectAlreadyExists">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectAlreadyExists fault is raised when attempting to create an
             object (such as a Virtual Server) that already exists. It will also
             be raised in cases such as renaming and copying objects.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectDoesNotExist">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectDoesNotExist fault is raised when attempting to perform an
             operation on an object (such as Virtual Server) that doesn't exist.
         
             This fault will only be raised if the primary object in the call doesn't
             exist. For example if calling VirtualServer.setPool(), then
             this fault will be raised if the Virtual Server doesn't exist, but if
             the Pool doesn't exist then the "InvalidInput" fault will be raised.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectInUse">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectInUse fault is raised when attempting to delete an object
             that is referenced by another object, for example deleting a Pool
             that is in use by a Virtual Server.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
      </xsd:schema>
   </types>
   
   <message name="addKeysWithManualIDsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="keys" type="zeusns:StringArray" />
      <part name="ids" type="zeusns:Catalog.SSL.DNSSEC.IntArray" />
   </message>
   
   <message name="addKeysWithManualIDsResponse"></message>
   
   <message name="addStandardKeysRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="keys" type="zeusns:StringArray" />
   </message>
   
   <message name="addStandardKeysResponse"></message>
   
   <message name="deleteKeysRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="deleteKeysResponse"></message>
   
   <message name="getKeyIDsRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getKeyIDsResponse">
      <part name="ids" type="zeusns:Catalog.SSL.DNSSEC.IntArray" />
   </message>
   
   <message name="getKeyNamesRequest"></message>
   
   <message name="getKeyNamesResponse">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="renameKeysRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="new_names" type="zeusns:StringArray" />
   </message>
   
   <message name="renameKeysResponse"></message>
   
   <message name="DeploymentError">
      <part name="parameters" type="zeusns:DeploymentError" />
   </message>
   
   <message name="InvalidInput">
      <part name="parameters" type="zeusns:InvalidInput" />
   </message>
   
   <message name="InvalidObjectName">
      <part name="parameters" type="zeusns:InvalidObjectName" />
   </message>
   
   <message name="ObjectAlreadyExists">
      <part name="parameters" type="zeusns:ObjectAlreadyExists" />
   </message>
   
   <message name="ObjectDoesNotExist">
      <part name="parameters" type="zeusns:ObjectDoesNotExist" />
   </message>
   
   <message name="ObjectInUse">
      <part name="parameters" type="zeusns:ObjectInUse" />
   </message>
   
   <portType name="Catalog.SSL.DNSSECPort">
      <operation name="addKeysWithManualIDs">
         <documentation>
            Upload a DNSSEC private key to the traffic manager's catalog. Each key string should be the contents of your private key file. The ID of the key is the third set of parameters.
         </documentation>
         
         <input message="zeusns:addKeysWithManualIDsRequest"/>
         <output message="zeusns:addKeysWithManualIDsResponse"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="addStandardKeys">
         <documentation>
            Upload a DNSSEC private key to the traffic manager's catalog. Each key string should be the contents of your private key file. The ID of the key will be calculated assuming it is a standard ZSK.
         </documentation>
         
         <input message="zeusns:addStandardKeysRequest"/>
         <output message="zeusns:addStandardKeysResponse"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="deleteKeys">
         <documentation>
            Delete the specified DNSSEC keys.
         </documentation>
         
         <input message="zeusns:deleteKeysRequest"/>
         <output message="zeusns:deleteKeysResponse"/>
         <fault name="ObjectInUse" message="zeusns:ObjectInUse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="getKeyIDs">
         <documentation>
            Get the IDs of the specified DNSSEC private keys.
         </documentation>
         
         <input message="zeusns:getKeyIDsRequest"/>
         <output message="zeusns:getKeyIDsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getKeyNames">
         <documentation>
            Get the names of the installed DNSSEC private keys.
         </documentation>
         
         <input message="zeusns:getKeyNamesRequest"/>
         <output message="zeusns:getKeyNamesResponse"/>
      </operation>
      
      <operation name="renameKeys">
         <documentation>
            Rename the specified DNSSEC keys.
         </documentation>
         
         <input message="zeusns:renameKeysRequest"/>
         <output message="zeusns:renameKeysResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
   </portType>
   
   <binding name="Catalog.SSL.DNSSECBinding" type="zeusns:Catalog.SSL.DNSSECPort">
      <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
      <operation name="addKeysWithManualIDs">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/addKeysWithManualIDs"/>
         <documentation>
            Upload a DNSSEC private key to the traffic manager's catalog. Each key string should be the contents of your private key file. The ID of the key is the third set of parameters.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addStandardKeys">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/addStandardKeys"/>
         <documentation>
            Upload a DNSSEC private key to the traffic manager's catalog. Each key string should be the contents of your private key file. The ID of the key will be calculated assuming it is a standard ZSK.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="deleteKeys">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/deleteKeys"/>
         <documentation>
            Delete the specified DNSSEC keys.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectInUse">
            <soap:fault use="encoded" name="ObjectInUse" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getKeyIDs">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/getKeyIDs"/>
         <documentation>
            Get the IDs of the specified DNSSEC private keys.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getKeyNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/getKeyNames"/>
         <documentation>
            Get the names of the installed DNSSEC private keys.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="renameKeys">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/renameKeys"/>
         <documentation>
            Rename the specified DNSSEC keys.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/DNSSEC/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
   </binding>
   
   <service name="Catalog.SSL.DNSSEC">
      <documentation>
         The Catalog.SSL.DNSSEC interface allows management of the DNSSEC private keys used to alter signed GLB DNS responses.
      </documentation>
      
      <port name="Catalog.SSL.DNSSECPort" binding="zeusns:Catalog.SSL.DNSSECBinding">
         <soap:address location="https://admin_server:9090/soap"/>
      </port>
   </service>
   
</definitions>
