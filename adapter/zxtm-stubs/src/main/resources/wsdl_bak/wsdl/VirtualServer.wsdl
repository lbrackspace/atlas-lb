<?xml version="1.0" ?>

<!--
    Copyright (c) 2005-2013 Zeus Technology. All rights reserved.

-->

<definitions name="VirtualServer"
 targetNamespace="http://soap.zeus.com/zxtm/1.0/"
 xmlns:zeusns="http://soap.zeus.com/zxtm/1.0/"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
 xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
 xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
 xmlns="http://schemas.xmlsoap.org/wsdl/">
   
   <types>
      <xsd:schema targetNamespace='http://soap.zeus.com/zxtm/1.0/'
       xmlns='http://www.w3.org/2001/XMLSchema'
       xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/'
       xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/'>
         
         <xsd:complexType name="StringArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:string[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="StringArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:StringArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="VirtualServer.BasicInfo">
           <xsd:annotation>
            <xsd:documentation>This structure contains the basic information for a virtual server. 
            It is used when creating a server, or modifying the port, protocol or default pool of a server.</xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="port" type="xsd:int">
               <xsd:annotation>
                 <xsd:documentation>The port to listen for incoming connections on.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="protocol" type="zeusns:VirtualServer.Protocol">
               <xsd:annotation>
                 <xsd:documentation>The protocol that this virtual server handles.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="default_pool" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The default pool that traffic to this virtual server will go to.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="VirtualServer.BasicInfoArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:VirtualServer.BasicInfo[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:simpleType name="VirtualServer.CookieDomainRewriteMode">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="no_rewrite">
                  <xsd:annotation>
                     <xsd:documentation>Do not rewrite the domain</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="set_to_request">
                  <xsd:annotation>
                     <xsd:documentation>Rewrite the domain to the host header of the request</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="set_to_named">
                  <xsd:annotation>
                     <xsd:documentation>Rewrite the domain to the named domain value</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:complexType name="VirtualServer.CookieDomainRewriteModeArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:VirtualServer.CookieDomainRewriteMode[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:simpleType name="VirtualServer.CookieSecureFlagRewriteMode">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="no_modify">
                  <xsd:annotation>
                     <xsd:documentation>Do not modify the 'secure' tag</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="set_secure">
                  <xsd:annotation>
                     <xsd:documentation>Set the 'secure' tag</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="unset_secure">
                  <xsd:annotation>
                     <xsd:documentation>Unset the 'secure' tag</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:complexType name="VirtualServer.CookieSecureFlagRewriteModeArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:VirtualServer.CookieSecureFlagRewriteMode[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="VirtualServer.FTPPortRange">
           <xsd:annotation>
            <xsd:documentation>This structure contains the range of ports that FTP data connections use.</xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="low" type="xsd:int">
               <xsd:annotation>
                 <xsd:documentation>The lower bound of the port range for FTP data connections.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="high" type="xsd:int">
               <xsd:annotation>
                 <xsd:documentation>The upper bound of the port range for FTP data connections.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="VirtualServer.FTPPortRangeArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:VirtualServer.FTPPortRange[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:simpleType name="VirtualServer.HttpChunkOverheadForwarding">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="lazy">
                  <xsd:annotation>
                     <xsd:documentation>lazy</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="eager">
                  <xsd:annotation>
                     <xsd:documentation>eager</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:complexType name="VirtualServer.HttpChunkOverheadForwardingArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:VirtualServer.HttpChunkOverheadForwarding[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:simpleType name="VirtualServer.LocationDefaultRewriteMode">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="never">
                  <xsd:annotation>
                     <xsd:documentation>Nothing;</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="always">
                  <xsd:annotation>
                     <xsd:documentation>Rewrite the hostname to the request's "Host" header, and rewrite the protocol and port if necessary;</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="if_host_matches">
                  <xsd:annotation>
                     <xsd:documentation>Do not rewrite the hostname. Rewrite the protocol and port if the hostname matches the request's "Host" header.</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:complexType name="VirtualServer.LocationDefaultRewriteModeArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:VirtualServer.LocationDefaultRewriteMode[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="VirtualServer.PortRange">
           <xsd:annotation>
            <xsd:documentation>This structure contains the range of ports.</xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="low" type="xsd:int">
               <xsd:annotation>
                 <xsd:documentation>The lower bound of the port range.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="high" type="xsd:int">
               <xsd:annotation>
                 <xsd:documentation>The upper bound of the port range.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="VirtualServer.PortRangeArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:VirtualServer.PortRange[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:simpleType name="VirtualServer.Protocol">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="http">
                  <xsd:annotation>
                     <xsd:documentation>HTTP</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="ftp">
                  <xsd:annotation>
                     <xsd:documentation>FTP</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="imapv2">
                  <xsd:annotation>
                     <xsd:documentation>IMAPv2</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="imapv3">
                  <xsd:annotation>
                     <xsd:documentation>IMAPv3</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="imapv4">
                  <xsd:annotation>
                     <xsd:documentation>IMAPv4</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="pop3">
                  <xsd:annotation>
                     <xsd:documentation>POP3</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="smtp">
                  <xsd:annotation>
                     <xsd:documentation>SMTP</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="ldap">
                  <xsd:annotation>
                     <xsd:documentation>LDAP</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="telnet">
                  <xsd:annotation>
                     <xsd:documentation>Telnet</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="ssl">
                  <xsd:annotation>
                     <xsd:documentation>SSL</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="https">
                  <xsd:annotation>
                     <xsd:documentation>SSL (HTTPS)</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="imaps">
                  <xsd:annotation>
                     <xsd:documentation>SSL (IMAPS)</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="pop3s">
                  <xsd:annotation>
                     <xsd:documentation>SSL (POP3S)</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="ldaps">
                  <xsd:annotation>
                     <xsd:documentation>SSL (LDAPS)</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="udpstreaming">
                  <xsd:annotation>
                     <xsd:documentation>UDP - Streaming</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="udp">
                  <xsd:annotation>
                     <xsd:documentation>UDP</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="dns">
                  <xsd:annotation>
                     <xsd:documentation>DNS (UDP)</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="dns_tcp">
                  <xsd:annotation>
                     <xsd:documentation>DNS (TCP)</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="sipudp">
                  <xsd:annotation>
                     <xsd:documentation>SIP (UDP)</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="siptcp">
                  <xsd:annotation>
                     <xsd:documentation>SIP (TCP)</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="rtsp">
                  <xsd:annotation>
                     <xsd:documentation>RTSP</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="server_first">
                  <xsd:annotation>
                     <xsd:documentation>Generic server first</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="client_first">
                  <xsd:annotation>
                     <xsd:documentation>Generic client first</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="stream">
                  <xsd:annotation>
                     <xsd:documentation>Generic streaming</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:complexType name="VirtualServer.ProtocolArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:VirtualServer.Protocol[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="VirtualServer.RegexReplacement">
           <xsd:annotation>
            <xsd:documentation>This structure contains a regex and a replacement string.</xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="regex" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The regular expression used to match against.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="replacement" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The replacement string if the regular expression matches. Parameters $1-$9 can be used to represent bracketed parts of the regular expression.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="VirtualServer.RegexReplacementArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:VirtualServer.RegexReplacement[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="VirtualServer.Rule">
           <xsd:annotation>
            <xsd:documentation>This structure contains the information on how a rule is assigned to a virtual server.</xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="name" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The name of the rule.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="enabled" type="xsd:boolean">
               <xsd:annotation>
                 <xsd:documentation>Whether the rule is enabled or not.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="run_frequency" type="zeusns:VirtualServer.RuleRunFlag">
               <xsd:annotation>
                 <xsd:documentation>Whether the rule runs on every request/response, or just the first</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="VirtualServer.RuleArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:VirtualServer.Rule[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="VirtualServer.RuleArrayArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:VirtualServer.RuleArray[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:simpleType name="VirtualServer.RuleRunFlag">
           <xsd:annotation>
             <xsd:documentation>This enumeration defines the run flags for a particular rule.</xsd:documentation>
           </xsd:annotation>
           <xsd:restriction base="xsd:string">
             <xsd:enumeration value="run_every">
               <xsd:annotation>
                  <xsd:documentation>Run on every request or response.</xsd:documentation>
               </xsd:annotation>
             </xsd:enumeration>
             <xsd:enumeration value="only_first">
               <xsd:annotation>
                  <xsd:documentation>Run only on the first request or response.</xsd:documentation>
               </xsd:annotation>
             </xsd:enumeration>
           </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:simpleType name="VirtualServer.SIPDangerousRequestMode">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="node">
                  <xsd:annotation>
                     <xsd:documentation>Send the request to a back-end node</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="forbid">
                  <xsd:annotation>
                     <xsd:documentation>Send a 403 Forbidden response to the client</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="forward">
                  <xsd:annotation>
                     <xsd:documentation>Forward the request to its target URI (dangerous)</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:complexType name="VirtualServer.SIPDangerousRequestModeArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:VirtualServer.SIPDangerousRequestMode[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:simpleType name="VirtualServer.SIPMode">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="route">
                  <xsd:annotation>
                     <xsd:documentation>SIP Routing</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="sipgw">
                  <xsd:annotation>
                     <xsd:documentation>SIP Gateway</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="fullgw">
                  <xsd:annotation>
                     <xsd:documentation>Full Gateway</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:complexType name="VirtualServer.SIPModeArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:VirtualServer.SIPMode[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:simpleType name="VirtualServer.SSLClientCertificateHeaders">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="none">
                  <xsd:annotation>
                     <xsd:documentation>No data</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="simple">
                  <xsd:annotation>
                     <xsd:documentation>Certificate fields</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="all">
                  <xsd:annotation>
                     <xsd:documentation>Certificate fields and certificate text</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:complexType name="VirtualServer.SSLClientCertificateHeadersArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:VirtualServer.SSLClientCertificateHeaders[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:simpleType name="VirtualServer.SSLOCSPCheck">
           <xsd:annotation>
             <xsd:documentation>Different modes of OCSP checking for an issuer.</xsd:documentation>
           </xsd:annotation>
           <xsd:restriction base="xsd:string">
         
             <xsd:enumeration value="none">
               <xsd:annotation>
                  <xsd:documentation>Do not perform an OCSP check</xsd:documentation>
               </xsd:annotation>
             </xsd:enumeration>
         
             <xsd:enumeration value="optional">
               <xsd:annotation>
                  <xsd:documentation>If an OCSP URL can be determined, perform an OCSP check.</xsd:documentation>
               </xsd:annotation>
             </xsd:enumeration>
         
             <xsd:enumeration value="strict">
               <xsd:annotation>
                  <xsd:documentation>If an OCSP URL can be determined, perform an OCSP check. If not reject the connection.</xsd:documentation>
               </xsd:annotation>
             </xsd:enumeration>
         
           </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:complexType name="VirtualServer.SSLOCSPIssuer">
           <xsd:annotation>
            <xsd:documentation>This object represents a mapping between a Certificate Authority (this is the name of an item in the Certificate Authorities Catalog) and configuration for an OCSP responder. Certificates issued by the Certificate Authority will use these OCSP responder settings.</xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             
             <xsd:element name="ca" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The Certificate Authority for which these settings apply. This is the name of an item in the Certificate Authorities Catalog.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>    
             
             <xsd:element name="url" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The URL of the OCSP responder that should be used to check the revocation status of certificates issued by the Certificate Authority.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
         
             <xsd:element name="required" type="zeusns:VirtualServer.SSLOCSPCheck">
               <xsd:annotation>
                 <xsd:documentation>Is OCSP required for certificates signed by this CA?</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
         
             <xsd:element name="aia" type="xsd:boolean">
               <xsd:annotation>
                 <xsd:documentation>If set to true the Authority Information Access X509 extension will be used to determine the OCSP server's URL</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             
             <xsd:element name="nonce" type="zeusns:VirtualServer.SSLOCSPNonce">
               <xsd:annotation>
                 <xsd:documentation>Should an OCSP nonce be added to each request to protect against replay attacks. Not all OCSP servers support nonces.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
         
             <xsd:element name="sign_mode" type="zeusns:VirtualServer.SSLOCSPSignMode">
               <xsd:annotation>
                 <xsd:documentation>Should we sign OCSP requests?</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
         
         
             <xsd:element name="signer" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The key pair used to sign OCSP requests. If not set OCSP requests will not be signed. Must be an entry in the SSL Certificates Catalog.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
         
             <xsd:element name="responder_cert" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The expected certificate that the OCSP responder should provide. Must be in the Certificate Authority catalog, or be empty (meaning the issuer certificate), or be exactly "_SIGNED_BY_ISSUER_" (which will accept either the issuer or one that is signed by it and has id-kp-OCSPSigning in extendedKeyUsage and has id-pkix-ocsp-nocheck).</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
         
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="VirtualServer.SSLOCSPIssuerArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:VirtualServer.SSLOCSPIssuer[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="VirtualServer.SSLOCSPIssuerArrayArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:VirtualServer.SSLOCSPIssuerArray[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:simpleType name="VirtualServer.SSLOCSPNonce">
           <xsd:annotation>
             <xsd:documentation>Should we include nonces in requests and how strict should we be when validating the response</xsd:documentation>
           </xsd:annotation>
           <xsd:restriction base="xsd:string">
         
             <xsd:enumeration value="off">
               <xsd:annotation>
                  <xsd:documentation>Do not use the nonce extension in OCSP requests, ignore any nonces in the response.</xsd:documentation>
               </xsd:annotation>
             </xsd:enumeration>
         
             <xsd:enumeration value="on">
               <xsd:annotation>
                  <xsd:documentation>Use the nonce extension in requests. If the response contains a nonce validate it is correct.</xsd:documentation>
               </xsd:annotation>
             </xsd:enumeration>
         
             <xsd:enumeration value="strict">
               <xsd:annotation>
                  <xsd:documentation>Use the nonce extension in requests. The response must contain the correct nonce, otherwise it is rejected.</xsd:documentation>
               </xsd:annotation>
             </xsd:enumeration>
         
           </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:simpleType name="VirtualServer.SSLOCSPSignMode">
           <xsd:annotation>
             <xsd:documentation>The diferent modes for OCSP request signing</xsd:documentation>
           </xsd:annotation>
           <xsd:restriction base="xsd:string">
         
             <xsd:enumeration value="none">
               <xsd:annotation>
                  <xsd:documentation>Do not sign OCSP requests</xsd:documentation>
               </xsd:annotation>
             </xsd:enumeration>
         
             <xsd:enumeration value="use_default">
               <xsd:annotation>
                  <xsd:documentation>Use default OCSP settings for signing requests</xsd:documentation>
               </xsd:annotation>
             </xsd:enumeration>
         
             <xsd:enumeration value="sign">
               <xsd:annotation>
                  <xsd:documentation>Use a specific catalog certificate to sign requests</xsd:documentation>
               </xsd:annotation>
             </xsd:enumeration>
         
           </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:simpleType name="VirtualServer.SSLRequestClientCertMode">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="dont_request">
                  <xsd:annotation>
                     <xsd:documentation>Do not request a client certificate</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="request">
                  <xsd:annotation>
                     <xsd:documentation>Request, but do not require a client certificate</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="require">
                  <xsd:annotation>
                     <xsd:documentation>Require a client certificate</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:complexType name="VirtualServer.SSLRequestClientCertModeArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:VirtualServer.SSLRequestClientCertMode[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="VirtualServer.SSLSite">
           <xsd:annotation>
            <xsd:documentation>This object represents a mapping between a destination address and an SSL certificate (this is the name of an item in the SSL Certificates Catalog). Clients connecting to the SSL Site's address will be sent the associated certificate. </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             
             <xsd:element name="dest_address" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The destination address that this site handles.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>    
             
             <xsd:element name="certificate" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The certificate that will be sent when clients connect to the destination address. This is a certificate name from the SSL Certificates Catalog.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
         
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="VirtualServer.SSLSiteArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:VirtualServer.SSLSite[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="VirtualServer.SSLSiteArrayArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:VirtualServer.SSLSiteArray[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:boolean[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:booleanArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         
         <xsd:complexType name="doubleArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:double[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="intArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:int[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="longArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:long[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedIntArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedInt[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedLongArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedLong[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="DeploymentError">
           <xsd:annotation>
            <xsd:documentation>
              The DeploymentError fault is raised when a configuration
              change causes errors when attempting to apply the configuration
              to a running traffic manager.
         
              It would be raised in cases such as failing to bind to
              a port when enabling a Virtual Server.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidInput">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidInput fault is raised when the input to a function is
              invalid, for example a number was out of range. This fault is also
              raised in cases such as VirtualServer.setPool() where the Pool
              doesn't exist
         
              The details in the fault contain the object, key and value
              that caused the fault. These might be blank if they are not relevant
              to the fault.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidObjectName">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidObjectName fault is raised when attempting to create
              a new object (e.g. via an add, rename or copy) and the name is
              invalid (e.g. it contains a '/').
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidOperation">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidOperation fault is emitted when attempting an operation
              that doesn't make sense or is prohibited, for example deleting
              a built-in monitor, or attempting to rename an object twice in
              the same call. 
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="LicenseError">
           <xsd:annotation>
            <xsd:documentation>
              The LicenseError fault is emitted when attempting to use functionality
              that is disabled by the license key.
         
              You will need to contact your support provider to get a new license
              key with the required functionality. There may be a charge for this.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="feature" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The license key feature that was missing
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectAlreadyExists">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectAlreadyExists fault is raised when attempting to create an
             object (such as a Virtual Server) that already exists. It will also
             be raised in cases such as renaming and copying objects.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectDoesNotExist">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectDoesNotExist fault is raised when attempting to perform an
             operation on an object (such as Virtual Server) that doesn't exist.
         
             This fault will only be raised if the primary object in the call doesn't
             exist. For example if calling VirtualServer.setPool(), then
             this fault will be raised if the Virtual Server doesn't exist, but if
             the Pool doesn't exist then the "InvalidInput" fault will be raised.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
      </xsd:schema>
   </types>
   
   <message name="addCompressionMIMETypesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addCompressionMIMETypesResponse"></message>
   
   <message name="addCompressionMIMETypesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addCompressionMIMETypesByLocationResponse"></message>
   
   <message name="addResponseRulesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="rules" type="zeusns:VirtualServer.RuleArrayArray" />
   </message>
   
   <message name="addResponseRulesResponse"></message>
   
   <message name="addResponseRulesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="rules" type="zeusns:VirtualServer.RuleArrayArray" />
   </message>
   
   <message name="addResponseRulesByLocationResponse"></message>
   
   <message name="addRulesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="rules" type="zeusns:VirtualServer.RuleArrayArray" />
   </message>
   
   <message name="addRulesResponse"></message>
   
   <message name="addRulesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="rules" type="zeusns:VirtualServer.RuleArrayArray" />
   </message>
   
   <message name="addRulesByLocationResponse"></message>
   
   <message name="addSSLClientCertificateAuthoritiesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addSSLClientCertificateAuthoritiesResponse"></message>
   
   <message name="addSSLClientCertificateAuthoritiesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addSSLClientCertificateAuthoritiesByLocationResponse"></message>
   
   <message name="addSSLNeverExpiringClientCertificateAuthoritiesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addSSLNeverExpiringClientCertificateAuthoritiesResponse"></message>
   
   <message name="addSSLNeverExpiringClientCertificateAuthoritiesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addSSLNeverExpiringClientCertificateAuthoritiesByLocationResponse"></message>
   
   <message name="addSSLOCSPIssuersRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="ssl_ocsp_issuers" type="zeusns:VirtualServer.SSLOCSPIssuerArrayArray" />
   </message>
   
   <message name="addSSLOCSPIssuersResponse"></message>
   
   <message name="addSSLOCSPIssuersByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="ssl_ocsp_issuers" type="zeusns:VirtualServer.SSLOCSPIssuerArrayArray" />
   </message>
   
   <message name="addSSLOCSPIssuersByLocationResponse"></message>
   
   <message name="addSSLSitesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="ssl_sites" type="zeusns:VirtualServer.SSLSiteArrayArray" />
   </message>
   
   <message name="addSSLSitesResponse"></message>
   
   <message name="addSSLSitesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="ssl_sites" type="zeusns:VirtualServer.SSLSiteArrayArray" />
   </message>
   
   <message name="addSSLSitesByLocationResponse"></message>
   
   <message name="addVirtualServerRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="info" type="zeusns:VirtualServer.BasicInfoArray" />
   </message>
   
   <message name="addVirtualServerResponse"></message>
   
   <message name="copyVirtualServerRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="new_names" type="zeusns:StringArray" />
   </message>
   
   <message name="copyVirtualServerResponse"></message>
   
   <message name="deleteSSLSitesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="site_ips" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="deleteSSLSitesResponse"></message>
   
   <message name="deleteSSLSitesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="site_ips" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="deleteSSLSitesByLocationResponse"></message>
   
   <message name="deleteVirtualServerRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="deleteVirtualServerResponse"></message>
   
   <message name="editSSLSitesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="site_ips" type="zeusns:StringArrayArray" />
      <part name="ssl_sites" type="zeusns:VirtualServer.SSLSiteArrayArray" />
   </message>
   
   <message name="editSSLSitesResponse"></message>
   
   <message name="editSSLSitesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="site_ips" type="zeusns:StringArrayArray" />
      <part name="ssl_sites" type="zeusns:VirtualServer.SSLSiteArrayArray" />
   </message>
   
   <message name="editSSLSitesByLocationResponse"></message>
   
   <message name="getAddClusterClientIPHeaderRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAddClusterClientIPHeaderResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getAddClusterClientIPHeaderByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAddClusterClientIPHeaderByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getAddXForwardedForHeaderRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAddXForwardedForHeaderResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getAddXForwardedForHeaderByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAddXForwardedForHeaderByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getAddXForwardedProtoHeaderRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAddXForwardedProtoHeaderResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getAddXForwardedProtoHeaderByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAddXForwardedProtoHeaderByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getAptimizerEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAptimizerEnabledResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getAptimizerEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAptimizerEnabledByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getBandwidthClassRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getBandwidthClassResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getBandwidthClassByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getBandwidthClassByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getBasicInfoRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getBasicInfoResponse">
      <part name="info" type="zeusns:VirtualServer.BasicInfoArray" />
   </message>
   
   <message name="getBasicInfoByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getBasicInfoByLocationResponse">
      <part name="info" type="zeusns:VirtualServer.BasicInfoArray" />
   </message>
   
   <message name="getCompressUnknownSizeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCompressUnknownSizeResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getCompressUnknownSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCompressUnknownSizeByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getCompressionEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCompressionEnabledResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getCompressionEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCompressionEnabledByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getCompressionLevelRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCompressionLevelResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getCompressionLevelByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCompressionLevelByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getCompressionMIMETypesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCompressionMIMETypesResponse">
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getCompressionMIMETypesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCompressionMIMETypesByLocationResponse">
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getCompressionMaxSizeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCompressionMaxSizeResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getCompressionMaxSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCompressionMaxSizeByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getCompressionMinSizeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCompressionMinSizeResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getCompressionMinSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCompressionMinSizeByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getConnectTimeoutRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getConnectTimeoutResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getConnectTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getConnectTimeoutByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getCookieDomainRewriteModeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCookieDomainRewriteModeResponse">
      <part name="values" type="zeusns:VirtualServer.CookieDomainRewriteModeArray" />
   </message>
   
   <message name="getCookieDomainRewriteModeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCookieDomainRewriteModeByLocationResponse">
      <part name="values" type="zeusns:VirtualServer.CookieDomainRewriteModeArray" />
   </message>
   
   <message name="getCookieNamedDomainRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCookieNamedDomainResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getCookieNamedDomainByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCookieNamedDomainByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getCookiePathRewriteRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCookiePathRewriteResponse">
      <part name="values" type="zeusns:VirtualServer.RegexReplacementArray" />
   </message>
   
   <message name="getCookiePathRewriteByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCookiePathRewriteByLocationResponse">
      <part name="values" type="zeusns:VirtualServer.RegexReplacementArray" />
   </message>
   
   <message name="getCookieSecureFlagRewriteModeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCookieSecureFlagRewriteModeResponse">
      <part name="values" type="zeusns:VirtualServer.CookieSecureFlagRewriteModeArray" />
   </message>
   
   <message name="getCookieSecureFlagRewriteModeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCookieSecureFlagRewriteModeByLocationResponse">
      <part name="values" type="zeusns:VirtualServer.CookieSecureFlagRewriteModeArray" />
   </message>
   
   <message name="getDefaultPoolRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getDefaultPoolResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getDefaultPoolByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getDefaultPoolByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getEnabledResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getEnabledByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getErrorFileRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getErrorFileResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getErrorFileByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getErrorFileByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getFTPDataSourcePortRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getFTPDataSourcePortResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getFTPDataSourcePortByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getFTPDataSourcePortByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getFTPForceClientSecureRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getFTPForceClientSecureResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getFTPForceClientSecureByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getFTPForceClientSecureByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getFTPForceServerSecureRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getFTPForceServerSecureResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getFTPForceServerSecureByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getFTPForceServerSecureByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getFTPPortRangeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getFTPPortRangeResponse">
      <part name="range" type="zeusns:VirtualServer.FTPPortRangeArray" />
   </message>
   
   <message name="getFTPPortRangeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getFTPPortRangeByLocationResponse">
      <part name="range" type="zeusns:VirtualServer.FTPPortRangeArray" />
   </message>
   
   <message name="getFTPSSLDataRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getFTPSSLDataResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getFTPSSLDataByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getFTPSSLDataByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getHttpChunkOverheadForwardingRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getHttpChunkOverheadForwardingResponse">
      <part name="values" type="zeusns:VirtualServer.HttpChunkOverheadForwardingArray" />
   </message>
   
   <message name="getHttpChunkOverheadForwardingByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getHttpChunkOverheadForwardingByLocationResponse">
      <part name="values" type="zeusns:VirtualServer.HttpChunkOverheadForwardingArray" />
   </message>
   
   <message name="getKeepaliveRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getKeepaliveResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getKeepaliveByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getKeepaliveByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getKeepaliveTimeoutRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getKeepaliveTimeoutResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getKeepaliveTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getKeepaliveTimeoutByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getListenAddressesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getListenAddressesResponse">
      <part name="addresses" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getListenAddressesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getListenAddressesByLocationResponse">
      <part name="addresses" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getListenOnAllAddressesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getListenOnAllAddressesResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getListenOnAllAddressesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getListenOnAllAddressesByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getListenTrafficIPGroupsRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getListenTrafficIPGroupsResponse">
      <part name="groups" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getListenTrafficIPGroupsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getListenTrafficIPGroupsByLocationResponse">
      <part name="groups" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getLocationDefaultRewriteModeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLocationDefaultRewriteModeResponse">
      <part name="values" type="zeusns:VirtualServer.LocationDefaultRewriteModeArray" />
   </message>
   
   <message name="getLocationDefaultRewriteModeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLocationDefaultRewriteModeByLocationResponse">
      <part name="values" type="zeusns:VirtualServer.LocationDefaultRewriteModeArray" />
   </message>
   
   <message name="getLocationRewriteRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLocationRewriteResponse">
      <part name="values" type="zeusns:VirtualServer.RegexReplacementArray" />
   </message>
   
   <message name="getLocationRewriteByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLocationRewriteByLocationResponse">
      <part name="values" type="zeusns:VirtualServer.RegexReplacementArray" />
   </message>
   
   <message name="getLogClientConnectionFailuresRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLogClientConnectionFailuresResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getLogClientConnectionFailuresByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLogClientConnectionFailuresByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getLogEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLogEnabledResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getLogEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLogEnabledByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getLogFilenameRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLogFilenameResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getLogFilenameByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLogFilenameByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getLogFormatRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLogFormatResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getLogFormatByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLogFormatByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getLogSSLFailuresRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLogSSLFailuresResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getLogSSLFailuresByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLogSSLFailuresByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getLogServerConnectionFailuresRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLogServerConnectionFailuresResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getLogServerConnectionFailuresByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLogServerConnectionFailuresByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getMIMEAutoDetectRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMIMEAutoDetectResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getMIMEAutoDetectByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMIMEAutoDetectByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getMIMEDefaultTypeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMIMEDefaultTypeResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getMIMEDefaultTypeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMIMEDefaultTypeByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxClientBufferRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxClientBufferResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxClientBufferByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxClientBufferByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxServerBufferRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxServerBufferResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxServerBufferByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxServerBufferByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getNoteRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getNoteResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getPortRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getPortResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getPortByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getPortByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getProtectionRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getProtectionResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getProtectionByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getProtectionByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getProtocolRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getProtocolResponse">
      <part name="values" type="zeusns:VirtualServer.ProtocolArray" />
   </message>
   
   <message name="getProxyCloseRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getProxyCloseResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getProxyCloseByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getProxyCloseByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getRTSPPortRangeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRTSPPortRangeResponse">
      <part name="range" type="zeusns:VirtualServer.PortRangeArray" />
   </message>
   
   <message name="getRTSPPortRangeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRTSPPortRangeByLocationResponse">
      <part name="range" type="zeusns:VirtualServer.PortRangeArray" />
   </message>
   
   <message name="getRTSPStreamingTimeoutRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRTSPStreamingTimeoutResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getRTSPStreamingTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRTSPStreamingTimeoutByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getRequestSyslogEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRequestSyslogEnabledResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getRequestSyslogEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRequestSyslogEnabledByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getRequestSyslogFormatRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRequestSyslogFormatResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getRequestSyslogFormatByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRequestSyslogFormatByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getRequestSyslogIPEndpointRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRequestSyslogIPEndpointResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getRequestSyslogIPEndpointByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRequestSyslogIPEndpointByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getRequestSyslogMessageLenLimitRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRequestSyslogMessageLenLimitResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getRequestSyslogMessageLenLimitByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRequestSyslogMessageLenLimitByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getRequestTracingEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRequestTracingEnabledResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getRequestTracingEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRequestTracingEnabledByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getRequestTracingIORequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRequestTracingIOResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getRequestTracingIOByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRequestTracingIOByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getResponseRulesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getResponseRulesResponse">
      <part name="rules" type="zeusns:VirtualServer.RuleArrayArray" />
   </message>
   
   <message name="getResponseRulesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getResponseRulesByLocationResponse">
      <part name="rules" type="zeusns:VirtualServer.RuleArrayArray" />
   </message>
   
   <message name="getRewriteSIPURIRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRewriteSIPURIResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getRewriteSIPURIByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRewriteSIPURIByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getRulesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRulesResponse">
      <part name="rules" type="zeusns:VirtualServer.RuleArrayArray" />
   </message>
   
   <message name="getRulesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRulesByLocationResponse">
      <part name="rules" type="zeusns:VirtualServer.RuleArrayArray" />
   </message>
   
   <message name="getSIPDangerousRequestModeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSIPDangerousRequestModeResponse">
      <part name="values" type="zeusns:VirtualServer.SIPDangerousRequestModeArray" />
   </message>
   
   <message name="getSIPDangerousRequestModeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSIPDangerousRequestModeByLocationResponse">
      <part name="values" type="zeusns:VirtualServer.SIPDangerousRequestModeArray" />
   </message>
   
   <message name="getSIPFollowRouteRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSIPFollowRouteResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSIPFollowRouteByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSIPFollowRouteByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSIPMaxConnectionMemoryRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSIPMaxConnectionMemoryResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getSIPMaxConnectionMemoryByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSIPMaxConnectionMemoryByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getSIPModeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSIPModeResponse">
      <part name="values" type="zeusns:VirtualServer.SIPModeArray" />
   </message>
   
   <message name="getSIPModeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSIPModeByLocationResponse">
      <part name="values" type="zeusns:VirtualServer.SIPModeArray" />
   </message>
   
   <message name="getSIPPortRangeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSIPPortRangeResponse">
      <part name="range" type="zeusns:VirtualServer.PortRangeArray" />
   </message>
   
   <message name="getSIPPortRangeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSIPPortRangeByLocationResponse">
      <part name="range" type="zeusns:VirtualServer.PortRangeArray" />
   </message>
   
   <message name="getSIPStreamingTimeoutRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSIPStreamingTimeoutResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getSIPStreamingTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSIPStreamingTimeoutByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getSIPTimeoutMessagesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSIPTimeoutMessagesResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSIPTimeoutMessagesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSIPTimeoutMessagesByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLCertificateRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLCertificateResponse">
      <part name="certs" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLCertificateByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLCertificateByLocationResponse">
      <part name="certs" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLClientCertificateAuthoritiesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLClientCertificateAuthoritiesResponse">
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getSSLClientCertificateAuthoritiesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLClientCertificateAuthoritiesByLocationResponse">
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getSSLClientCertificateHeadersRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLClientCertificateHeadersResponse">
      <part name="values" type="zeusns:VirtualServer.SSLClientCertificateHeadersArray" />
   </message>
   
   <message name="getSSLClientCertificateHeadersByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLClientCertificateHeadersByLocationResponse">
      <part name="values" type="zeusns:VirtualServer.SSLClientCertificateHeadersArray" />
   </message>
   
   <message name="getSSLDecryptRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLDecryptResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLDecryptByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLDecryptByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLExpectStartTLSRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLExpectStartTLSResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLExpectStartTLSByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLExpectStartTLSByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLHeadersRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLHeadersResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLHeadersByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLHeadersByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLLogEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLLogEnabledResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLNeverExpiringClientCertificateAuthoritiesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLNeverExpiringClientCertificateAuthoritiesResponse">
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getSSLNeverExpiringClientCertificateAuthoritiesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLNeverExpiringClientCertificateAuthoritiesByLocationResponse">
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getSSLOCSPDefaultsRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLOCSPDefaultsResponse">
      <part name="ssl_defaults" type="zeusns:VirtualServer.SSLOCSPIssuerArray" />
   </message>
   
   <message name="getSSLOCSPDefaultsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLOCSPDefaultsByLocationResponse">
      <part name="ssl_defaults" type="zeusns:VirtualServer.SSLOCSPIssuerArray" />
   </message>
   
   <message name="getSSLOCSPIssuersRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLOCSPIssuersResponse">
      <part name="ssl_issuers" type="zeusns:VirtualServer.SSLOCSPIssuerArrayArray" />
   </message>
   
   <message name="getSSLOCSPIssuersByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLOCSPIssuersByLocationResponse">
      <part name="ssl_issuers" type="zeusns:VirtualServer.SSLOCSPIssuerArrayArray" />
   </message>
   
   <message name="getSSLOCSPMaxResponseAgeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLOCSPMaxResponseAgeResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getSSLOCSPMaxResponseAgeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLOCSPMaxResponseAgeByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getSSLOCSPStaplingRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLOCSPStaplingResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLOCSPStaplingByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLOCSPStaplingByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLOCSPTimeToleranceRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLOCSPTimeToleranceResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getSSLOCSPTimeToleranceByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLOCSPTimeToleranceByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getSSLOCSPTimeoutRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLOCSPTimeoutResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getSSLOCSPTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLOCSPTimeoutByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getSSLPreferSSLv3Request">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLPreferSSLv3Response">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLPreferSSLv3ByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLPreferSSLv3ByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLRequestClientCertModeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLRequestClientCertModeResponse">
      <part name="values" type="zeusns:VirtualServer.SSLRequestClientCertModeArray" />
   </message>
   
   <message name="getSSLRequestClientCertModeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLRequestClientCertModeByLocationResponse">
      <part name="values" type="zeusns:VirtualServer.SSLRequestClientCertModeArray" />
   </message>
   
   <message name="getSSLSendCloseAlertsRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLSendCloseAlertsResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLSendCloseAlertsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLSendCloseAlertsByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLSitesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLSitesResponse">
      <part name="ssl_sites" type="zeusns:VirtualServer.SSLSiteArrayArray" />
   </message>
   
   <message name="getSSLSitesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLSitesByLocationResponse">
      <part name="ssl_sites" type="zeusns:VirtualServer.SSLSiteArrayArray" />
   </message>
   
   <message name="getSSLTrustMagicRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLTrustMagicResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLTrustMagicByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLTrustMagicByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLUseOCSPRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLUseOCSPResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLUseOCSPByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLUseOCSPByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getServerfirstBannerRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getServerfirstBannerResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getServerfirstBannerByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getServerfirstBannerByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getServiceLevelMonitoringRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getServiceLevelMonitoringResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getServiceLevelMonitoringByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getServiceLevelMonitoringByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getSipTransactionTimeoutRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSipTransactionTimeoutResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getSipTransactionTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSipTransactionTimeoutByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getTimeoutRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getTimeoutResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getTimeoutByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getUDPEndpointPersistenceRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getUDPEndpointPersistenceResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getUDPEndpointPersistenceByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getUDPEndpointPersistenceByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getUDPResponseDatagramsExpectedRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getUDPResponseDatagramsExpectedResponse">
      <part name="values" type="zeusns:intArray" />
   </message>
   
   <message name="getUDPResponseDatagramsExpectedByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getUDPResponseDatagramsExpectedByLocationResponse">
      <part name="values" type="zeusns:intArray" />
   </message>
   
   <message name="getUDPTimeoutRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getUDPTimeoutResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getUDPTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getUDPTimeoutByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getUseNagleRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getUseNagleResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getUseNagleByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getUseNagleByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getVirtualServerNamesRequest"></message>
   
   <message name="getVirtualServerNamesResponse">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getWebcacheControlOutRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getWebcacheControlOutResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getWebcacheControlOutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getWebcacheControlOutByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getWebcacheEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getWebcacheEnabledResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getWebcacheEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getWebcacheEnabledByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getWebcacheErrorpageTimeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getWebcacheErrorpageTimeResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getWebcacheErrorpageTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getWebcacheErrorpageTimeByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getWebcacheRefreshTimeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getWebcacheRefreshTimeResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getWebcacheRefreshTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getWebcacheRefreshTimeByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getWebcacheTimeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getWebcacheTimeResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getWebcacheTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getWebcacheTimeByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="removeCompressionMIMETypesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeCompressionMIMETypesResponse"></message>
   
   <message name="removeCompressionMIMETypesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeCompressionMIMETypesByLocationResponse"></message>
   
   <message name="removeFTPPortRangeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="removeFTPPortRangeResponse"></message>
   
   <message name="removeFTPPortRangeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="removeFTPPortRangeByLocationResponse"></message>
   
   <message name="removeRTSPPortRangeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="removeRTSPPortRangeResponse"></message>
   
   <message name="removeRTSPPortRangeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="removeRTSPPortRangeByLocationResponse"></message>
   
   <message name="removeResponseRulesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="rules" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeResponseRulesResponse"></message>
   
   <message name="removeResponseRulesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="rules" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeResponseRulesByLocationResponse"></message>
   
   <message name="removeRulesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="rules" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeRulesResponse"></message>
   
   <message name="removeRulesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="rules" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeRulesByLocationResponse"></message>
   
   <message name="removeSIPPortRangeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="removeSIPPortRangeResponse"></message>
   
   <message name="removeSIPPortRangeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="removeSIPPortRangeByLocationResponse"></message>
   
   <message name="removeSSLClientCertificateAuthoritiesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeSSLClientCertificateAuthoritiesResponse"></message>
   
   <message name="removeSSLClientCertificateAuthoritiesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeSSLClientCertificateAuthoritiesByLocationResponse"></message>
   
   <message name="removeSSLNeverExpiringClientCertificateAuthoritiesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeSSLNeverExpiringClientCertificateAuthoritiesResponse"></message>
   
   <message name="removeSSLNeverExpiringClientCertificateAuthoritiesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeSSLNeverExpiringClientCertificateAuthoritiesByLocationResponse"></message>
   
   <message name="removeSSLOCSPIssuersRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="cas" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeSSLOCSPIssuersResponse"></message>
   
   <message name="removeSSLOCSPIssuersByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="cas" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeSSLOCSPIssuersByLocationResponse"></message>
   
   <message name="renameVirtualServerRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="new_names" type="zeusns:StringArray" />
   </message>
   
   <message name="renameVirtualServerResponse"></message>
   
   <message name="setAddClusterClientIPHeaderRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setAddClusterClientIPHeaderResponse"></message>
   
   <message name="setAddClusterClientIPHeaderByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setAddClusterClientIPHeaderByLocationResponse"></message>
   
   <message name="setAddXForwardedForHeaderRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setAddXForwardedForHeaderResponse"></message>
   
   <message name="setAddXForwardedForHeaderByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setAddXForwardedForHeaderByLocationResponse"></message>
   
   <message name="setAddXForwardedProtoHeaderRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setAddXForwardedProtoHeaderResponse"></message>
   
   <message name="setAddXForwardedProtoHeaderByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setAddXForwardedProtoHeaderByLocationResponse"></message>
   
   <message name="setApplicationFirewallEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setApplicationFirewallEnabledResponse"></message>
   
   <message name="setApplicationFirewallEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setApplicationFirewallEnabledByLocationResponse"></message>
   
   <message name="setAptimizerEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setAptimizerEnabledResponse"></message>
   
   <message name="setAptimizerEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setAptimizerEnabledByLocationResponse"></message>
   
   <message name="setBandwidthClassRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setBandwidthClassResponse"></message>
   
   <message name="setBandwidthClassByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setBandwidthClassByLocationResponse"></message>
   
   <message name="setCompressUnknownSizeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setCompressUnknownSizeResponse"></message>
   
   <message name="setCompressUnknownSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setCompressUnknownSizeByLocationResponse"></message>
   
   <message name="setCompressionEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setCompressionEnabledResponse"></message>
   
   <message name="setCompressionEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setCompressionEnabledByLocationResponse"></message>
   
   <message name="setCompressionLevelRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setCompressionLevelResponse"></message>
   
   <message name="setCompressionLevelByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setCompressionLevelByLocationResponse"></message>
   
   <message name="setCompressionMIMETypesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setCompressionMIMETypesResponse"></message>
   
   <message name="setCompressionMIMETypesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setCompressionMIMETypesByLocationResponse"></message>
   
   <message name="setCompressionMaxSizeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setCompressionMaxSizeResponse"></message>
   
   <message name="setCompressionMaxSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setCompressionMaxSizeByLocationResponse"></message>
   
   <message name="setCompressionMinSizeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setCompressionMinSizeResponse"></message>
   
   <message name="setCompressionMinSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setCompressionMinSizeByLocationResponse"></message>
   
   <message name="setConnectTimeoutRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setConnectTimeoutResponse"></message>
   
   <message name="setConnectTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setConnectTimeoutByLocationResponse"></message>
   
   <message name="setCookieDomainRewriteModeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.CookieDomainRewriteModeArray" />
   </message>
   
   <message name="setCookieDomainRewriteModeResponse"></message>
   
   <message name="setCookieDomainRewriteModeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.CookieDomainRewriteModeArray" />
   </message>
   
   <message name="setCookieDomainRewriteModeByLocationResponse"></message>
   
   <message name="setCookieNamedDomainRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setCookieNamedDomainResponse"></message>
   
   <message name="setCookieNamedDomainByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setCookieNamedDomainByLocationResponse"></message>
   
   <message name="setCookiePathRewriteRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.RegexReplacementArray" />
   </message>
   
   <message name="setCookiePathRewriteResponse"></message>
   
   <message name="setCookiePathRewriteByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.RegexReplacementArray" />
   </message>
   
   <message name="setCookiePathRewriteByLocationResponse"></message>
   
   <message name="setCookieSecureFlagRewriteModeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.CookieSecureFlagRewriteModeArray" />
   </message>
   
   <message name="setCookieSecureFlagRewriteModeResponse"></message>
   
   <message name="setCookieSecureFlagRewriteModeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.CookieSecureFlagRewriteModeArray" />
   </message>
   
   <message name="setCookieSecureFlagRewriteModeByLocationResponse"></message>
   
   <message name="setDefaultPoolRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setDefaultPoolResponse"></message>
   
   <message name="setDefaultPoolByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setDefaultPoolByLocationResponse"></message>
   
   <message name="setEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setEnabledResponse"></message>
   
   <message name="setEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setEnabledByLocationResponse"></message>
   
   <message name="setErrorFileRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setErrorFileResponse"></message>
   
   <message name="setErrorFileByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setErrorFileByLocationResponse"></message>
   
   <message name="setFTPDataSourcePortRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setFTPDataSourcePortResponse"></message>
   
   <message name="setFTPDataSourcePortByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setFTPDataSourcePortByLocationResponse"></message>
   
   <message name="setFTPForceClientSecureRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setFTPForceClientSecureResponse"></message>
   
   <message name="setFTPForceClientSecureByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setFTPForceClientSecureByLocationResponse"></message>
   
   <message name="setFTPForceServerSecureRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setFTPForceServerSecureResponse"></message>
   
   <message name="setFTPForceServerSecureByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setFTPForceServerSecureByLocationResponse"></message>
   
   <message name="setFTPPortRangeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="range" type="zeusns:VirtualServer.FTPPortRangeArray" />
   </message>
   
   <message name="setFTPPortRangeResponse"></message>
   
   <message name="setFTPPortRangeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="range" type="zeusns:VirtualServer.FTPPortRangeArray" />
   </message>
   
   <message name="setFTPPortRangeByLocationResponse"></message>
   
   <message name="setFTPSSLDataRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setFTPSSLDataResponse"></message>
   
   <message name="setFTPSSLDataByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setFTPSSLDataByLocationResponse"></message>
   
   <message name="setHttpChunkOverheadForwardingRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.HttpChunkOverheadForwardingArray" />
   </message>
   
   <message name="setHttpChunkOverheadForwardingResponse"></message>
   
   <message name="setHttpChunkOverheadForwardingByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.HttpChunkOverheadForwardingArray" />
   </message>
   
   <message name="setHttpChunkOverheadForwardingByLocationResponse"></message>
   
   <message name="setKeepaliveRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setKeepaliveResponse"></message>
   
   <message name="setKeepaliveByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setKeepaliveByLocationResponse"></message>
   
   <message name="setKeepaliveTimeoutRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setKeepaliveTimeoutResponse"></message>
   
   <message name="setKeepaliveTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setKeepaliveTimeoutByLocationResponse"></message>
   
   <message name="setListenAddressesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="addresses" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setListenAddressesResponse"></message>
   
   <message name="setListenAddressesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="addresses" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setListenAddressesByLocationResponse"></message>
   
   <message name="setListenOnAllAddressesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="setListenOnAllAddressesResponse"></message>
   
   <message name="setListenOnAllAddressesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="setListenOnAllAddressesByLocationResponse"></message>
   
   <message name="setListenTrafficIPGroupsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="groups" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setListenTrafficIPGroupsResponse"></message>
   
   <message name="setListenTrafficIPGroupsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="groups" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setListenTrafficIPGroupsByLocationResponse"></message>
   
   <message name="setLocationDefaultRewriteModeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.LocationDefaultRewriteModeArray" />
   </message>
   
   <message name="setLocationDefaultRewriteModeResponse"></message>
   
   <message name="setLocationDefaultRewriteModeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.LocationDefaultRewriteModeArray" />
   </message>
   
   <message name="setLocationDefaultRewriteModeByLocationResponse"></message>
   
   <message name="setLocationRewriteRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.RegexReplacementArray" />
   </message>
   
   <message name="setLocationRewriteResponse"></message>
   
   <message name="setLocationRewriteByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.RegexReplacementArray" />
   </message>
   
   <message name="setLocationRewriteByLocationResponse"></message>
   
   <message name="setLogClientConnectionFailuresRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setLogClientConnectionFailuresResponse"></message>
   
   <message name="setLogClientConnectionFailuresByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setLogClientConnectionFailuresByLocationResponse"></message>
   
   <message name="setLogEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setLogEnabledResponse"></message>
   
   <message name="setLogEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setLogEnabledByLocationResponse"></message>
   
   <message name="setLogFilenameRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setLogFilenameResponse"></message>
   
   <message name="setLogFilenameByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setLogFilenameByLocationResponse"></message>
   
   <message name="setLogFormatRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setLogFormatResponse"></message>
   
   <message name="setLogFormatByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setLogFormatByLocationResponse"></message>
   
   <message name="setLogSSLFailuresRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setLogSSLFailuresResponse"></message>
   
   <message name="setLogSSLFailuresByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setLogSSLFailuresByLocationResponse"></message>
   
   <message name="setLogServerConnectionFailuresRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setLogServerConnectionFailuresResponse"></message>
   
   <message name="setLogServerConnectionFailuresByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setLogServerConnectionFailuresByLocationResponse"></message>
   
   <message name="setMIMEAutoDetectRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setMIMEAutoDetectResponse"></message>
   
   <message name="setMIMEAutoDetectByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setMIMEAutoDetectByLocationResponse"></message>
   
   <message name="setMIMEDefaultTypeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setMIMEDefaultTypeResponse"></message>
   
   <message name="setMIMEDefaultTypeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setMIMEDefaultTypeByLocationResponse"></message>
   
   <message name="setMaxClientBufferRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxClientBufferResponse"></message>
   
   <message name="setMaxClientBufferByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxClientBufferByLocationResponse"></message>
   
   <message name="setMaxServerBufferRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxServerBufferResponse"></message>
   
   <message name="setMaxServerBufferByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxServerBufferByLocationResponse"></message>
   
   <message name="setNoteRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setNoteResponse"></message>
   
   <message name="setPortRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setPortResponse"></message>
   
   <message name="setPortByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setPortByLocationResponse"></message>
   
   <message name="setProtectionRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setProtectionResponse"></message>
   
   <message name="setProtectionByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setProtectionByLocationResponse"></message>
   
   <message name="setProtocolRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.ProtocolArray" />
   </message>
   
   <message name="setProtocolResponse"></message>
   
   <message name="setProxyCloseRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setProxyCloseResponse"></message>
   
   <message name="setProxyCloseByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setProxyCloseByLocationResponse"></message>
   
   <message name="setRTSPPortRangeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="range" type="zeusns:VirtualServer.PortRangeArray" />
   </message>
   
   <message name="setRTSPPortRangeResponse"></message>
   
   <message name="setRTSPPortRangeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="range" type="zeusns:VirtualServer.PortRangeArray" />
   </message>
   
   <message name="setRTSPPortRangeByLocationResponse"></message>
   
   <message name="setRTSPStreamingTimeoutRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setRTSPStreamingTimeoutResponse"></message>
   
   <message name="setRTSPStreamingTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setRTSPStreamingTimeoutByLocationResponse"></message>
   
   <message name="setRequestSyslogEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setRequestSyslogEnabledResponse"></message>
   
   <message name="setRequestSyslogEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setRequestSyslogEnabledByLocationResponse"></message>
   
   <message name="setRequestSyslogFormatRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setRequestSyslogFormatResponse"></message>
   
   <message name="setRequestSyslogFormatByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setRequestSyslogFormatByLocationResponse"></message>
   
   <message name="setRequestSyslogIPEndpointRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setRequestSyslogIPEndpointResponse"></message>
   
   <message name="setRequestSyslogIPEndpointByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setRequestSyslogIPEndpointByLocationResponse"></message>
   
   <message name="setRequestSyslogMessageLenLimitRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setRequestSyslogMessageLenLimitResponse"></message>
   
   <message name="setRequestSyslogMessageLenLimitByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setRequestSyslogMessageLenLimitByLocationResponse"></message>
   
   <message name="setRequestTracingEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setRequestTracingEnabledResponse"></message>
   
   <message name="setRequestTracingEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setRequestTracingEnabledByLocationResponse"></message>
   
   <message name="setRequestTracingIORequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setRequestTracingIOResponse"></message>
   
   <message name="setRequestTracingIOByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setRequestTracingIOByLocationResponse"></message>
   
   <message name="setResponseRulesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="rules" type="zeusns:VirtualServer.RuleArrayArray" />
   </message>
   
   <message name="setResponseRulesResponse"></message>
   
   <message name="setResponseRulesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="rules" type="zeusns:VirtualServer.RuleArrayArray" />
   </message>
   
   <message name="setResponseRulesByLocationResponse"></message>
   
   <message name="setRewriteSIPURIRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setRewriteSIPURIResponse"></message>
   
   <message name="setRewriteSIPURIByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setRewriteSIPURIByLocationResponse"></message>
   
   <message name="setRulesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="rules" type="zeusns:VirtualServer.RuleArrayArray" />
   </message>
   
   <message name="setRulesResponse"></message>
   
   <message name="setRulesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="rules" type="zeusns:VirtualServer.RuleArrayArray" />
   </message>
   
   <message name="setRulesByLocationResponse"></message>
   
   <message name="setSIPDangerousRequestModeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.SIPDangerousRequestModeArray" />
   </message>
   
   <message name="setSIPDangerousRequestModeResponse"></message>
   
   <message name="setSIPDangerousRequestModeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.SIPDangerousRequestModeArray" />
   </message>
   
   <message name="setSIPDangerousRequestModeByLocationResponse"></message>
   
   <message name="setSIPFollowRouteRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSIPFollowRouteResponse"></message>
   
   <message name="setSIPFollowRouteByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSIPFollowRouteByLocationResponse"></message>
   
   <message name="setSIPMaxConnectionMemoryRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setSIPMaxConnectionMemoryResponse"></message>
   
   <message name="setSIPMaxConnectionMemoryByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setSIPMaxConnectionMemoryByLocationResponse"></message>
   
   <message name="setSIPModeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.SIPModeArray" />
   </message>
   
   <message name="setSIPModeResponse"></message>
   
   <message name="setSIPModeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.SIPModeArray" />
   </message>
   
   <message name="setSIPModeByLocationResponse"></message>
   
   <message name="setSIPPortRangeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="range" type="zeusns:VirtualServer.PortRangeArray" />
   </message>
   
   <message name="setSIPPortRangeResponse"></message>
   
   <message name="setSIPPortRangeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="range" type="zeusns:VirtualServer.PortRangeArray" />
   </message>
   
   <message name="setSIPPortRangeByLocationResponse"></message>
   
   <message name="setSIPStreamingTimeoutRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setSIPStreamingTimeoutResponse"></message>
   
   <message name="setSIPStreamingTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setSIPStreamingTimeoutByLocationResponse"></message>
   
   <message name="setSIPTimeoutMessagesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSIPTimeoutMessagesResponse"></message>
   
   <message name="setSIPTimeoutMessagesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSIPTimeoutMessagesByLocationResponse"></message>
   
   <message name="setSSLCertificateRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="certs" type="zeusns:StringArray" />
   </message>
   
   <message name="setSSLCertificateResponse"></message>
   
   <message name="setSSLCertificateByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="certs" type="zeusns:StringArray" />
   </message>
   
   <message name="setSSLCertificateByLocationResponse"></message>
   
   <message name="setSSLClientCertificateAuthoritiesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setSSLClientCertificateAuthoritiesResponse"></message>
   
   <message name="setSSLClientCertificateAuthoritiesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setSSLClientCertificateAuthoritiesByLocationResponse"></message>
   
   <message name="setSSLClientCertificateHeadersRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.SSLClientCertificateHeadersArray" />
   </message>
   
   <message name="setSSLClientCertificateHeadersResponse"></message>
   
   <message name="setSSLClientCertificateHeadersByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.SSLClientCertificateHeadersArray" />
   </message>
   
   <message name="setSSLClientCertificateHeadersByLocationResponse"></message>
   
   <message name="setSSLDecryptRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLDecryptResponse"></message>
   
   <message name="setSSLDecryptByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLDecryptByLocationResponse"></message>
   
   <message name="setSSLExpectStartTLSRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLExpectStartTLSResponse"></message>
   
   <message name="setSSLExpectStartTLSByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLExpectStartTLSByLocationResponse"></message>
   
   <message name="setSSLHeadersRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLHeadersResponse"></message>
   
   <message name="setSSLHeadersByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLHeadersByLocationResponse"></message>
   
   <message name="setSSLLogEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLLogEnabledResponse"></message>
   
   <message name="setSSLNeverExpiringClientCertificateAuthoritiesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setSSLNeverExpiringClientCertificateAuthoritiesResponse"></message>
   
   <message name="setSSLNeverExpiringClientCertificateAuthoritiesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setSSLNeverExpiringClientCertificateAuthoritiesByLocationResponse"></message>
   
   <message name="setSSLOCSPDefaultsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="ssl_ocsp_issuers" type="zeusns:VirtualServer.SSLOCSPIssuerArray" />
   </message>
   
   <message name="setSSLOCSPDefaultsResponse"></message>
   
   <message name="setSSLOCSPDefaultsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="ssl_ocsp_issuers" type="zeusns:VirtualServer.SSLOCSPIssuerArray" />
   </message>
   
   <message name="setSSLOCSPDefaultsByLocationResponse"></message>
   
   <message name="setSSLOCSPIssuersRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="ssl_ocsp_issuers" type="zeusns:VirtualServer.SSLOCSPIssuerArrayArray" />
   </message>
   
   <message name="setSSLOCSPIssuersResponse"></message>
   
   <message name="setSSLOCSPIssuersByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="ssl_ocsp_issuers" type="zeusns:VirtualServer.SSLOCSPIssuerArrayArray" />
   </message>
   
   <message name="setSSLOCSPIssuersByLocationResponse"></message>
   
   <message name="setSSLOCSPMaxResponseAgeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setSSLOCSPMaxResponseAgeResponse"></message>
   
   <message name="setSSLOCSPMaxResponseAgeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setSSLOCSPMaxResponseAgeByLocationResponse"></message>
   
   <message name="setSSLOCSPStaplingRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLOCSPStaplingResponse"></message>
   
   <message name="setSSLOCSPStaplingByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLOCSPStaplingByLocationResponse"></message>
   
   <message name="setSSLOCSPTimeToleranceRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setSSLOCSPTimeToleranceResponse"></message>
   
   <message name="setSSLOCSPTimeToleranceByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setSSLOCSPTimeToleranceByLocationResponse"></message>
   
   <message name="setSSLOCSPTimeoutRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setSSLOCSPTimeoutResponse"></message>
   
   <message name="setSSLOCSPTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setSSLOCSPTimeoutByLocationResponse"></message>
   
   <message name="setSSLPreferSSLv3Request">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLPreferSSLv3Response"></message>
   
   <message name="setSSLPreferSSLv3ByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLPreferSSLv3ByLocationResponse"></message>
   
   <message name="setSSLRequestClientCertModeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.SSLRequestClientCertModeArray" />
   </message>
   
   <message name="setSSLRequestClientCertModeResponse"></message>
   
   <message name="setSSLRequestClientCertModeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:VirtualServer.SSLRequestClientCertModeArray" />
   </message>
   
   <message name="setSSLRequestClientCertModeByLocationResponse"></message>
   
   <message name="setSSLSendCloseAlertsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLSendCloseAlertsResponse"></message>
   
   <message name="setSSLSendCloseAlertsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLSendCloseAlertsByLocationResponse"></message>
   
   <message name="setSSLTrustMagicRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLTrustMagicResponse"></message>
   
   <message name="setSSLTrustMagicByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLTrustMagicByLocationResponse"></message>
   
   <message name="setSSLUseOCSPRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLUseOCSPResponse"></message>
   
   <message name="setSSLUseOCSPByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLUseOCSPByLocationResponse"></message>
   
   <message name="setServerfirstBannerRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setServerfirstBannerResponse"></message>
   
   <message name="setServerfirstBannerByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setServerfirstBannerByLocationResponse"></message>
   
   <message name="setServiceLevelMonitoringRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setServiceLevelMonitoringResponse"></message>
   
   <message name="setServiceLevelMonitoringByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setServiceLevelMonitoringByLocationResponse"></message>
   
   <message name="setSipTransactionTimeoutRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setSipTransactionTimeoutResponse"></message>
   
   <message name="setSipTransactionTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setSipTransactionTimeoutByLocationResponse"></message>
   
   <message name="setTimeoutRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setTimeoutResponse"></message>
   
   <message name="setTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setTimeoutByLocationResponse"></message>
   
   <message name="setUDPEndpointPersistenceRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setUDPEndpointPersistenceResponse"></message>
   
   <message name="setUDPEndpointPersistenceByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setUDPEndpointPersistenceByLocationResponse"></message>
   
   <message name="setUDPResponseDatagramsExpectedRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:intArray" />
   </message>
   
   <message name="setUDPResponseDatagramsExpectedResponse"></message>
   
   <message name="setUDPResponseDatagramsExpectedByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:intArray" />
   </message>
   
   <message name="setUDPResponseDatagramsExpectedByLocationResponse"></message>
   
   <message name="setUDPTimeoutRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setUDPTimeoutResponse"></message>
   
   <message name="setUDPTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setUDPTimeoutByLocationResponse"></message>
   
   <message name="setUseNagleRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setUseNagleResponse"></message>
   
   <message name="setUseNagleByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setUseNagleByLocationResponse"></message>
   
   <message name="setWebcacheControlOutRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setWebcacheControlOutResponse"></message>
   
   <message name="setWebcacheControlOutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setWebcacheControlOutByLocationResponse"></message>
   
   <message name="setWebcacheEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setWebcacheEnabledResponse"></message>
   
   <message name="setWebcacheEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setWebcacheEnabledByLocationResponse"></message>
   
   <message name="setWebcacheErrorpageTimeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setWebcacheErrorpageTimeResponse"></message>
   
   <message name="setWebcacheErrorpageTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setWebcacheErrorpageTimeByLocationResponse"></message>
   
   <message name="setWebcacheRefreshTimeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setWebcacheRefreshTimeResponse"></message>
   
   <message name="setWebcacheRefreshTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setWebcacheRefreshTimeByLocationResponse"></message>
   
   <message name="setWebcacheTimeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setWebcacheTimeResponse"></message>
   
   <message name="setWebcacheTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setWebcacheTimeByLocationResponse"></message>
   
   <message name="DeploymentError">
      <part name="parameters" type="zeusns:DeploymentError" />
   </message>
   
   <message name="InvalidInput">
      <part name="parameters" type="zeusns:InvalidInput" />
   </message>
   
   <message name="InvalidObjectName">
      <part name="parameters" type="zeusns:InvalidObjectName" />
   </message>
   
   <message name="InvalidOperation">
      <part name="parameters" type="zeusns:InvalidOperation" />
   </message>
   
   <message name="LicenseError">
      <part name="parameters" type="zeusns:LicenseError" />
   </message>
   
   <message name="ObjectAlreadyExists">
      <part name="parameters" type="zeusns:ObjectAlreadyExists" />
   </message>
   
   <message name="ObjectDoesNotExist">
      <part name="parameters" type="zeusns:ObjectDoesNotExist" />
   </message>
   
   <portType name="VirtualServerPort">
      <operation name="addCompressionMIMETypes">
         <documentation>
            For each named virtual server, add new MIME types to the list of types to compress.
         </documentation>
         
         <input message="zeusns:addCompressionMIMETypesRequest"/>
         <output message="zeusns:addCompressionMIMETypesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="addCompressionMIMETypesByLocation">
         <documentation>
            For each named virtual server, add new MIME types to the list of types to compress. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:addCompressionMIMETypesByLocationRequest"/>
         <output message="zeusns:addCompressionMIMETypesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="addResponseRules">
         <documentation>
            Add new rules to be run on server responses for each of the named virtual servers. New rules are run after existing rules. If any of the rules are already configured to run, then they are enabled and flags are set to the values passed in.
         </documentation>
         
         <input message="zeusns:addResponseRulesRequest"/>
         <output message="zeusns:addResponseRulesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="addResponseRulesByLocation">
         <documentation>
            Add new rules to be run on server responses for each of the named virtual servers. New rules are run after existing rules. If any of the rules are already configured to run, then they are enabled and flags are set to the values passed in. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:addResponseRulesByLocationRequest"/>
         <output message="zeusns:addResponseRulesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="addRules">
         <documentation>
            Add new rules to be run on client requests for each of the named virtual servers. New rules are run after existing rules. If any of the rules are already configured to run, then they are enabled and flags are set to the values passed in.
         </documentation>
         
         <input message="zeusns:addRulesRequest"/>
         <output message="zeusns:addRulesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="addRulesByLocation">
         <documentation>
            Add new rules to be run on client requests for each of the named virtual servers. New rules are run after existing rules. If any of the rules are already configured to run, then they are enabled and flags are set to the values passed in. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:addRulesByLocationRequest"/>
         <output message="zeusns:addRulesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="addSSLClientCertificateAuthorities">
         <documentation>
            Add new certificate authorities for validating client certificates for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:addSSLClientCertificateAuthoritiesRequest"/>
         <output message="zeusns:addSSLClientCertificateAuthoritiesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="addSSLClientCertificateAuthoritiesByLocation">
         <documentation>
            Add new certificate authorities for validating client certificates for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:addSSLClientCertificateAuthoritiesByLocationRequest"/>
         <output message="zeusns:addSSLClientCertificateAuthoritiesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="addSSLNeverExpiringClientCertificateAuthorities">
         <documentation>
            Add CAs for which any client certificate they validate is considered valid even if the client certificate's expiration date has passed, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:addSSLNeverExpiringClientCertificateAuthoritiesRequest"/>
         <output message="zeusns:addSSLNeverExpiringClientCertificateAuthoritiesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="addSSLNeverExpiringClientCertificateAuthoritiesByLocation">
         <documentation>
            Add CAs for which any client certificate they validate is considered valid even if the client certificate's expiration date has passed, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:addSSLNeverExpiringClientCertificateAuthoritiesByLocationRequest"/>
         <output message="zeusns:addSSLNeverExpiringClientCertificateAuthoritiesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="addSSLOCSPIssuers">
         <documentation>
            Adds mappings between Certificate Authorities and OCSP responder settings. Certificates issued by these authorities will be verified with OCSP using these settings.
         </documentation>
         
         <input message="zeusns:addSSLOCSPIssuersRequest"/>
         <output message="zeusns:addSSLOCSPIssuersResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="addSSLOCSPIssuersByLocation">
         <documentation>
            Adds mappings between Certificate Authorities and OCSP responder settings. Certificates issued by these authorities will be verified with OCSP using these settings. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:addSSLOCSPIssuersByLocationRequest"/>
         <output message="zeusns:addSSLOCSPIssuersByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="addSSLSites">
         <documentation>
            Adds the specified SSLSite objects to the named virtual servers. These objects are mappings between destination addresses and the certificate used for SSL decryption those addresses. Each certificate is the name of an item in the SSL Certificates Catalog.
         </documentation>
         
         <input message="zeusns:addSSLSitesRequest"/>
         <output message="zeusns:addSSLSitesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
      </operation>
      
      <operation name="addSSLSitesByLocation">
         <documentation>
            Adds the specified SSLSite objects to the named virtual servers. These objects are mappings between destination addresses and the certificate used for SSL decryption those addresses. Each certificate is the name of an item in the SSL Certificates Catalog. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:addSSLSitesByLocationRequest"/>
         <output message="zeusns:addSSLSitesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
      </operation>
      
      <operation name="addVirtualServer">
         <documentation>
            Add each virtual servers, using the provided BasicInfo.
         </documentation>
         
         <input message="zeusns:addVirtualServerRequest"/>
         <output message="zeusns:addVirtualServerResponse"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="copyVirtualServer">
         <documentation>
            Rename each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:copyVirtualServerRequest"/>
         <output message="zeusns:copyVirtualServerResponse"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="deleteSSLSites">
         <documentation>
            Deletes the SSLSite objects that act on the IP addresses in the site_ips array for each of the named virtual servers. These objects are mappings between destination addresses and the certificate used for SSL decryption those addresses. Each certificate is the name of an item in the SSL Certificates Catalog.
         </documentation>
         
         <input message="zeusns:deleteSSLSitesRequest"/>
         <output message="zeusns:deleteSSLSitesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="deleteSSLSitesByLocation">
         <documentation>
            Deletes the SSLSite objects that act on the IP addresses in the site_ips array for each of the named virtual servers. These objects are mappings between destination addresses and the certificate used for SSL decryption those addresses. Each certificate is the name of an item in the SSL Certificates Catalog. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:deleteSSLSitesByLocationRequest"/>
         <output message="zeusns:deleteSSLSitesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="deleteVirtualServer">
         <documentation>
            Delete each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:deleteVirtualServerRequest"/>
         <output message="zeusns:deleteVirtualServerResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="editSSLSites">
         <documentation>
            Edits the SSLSite objects that act on the IP addresses in the site_ips array for each of the named virtual servers. These objects are mappings between destination addresses and the certificate used for SSL decryption those addresses. Each certificate is the name of an item in the SSL Certificates Catalog.
         </documentation>
         
         <input message="zeusns:editSSLSitesRequest"/>
         <output message="zeusns:editSSLSitesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
      </operation>
      
      <operation name="editSSLSitesByLocation">
         <documentation>
            Edits the SSLSite objects that act on the IP addresses in the site_ips array for each of the named virtual servers. These objects are mappings between destination addresses and the certificate used for SSL decryption those addresses. Each certificate is the name of an item in the SSL Certificates Catalog. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:editSSLSitesByLocationRequest"/>
         <output message="zeusns:editSSLSitesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
      </operation>
      
      <operation name="getAddClusterClientIPHeader">
         <documentation>
            Get whether an 'X-Cluster-Client-Ip' header should be added to each HTTP request, for each of the named virtual servers. The 'X-Cluster-Client-Ip' header contains the client's IP address.
         </documentation>
         
         <input message="zeusns:getAddClusterClientIPHeaderRequest"/>
         <output message="zeusns:getAddClusterClientIPHeaderResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAddClusterClientIPHeaderByLocation">
         <documentation>
            Get whether an 'X-Cluster-Client-Ip' header should be added to each HTTP request, for each of the named virtual servers. The 'X-Cluster-Client-Ip' header contains the client's IP address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAddClusterClientIPHeaderByLocationRequest"/>
         <output message="zeusns:getAddClusterClientIPHeaderByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAddXForwardedForHeader">
         <documentation>
            Get whether the remote client's IP address should be appended to the X-Forwarded-For header. The 'X-Forwarded-For' header contains the client's IP address.
         </documentation>
         
         <input message="zeusns:getAddXForwardedForHeaderRequest"/>
         <output message="zeusns:getAddXForwardedForHeaderResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAddXForwardedForHeaderByLocation">
         <documentation>
            Get whether the remote client's IP address should be appended to the X-Forwarded-For header. The 'X-Forwarded-For' header contains the client's IP address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAddXForwardedForHeaderByLocationRequest"/>
         <output message="zeusns:getAddXForwardedForHeaderByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAddXForwardedProtoHeader">
         <documentation>
            Get whether an 'X-Forwarded-Proto' header should be added to each HTTP request, for each of the named virtual servers. The 'X-Forwarded-Proto' header contains the protocol the client used to connect to the traffic manager
         </documentation>
         
         <input message="zeusns:getAddXForwardedProtoHeaderRequest"/>
         <output message="zeusns:getAddXForwardedProtoHeaderResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAddXForwardedProtoHeaderByLocation">
         <documentation>
            Get whether an 'X-Forwarded-Proto' header should be added to each HTTP request, for each of the named virtual servers. The 'X-Forwarded-Proto' header contains the protocol the client used to connect to the traffic manager This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAddXForwardedProtoHeaderByLocationRequest"/>
         <output message="zeusns:getAddXForwardedProtoHeaderByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAptimizerEnabled">
         <documentation>
            Get whether each of the named virtual servers should aptimize web content.
         </documentation>
         
         <input message="zeusns:getAptimizerEnabledRequest"/>
         <output message="zeusns:getAptimizerEnabledResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAptimizerEnabledByLocation">
         <documentation>
            Get whether each of the named virtual servers should aptimize web content. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAptimizerEnabledByLocationRequest"/>
         <output message="zeusns:getAptimizerEnabledByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getBandwidthClass">
         <documentation>
            Get the Bandwidth Class that each of the named virtual servers uses.
         </documentation>
         
         <input message="zeusns:getBandwidthClassRequest"/>
         <output message="zeusns:getBandwidthClassResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getBandwidthClassByLocation">
         <documentation>
            Get the Bandwidth Class that each of the named virtual servers uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getBandwidthClassByLocationRequest"/>
         <output message="zeusns:getBandwidthClassByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getBasicInfo">
         <documentation>
            Get the basic information for each of the named virtual servers. This information includes the port, the protocol the virtual server handles and the default pool for the traffic.
         </documentation>
         
         <input message="zeusns:getBasicInfoRequest"/>
         <output message="zeusns:getBasicInfoResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getBasicInfoByLocation">
         <documentation>
            Get the basic information for each of the named virtual servers. This information includes the port, the protocol the virtual server handles and the default pool for the traffic. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getBasicInfoByLocationRequest"/>
         <output message="zeusns:getBasicInfoByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCompressUnknownSize">
         <documentation>
            Get whether each of the named virtual servers should compress documents with no given size.
         </documentation>
         
         <input message="zeusns:getCompressUnknownSizeRequest"/>
         <output message="zeusns:getCompressUnknownSizeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCompressUnknownSizeByLocation">
         <documentation>
            Get whether each of the named virtual servers should compress documents with no given size. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getCompressUnknownSizeByLocationRequest"/>
         <output message="zeusns:getCompressUnknownSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCompressionEnabled">
         <documentation>
            Get whether each of the named virtual servers should compress web pages before sending to the client.
         </documentation>
         
         <input message="zeusns:getCompressionEnabledRequest"/>
         <output message="zeusns:getCompressionEnabledResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCompressionEnabledByLocation">
         <documentation>
            Get whether each of the named virtual servers should compress web pages before sending to the client. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getCompressionEnabledByLocationRequest"/>
         <output message="zeusns:getCompressionEnabledByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCompressionLevel">
         <documentation>
            Get the gzip compression level, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getCompressionLevelRequest"/>
         <output message="zeusns:getCompressionLevelResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCompressionLevelByLocation">
         <documentation>
            Get the gzip compression level, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getCompressionLevelByLocationRequest"/>
         <output message="zeusns:getCompressionLevelByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCompressionMIMETypes">
         <documentation>
            Get the list of MIME types to compress, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getCompressionMIMETypesRequest"/>
         <output message="zeusns:getCompressionMIMETypesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCompressionMIMETypesByLocation">
         <documentation>
            Get the list of MIME types to compress, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getCompressionMIMETypesByLocationRequest"/>
         <output message="zeusns:getCompressionMIMETypesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCompressionMaxSize">
         <documentation>
            Get the maximum document size to compress, in bytes, for each of the named virtual servers.  A document size of '0' means 'unlimited'.
         </documentation>
         
         <input message="zeusns:getCompressionMaxSizeRequest"/>
         <output message="zeusns:getCompressionMaxSizeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCompressionMaxSizeByLocation">
         <documentation>
            Get the maximum document size to compress, in bytes, for each of the named virtual servers.  A document size of '0' means 'unlimited'. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getCompressionMaxSizeByLocationRequest"/>
         <output message="zeusns:getCompressionMaxSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCompressionMinSize">
         <documentation>
            Get the minimum document size to compress, in bytes, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getCompressionMinSizeRequest"/>
         <output message="zeusns:getCompressionMinSizeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCompressionMinSizeByLocation">
         <documentation>
            Get the minimum document size to compress, in bytes, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getCompressionMinSizeByLocationRequest"/>
         <output message="zeusns:getCompressionMinSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getConnectTimeout">
         <documentation>
            Get the time to wait for data from a new connection, in seconds, for each of the named virtual servers. If no data is received in this time, the connection will be closed.
         </documentation>
         
         <input message="zeusns:getConnectTimeoutRequest"/>
         <output message="zeusns:getConnectTimeoutResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getConnectTimeoutByLocation">
         <documentation>
            Get the time to wait for data from a new connection, in seconds, for each of the named virtual servers. If no data is received in this time, the connection will be closed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getConnectTimeoutByLocationRequest"/>
         <output message="zeusns:getConnectTimeoutByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCookieDomainRewriteMode">
         <documentation>
            Get how each of the named virtual servers should rewrite the domain portion of cookies set by a back-end web server.
         </documentation>
         
         <input message="zeusns:getCookieDomainRewriteModeRequest"/>
         <output message="zeusns:getCookieDomainRewriteModeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCookieDomainRewriteModeByLocation">
         <documentation>
            Get how each of the named virtual servers should rewrite the domain portion of cookies set by a back-end web server. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getCookieDomainRewriteModeByLocationRequest"/>
         <output message="zeusns:getCookieDomainRewriteModeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCookieNamedDomain">
         <documentation>
            Get the domain to use when rewriting cookie domains, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getCookieNamedDomainRequest"/>
         <output message="zeusns:getCookieNamedDomainResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCookieNamedDomainByLocation">
         <documentation>
            Get the domain to use when rewriting cookie domains, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getCookieNamedDomainByLocationRequest"/>
         <output message="zeusns:getCookieNamedDomainByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCookiePathRewrite">
         <documentation>
            For each of the named virtual servers, get the regex and replacement for rewriting the path portion of a cookie.
         </documentation>
         
         <input message="zeusns:getCookiePathRewriteRequest"/>
         <output message="zeusns:getCookiePathRewriteResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCookiePathRewriteByLocation">
         <documentation>
            For each of the named virtual servers, get the regex and replacement for rewriting the path portion of a cookie. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getCookiePathRewriteByLocationRequest"/>
         <output message="zeusns:getCookiePathRewriteByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCookieSecureFlagRewriteMode">
         <documentation>
            Get whether each of the named virtual servers should modify the 'secure' tag of cookies set by a back-end web server.
         </documentation>
         
         <input message="zeusns:getCookieSecureFlagRewriteModeRequest"/>
         <output message="zeusns:getCookieSecureFlagRewriteModeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCookieSecureFlagRewriteModeByLocation">
         <documentation>
            Get whether each of the named virtual servers should modify the 'secure' tag of cookies set by a back-end web server. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getCookieSecureFlagRewriteModeByLocationRequest"/>
         <output message="zeusns:getCookieSecureFlagRewriteModeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getDefaultPool">
         <documentation>
            Get the default Pool that traffic is sent to for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getDefaultPoolRequest"/>
         <output message="zeusns:getDefaultPoolResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getDefaultPoolByLocation">
         <documentation>
            Get the default Pool that traffic is sent to for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getDefaultPoolByLocationRequest"/>
         <output message="zeusns:getDefaultPoolByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getEnabled">
         <documentation>
            Get whether each of the named virtual servers is enabled (i.e. serving traffic).
         </documentation>
         
         <input message="zeusns:getEnabledRequest"/>
         <output message="zeusns:getEnabledResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getEnabledByLocation">
         <documentation>
            Get whether each of the named virtual servers is enabled (i.e. serving traffic). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getEnabledByLocationRequest"/>
         <output message="zeusns:getEnabledByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getErrorFile">
         <documentation>
            Get the file names of the error texts that each of the named virtual servers will send back to a client in case of back-end or internal errors.
         </documentation>
         
         <input message="zeusns:getErrorFileRequest"/>
         <output message="zeusns:getErrorFileResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getErrorFileByLocation">
         <documentation>
            Get the file names of the error texts that each of the named virtual servers will send back to a client in case of back-end or internal errors. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getErrorFileByLocationRequest"/>
         <output message="zeusns:getErrorFileByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFTPDataSourcePort">
         <documentation>
            Get the source port each of the named virtual servers should use for active-mode FTP data connections.  If 0, a random high port will be used, otherwise the specified port will be used.  If a port below 1024 is required you must first explicitly permit use of low ports with the ftp_data_bind_low global setting.
         </documentation>
         
         <input message="zeusns:getFTPDataSourcePortRequest"/>
         <output message="zeusns:getFTPDataSourcePortResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFTPDataSourcePortByLocation">
         <documentation>
            Get the source port each of the named virtual servers should use for active-mode FTP data connections.  If 0, a random high port will be used, otherwise the specified port will be used.  If a port below 1024 is required you must first explicitly permit use of low ports with the ftp_data_bind_low global setting. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getFTPDataSourcePortByLocationRequest"/>
         <output message="zeusns:getFTPDataSourcePortByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFTPForceClientSecure">
         <documentation>
            Get whether each of the named virtual servers should require incoming FTP data connections (from clients) to originate from the same IP address as the corresponding control connection.
         </documentation>
         
         <input message="zeusns:getFTPForceClientSecureRequest"/>
         <output message="zeusns:getFTPForceClientSecureResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFTPForceClientSecureByLocation">
         <documentation>
            Get whether each of the named virtual servers should require incoming FTP data connections (from clients) to originate from the same IP address as the corresponding control connection. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getFTPForceClientSecureByLocationRequest"/>
         <output message="zeusns:getFTPForceClientSecureByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFTPForceServerSecure">
         <documentation>
            Get whether each of the named virtual servers should require incoming FTP data connections (from nodes) to originate from the same IP address as the corresponding control connection.
         </documentation>
         
         <input message="zeusns:getFTPForceServerSecureRequest"/>
         <output message="zeusns:getFTPForceServerSecureResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFTPForceServerSecureByLocation">
         <documentation>
            Get whether each of the named virtual servers should require incoming FTP data connections (from nodes) to originate from the same IP address as the corresponding control connection. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getFTPForceServerSecureByLocationRequest"/>
         <output message="zeusns:getFTPForceServerSecureByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFTPPortRange">
         <documentation>
            Get the port range used for FTP data connections for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getFTPPortRangeRequest"/>
         <output message="zeusns:getFTPPortRangeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFTPPortRangeByLocation">
         <documentation>
            Get the port range used for FTP data connections for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getFTPPortRangeByLocationRequest"/>
         <output message="zeusns:getFTPPortRangeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFTPSSLData">
         <documentation>
            Get whether each of the named virtual servers should use SSL on the data connection as well as the control connection
         </documentation>
         
         <input message="zeusns:getFTPSSLDataRequest"/>
         <output message="zeusns:getFTPSSLDataResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFTPSSLDataByLocation">
         <documentation>
            Get whether each of the named virtual servers should use SSL on the data connection as well as the control connection This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getFTPSSLDataByLocationRequest"/>
         <output message="zeusns:getFTPSSLDataByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getHttpChunkOverheadForwarding">
         <documentation>
            Get how to handle forwarding of data that is pure HTTP chunking overhead.
         </documentation>
         
         <input message="zeusns:getHttpChunkOverheadForwardingRequest"/>
         <output message="zeusns:getHttpChunkOverheadForwardingResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getHttpChunkOverheadForwardingByLocation">
         <documentation>
            Get how to handle forwarding of data that is pure HTTP chunking overhead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getHttpChunkOverheadForwardingByLocationRequest"/>
         <output message="zeusns:getHttpChunkOverheadForwardingByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getKeepalive">
         <documentation>
            Get whether each of the named virtual servers should allow clients to maintain keepalive connections.
         </documentation>
         
         <input message="zeusns:getKeepaliveRequest"/>
         <output message="zeusns:getKeepaliveResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getKeepaliveByLocation">
         <documentation>
            Get whether each of the named virtual servers should allow clients to maintain keepalive connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getKeepaliveByLocationRequest"/>
         <output message="zeusns:getKeepaliveByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getKeepaliveTimeout">
         <documentation>
            Get the time that an idle keepalive connection should be kept open for, in seconds, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getKeepaliveTimeoutRequest"/>
         <output message="zeusns:getKeepaliveTimeoutResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getKeepaliveTimeoutByLocation">
         <documentation>
            Get the time that an idle keepalive connection should be kept open for, in seconds, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getKeepaliveTimeoutByLocationRequest"/>
         <output message="zeusns:getKeepaliveTimeoutByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getListenAddresses">
         <documentation>
            Get the specific IP addresses and hostnames that each of the named virtual servers are listening on. This will return an empty array for a virtual server if it is listening on all addresses.
         </documentation>
         
         <input message="zeusns:getListenAddressesRequest"/>
         <output message="zeusns:getListenAddressesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getListenAddressesByLocation">
         <documentation>
            Get the specific IP addresses and hostnames that each of the named virtual servers are listening on. This will return an empty array for a virtual server if it is listening on all addresses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getListenAddressesByLocationRequest"/>
         <output message="zeusns:getListenAddressesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getListenOnAllAddresses">
         <documentation>
            For each of the named virtual servers, gets whether the virtual server is listening on all IP addresses
         </documentation>
         
         <input message="zeusns:getListenOnAllAddressesRequest"/>
         <output message="zeusns:getListenOnAllAddressesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getListenOnAllAddressesByLocation">
         <documentation>
            For each of the named virtual servers, gets whether the virtual server is listening on all IP addresses This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getListenOnAllAddressesByLocationRequest"/>
         <output message="zeusns:getListenOnAllAddressesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getListenTrafficIPGroups">
         <documentation>
            Get the specific Traffic IP Groups that each named virtual server listens on. This will return an empty array for a virtual server if it is listening on all addresses.
         </documentation>
         
         <input message="zeusns:getListenTrafficIPGroupsRequest"/>
         <output message="zeusns:getListenTrafficIPGroupsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getListenTrafficIPGroupsByLocation">
         <documentation>
            Get the specific Traffic IP Groups that each named virtual server listens on. This will return an empty array for a virtual server if it is listening on all addresses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getListenTrafficIPGroupsByLocationRequest"/>
         <output message="zeusns:getListenTrafficIPGroupsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLocationDefaultRewriteMode">
         <documentation>
            Get whether each of the named virtual servers should rewrite the 'Location' header. The rewrite is only performed if the location rewrite regex didn't match.
         </documentation>
         
         <input message="zeusns:getLocationDefaultRewriteModeRequest"/>
         <output message="zeusns:getLocationDefaultRewriteModeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLocationDefaultRewriteModeByLocation">
         <documentation>
            Get whether each of the named virtual servers should rewrite the 'Location' header. The rewrite is only performed if the location rewrite regex didn't match. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getLocationDefaultRewriteModeByLocationRequest"/>
         <output message="zeusns:getLocationDefaultRewriteModeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLocationRewrite">
         <documentation>
            For each of the named virtual servers, get the regex, and replacement for rewriting any 'Location' headers.
         </documentation>
         
         <input message="zeusns:getLocationRewriteRequest"/>
         <output message="zeusns:getLocationRewriteResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLocationRewriteByLocation">
         <documentation>
            For each of the named virtual servers, get the regex, and replacement for rewriting any 'Location' headers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getLocationRewriteByLocationRequest"/>
         <output message="zeusns:getLocationRewriteByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLogClientConnectionFailures">
         <documentation>
            Get whether the virtual server will log client connection failures.
         </documentation>
         
         <input message="zeusns:getLogClientConnectionFailuresRequest"/>
         <output message="zeusns:getLogClientConnectionFailuresResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLogClientConnectionFailuresByLocation">
         <documentation>
            Get whether the virtual server will log client connection failures. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getLogClientConnectionFailuresByLocationRequest"/>
         <output message="zeusns:getLogClientConnectionFailuresByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLogEnabled">
         <documentation>
            Get whether each of the named virtual servers should log each connection to a disk on the file system.
         </documentation>
         
         <input message="zeusns:getLogEnabledRequest"/>
         <output message="zeusns:getLogEnabledResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLogEnabledByLocation">
         <documentation>
            Get whether each of the named virtual servers should log each connection to a disk on the file system. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getLogEnabledByLocationRequest"/>
         <output message="zeusns:getLogEnabledByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLogFilename">
         <documentation>
            Get the name of the file used to store request logs, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getLogFilenameRequest"/>
         <output message="zeusns:getLogFilenameResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLogFilenameByLocation">
         <documentation>
            Get the name of the file used to store request logs, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getLogFilenameByLocationRequest"/>
         <output message="zeusns:getLogFilenameByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLogFormat">
         <documentation>
            Get the log file format for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getLogFormatRequest"/>
         <output message="zeusns:getLogFormatResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLogFormatByLocation">
         <documentation>
            Get the log file format for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getLogFormatByLocationRequest"/>
         <output message="zeusns:getLogFormatByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLogSSLFailures">
         <documentation>
            Get whether the virtual server will log ssl failures.
         </documentation>
         
         <input message="zeusns:getLogSSLFailuresRequest"/>
         <output message="zeusns:getLogSSLFailuresResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLogSSLFailuresByLocation">
         <documentation>
            Get whether the virtual server will log ssl failures. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getLogSSLFailuresByLocationRequest"/>
         <output message="zeusns:getLogSSLFailuresByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLogServerConnectionFailures">
         <documentation>
            Get whether the virtual server will log server connection failures.
         </documentation>
         
         <input message="zeusns:getLogServerConnectionFailuresRequest"/>
         <output message="zeusns:getLogServerConnectionFailuresResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLogServerConnectionFailuresByLocation">
         <documentation>
            Get whether the virtual server will log server connection failures. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getLogServerConnectionFailuresByLocationRequest"/>
         <output message="zeusns:getLogServerConnectionFailuresByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMIMEAutoDetect">
         <documentation>
            Get whether each of the named virtual servers should auto-detect MIME types if the server does not provide them.
         </documentation>
         
         <input message="zeusns:getMIMEAutoDetectRequest"/>
         <output message="zeusns:getMIMEAutoDetectResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMIMEAutoDetectByLocation">
         <documentation>
            Get whether each of the named virtual servers should auto-detect MIME types if the server does not provide them. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMIMEAutoDetectByLocationRequest"/>
         <output message="zeusns:getMIMEAutoDetectByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMIMEDefaultType">
         <documentation>
            Get the MIME type that the server uses as its 'default', for each of the named virtual servers. Responses with this mime type will be auto-corrected by the virtual server if this setting is enabled.
         </documentation>
         
         <input message="zeusns:getMIMEDefaultTypeRequest"/>
         <output message="zeusns:getMIMEDefaultTypeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMIMEDefaultTypeByLocation">
         <documentation>
            Get the MIME type that the server uses as its 'default', for each of the named virtual servers. Responses with this mime type will be auto-corrected by the virtual server if this setting is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMIMEDefaultTypeByLocationRequest"/>
         <output message="zeusns:getMIMEDefaultTypeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxClientBuffer">
         <documentation>
            Get the amount of memory used to store data sent by the client, in bytes, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getMaxClientBufferRequest"/>
         <output message="zeusns:getMaxClientBufferResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxClientBufferByLocation">
         <documentation>
            Get the amount of memory used to store data sent by the client, in bytes, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaxClientBufferByLocationRequest"/>
         <output message="zeusns:getMaxClientBufferByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxServerBuffer">
         <documentation>
            Get the amount of memory used to store data returned by the server, in bytes, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getMaxServerBufferRequest"/>
         <output message="zeusns:getMaxServerBufferResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxServerBufferByLocation">
         <documentation>
            Get the amount of memory used to store data returned by the server, in bytes, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaxServerBufferByLocationRequest"/>
         <output message="zeusns:getMaxServerBufferByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNote">
         <documentation>
            Get the note for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getNoteRequest"/>
         <output message="zeusns:getNoteResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getPort">
         <documentation>
            Get the port that each of the named virtual servers listens on for incoming connections.
         </documentation>
         
         <input message="zeusns:getPortRequest"/>
         <output message="zeusns:getPortResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getPortByLocation">
         <documentation>
            Get the port that each of the named virtual servers listens on for incoming connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getPortByLocationRequest"/>
         <output message="zeusns:getPortByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getProtection">
         <documentation>
            Get the Service Protection Settings that are used to protect each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getProtectionRequest"/>
         <output message="zeusns:getProtectionResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getProtectionByLocation">
         <documentation>
            Get the Service Protection Settings that are used to protect each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getProtectionByLocationRequest"/>
         <output message="zeusns:getProtectionByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getProtocol">
         <documentation>
            Get the protocol that each of the named virtual servers uses.
         </documentation>
         
         <input message="zeusns:getProtocolRequest"/>
         <output message="zeusns:getProtocolResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getProxyClose">
         <documentation>
            Get whether each of the named virtual servers should send a FIN packet on to the back-end server when it is received from the client.  The alternative is to close the connection to the client immediately.  If the traffic manager is responding to the request itself, enabling this setting will cause the traffic manager to continue writing the response even after it has received a FIN from the client.
         </documentation>
         
         <input message="zeusns:getProxyCloseRequest"/>
         <output message="zeusns:getProxyCloseResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getProxyCloseByLocation">
         <documentation>
            Get whether each of the named virtual servers should send a FIN packet on to the back-end server when it is received from the client.  The alternative is to close the connection to the client immediately.  If the traffic manager is responding to the request itself, enabling this setting will cause the traffic manager to continue writing the response even after it has received a FIN from the client. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getProxyCloseByLocationRequest"/>
         <output message="zeusns:getProxyCloseByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRTSPPortRange">
         <documentation>
            Get the port range used for RTSP streaming data connections, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getRTSPPortRangeRequest"/>
         <output message="zeusns:getRTSPPortRangeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRTSPPortRangeByLocation">
         <documentation>
            Get the port range used for RTSP streaming data connections, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getRTSPPortRangeByLocationRequest"/>
         <output message="zeusns:getRTSPPortRangeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRTSPStreamingTimeout">
         <documentation>
            Get the time, in seconds, after which data-streams associated with RTSP connections timeout if no data is transmitted.
         </documentation>
         
         <input message="zeusns:getRTSPStreamingTimeoutRequest"/>
         <output message="zeusns:getRTSPStreamingTimeoutResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRTSPStreamingTimeoutByLocation">
         <documentation>
            Get the time, in seconds, after which data-streams associated with RTSP connections timeout if no data is transmitted. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getRTSPStreamingTimeoutByLocationRequest"/>
         <output message="zeusns:getRTSPStreamingTimeoutByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRequestSyslogEnabled">
         <documentation>
            Get whether each of the named virtual servers should log each connection to a remote syslog server.
         </documentation>
         
         <input message="zeusns:getRequestSyslogEnabledRequest"/>
         <output message="zeusns:getRequestSyslogEnabledResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRequestSyslogEnabledByLocation">
         <documentation>
            Get whether each of the named virtual servers should log each connection to a remote syslog server. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getRequestSyslogEnabledByLocationRequest"/>
         <output message="zeusns:getRequestSyslogEnabledByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRequestSyslogFormat">
         <documentation>
            Get the remote log line format for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getRequestSyslogFormatRequest"/>
         <output message="zeusns:getRequestSyslogFormatResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRequestSyslogFormatByLocation">
         <documentation>
            Get the remote log line format for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getRequestSyslogFormatByLocationRequest"/>
         <output message="zeusns:getRequestSyslogFormatByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRequestSyslogIPEndpoint">
         <documentation>
            Get the remote syslog endpoint for each of the named virtual servers
         </documentation>
         
         <input message="zeusns:getRequestSyslogIPEndpointRequest"/>
         <output message="zeusns:getRequestSyslogIPEndpointResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRequestSyslogIPEndpointByLocation">
         <documentation>
            Get the remote syslog endpoint for each of the named virtual servers This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getRequestSyslogIPEndpointByLocationRequest"/>
         <output message="zeusns:getRequestSyslogIPEndpointByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRequestSyslogMessageLenLimit">
         <documentation>
            Get syslog message length limit.
         </documentation>
         
         <input message="zeusns:getRequestSyslogMessageLenLimitRequest"/>
         <output message="zeusns:getRequestSyslogMessageLenLimitResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRequestSyslogMessageLenLimitByLocation">
         <documentation>
            Get syslog message length limit. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getRequestSyslogMessageLenLimitByLocationRequest"/>
         <output message="zeusns:getRequestSyslogMessageLenLimitByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRequestTracingEnabled">
         <documentation>
            Get whether to record a detailed list of processing history for each request.
         </documentation>
         
         <input message="zeusns:getRequestTracingEnabledRequest"/>
         <output message="zeusns:getRequestTracingEnabledResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRequestTracingEnabledByLocation">
         <documentation>
            Get whether to record a detailed list of processing history for each request. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getRequestTracingEnabledByLocationRequest"/>
         <output message="zeusns:getRequestTracingEnabledByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRequestTracingIO">
         <documentation>
            Get whether to record a detailed list of every IO event in the processing history for each request.
         </documentation>
         
         <input message="zeusns:getRequestTracingIORequest"/>
         <output message="zeusns:getRequestTracingIOResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRequestTracingIOByLocation">
         <documentation>
            Get whether to record a detailed list of every IO event in the processing history for each request. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getRequestTracingIOByLocationRequest"/>
         <output message="zeusns:getRequestTracingIOByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getResponseRules">
         <documentation>
            Get the rules that are run on server responses for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getResponseRulesRequest"/>
         <output message="zeusns:getResponseRulesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getResponseRulesByLocation">
         <documentation>
            Get the rules that are run on server responses for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getResponseRulesByLocationRequest"/>
         <output message="zeusns:getResponseRulesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRewriteSIPURI">
         <documentation>
            Get whether the Request-URI of SIP requests will be replaced with the selected back-end node's address.
         </documentation>
         
         <input message="zeusns:getRewriteSIPURIRequest"/>
         <output message="zeusns:getRewriteSIPURIResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRewriteSIPURIByLocation">
         <documentation>
            Get whether the Request-URI of SIP requests will be replaced with the selected back-end node's address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getRewriteSIPURIByLocationRequest"/>
         <output message="zeusns:getRewriteSIPURIByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRules">
         <documentation>
            Get the rules that are run on client requests for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getRulesRequest"/>
         <output message="zeusns:getRulesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRulesByLocation">
         <documentation>
            Get the rules that are run on client requests for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getRulesByLocationRequest"/>
         <output message="zeusns:getRulesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSIPDangerousRequestMode">
         <documentation>
            Get what should be done with requests that contain body data and should be routed to an external IP.
         </documentation>
         
         <input message="zeusns:getSIPDangerousRequestModeRequest"/>
         <output message="zeusns:getSIPDangerousRequestModeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSIPDangerousRequestModeByLocation">
         <documentation>
            Get what should be done with requests that contain body data and should be routed to an external IP. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSIPDangerousRequestModeByLocationRequest"/>
         <output message="zeusns:getSIPDangerousRequestModeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSIPFollowRoute">
         <documentation>
            Get whether to follow routing information in SIP requests.
         </documentation>
         
         <input message="zeusns:getSIPFollowRouteRequest"/>
         <output message="zeusns:getSIPFollowRouteResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSIPFollowRouteByLocation">
         <documentation>
            Get whether to follow routing information in SIP requests. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSIPFollowRouteByLocationRequest"/>
         <output message="zeusns:getSIPFollowRouteByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSIPMaxConnectionMemory">
         <documentation>
            Get maximum memory per connection.
         </documentation>
         
         <input message="zeusns:getSIPMaxConnectionMemoryRequest"/>
         <output message="zeusns:getSIPMaxConnectionMemoryResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSIPMaxConnectionMemoryByLocation">
         <documentation>
            Get maximum memory per connection. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSIPMaxConnectionMemoryByLocationRequest"/>
         <output message="zeusns:getSIPMaxConnectionMemoryByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSIPMode">
         <documentation>
            Get which mode of operation the SIP virtual server should run in.
         </documentation>
         
         <input message="zeusns:getSIPModeRequest"/>
         <output message="zeusns:getSIPModeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSIPModeByLocation">
         <documentation>
            Get which mode of operation the SIP virtual server should run in. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSIPModeByLocationRequest"/>
         <output message="zeusns:getSIPModeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSIPPortRange">
         <documentation>
            Get the port range used for SIP data connections, for each of the named virtual servers. This setting is only used when the SIP virtual server is using 'Full Gateway' mode.
         </documentation>
         
         <input message="zeusns:getSIPPortRangeRequest"/>
         <output message="zeusns:getSIPPortRangeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSIPPortRangeByLocation">
         <documentation>
            Get the port range used for SIP data connections, for each of the named virtual servers. This setting is only used when the SIP virtual server is using 'Full Gateway' mode. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSIPPortRangeByLocationRequest"/>
         <output message="zeusns:getSIPPortRangeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSIPStreamingTimeout">
         <documentation>
            Get the time, in seconds, after which a UDP stream will timeout if it has not seen any data.
         </documentation>
         
         <input message="zeusns:getSIPStreamingTimeoutRequest"/>
         <output message="zeusns:getSIPStreamingTimeoutResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSIPStreamingTimeoutByLocation">
         <documentation>
            Get the time, in seconds, after which a UDP stream will timeout if it has not seen any data. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSIPStreamingTimeoutByLocationRequest"/>
         <output message="zeusns:getSIPStreamingTimeoutByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSIPTimeoutMessages">
         <documentation>
            Get send a timed out response to the client and CANCEL request to the server when a transaction times out.
         </documentation>
         
         <input message="zeusns:getSIPTimeoutMessagesRequest"/>
         <output message="zeusns:getSIPTimeoutMessagesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSIPTimeoutMessagesByLocation">
         <documentation>
            Get send a timed out response to the client and CANCEL request to the server when a transaction times out. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSIPTimeoutMessagesByLocationRequest"/>
         <output message="zeusns:getSIPTimeoutMessagesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLCertificate">
         <documentation>
            Get the name of the default SSL Certificate that is used for SSL decryption for each of the named virtual servers. This is the name of an item in the SSL Certificates Catalog.
         </documentation>
         
         <input message="zeusns:getSSLCertificateRequest"/>
         <output message="zeusns:getSSLCertificateResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLCertificateByLocation">
         <documentation>
            Get the name of the default SSL Certificate that is used for SSL decryption for each of the named virtual servers. This is the name of an item in the SSL Certificates Catalog. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLCertificateByLocationRequest"/>
         <output message="zeusns:getSSLCertificateByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLClientCertificateAuthorities">
         <documentation>
            Get the certificate authorities that are trusted for validating client certificates, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getSSLClientCertificateAuthoritiesRequest"/>
         <output message="zeusns:getSSLClientCertificateAuthoritiesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLClientCertificateAuthoritiesByLocation">
         <documentation>
            Get the certificate authorities that are trusted for validating client certificates, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLClientCertificateAuthoritiesByLocationRequest"/>
         <output message="zeusns:getSSLClientCertificateAuthoritiesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLClientCertificateHeaders">
         <documentation>
            Get whether each of the named virtual servers should add HTTP headers to each request to show the data in the client certificate.
         </documentation>
         
         <input message="zeusns:getSSLClientCertificateHeadersRequest"/>
         <output message="zeusns:getSSLClientCertificateHeadersResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLClientCertificateHeadersByLocation">
         <documentation>
            Get whether each of the named virtual servers should add HTTP headers to each request to show the data in the client certificate. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLClientCertificateHeadersByLocationRequest"/>
         <output message="zeusns:getSSLClientCertificateHeadersByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLDecrypt">
         <documentation>
            Get whether each of the named virtual servers should decrypt SSL traffic.
         </documentation>
         
         <input message="zeusns:getSSLDecryptRequest"/>
         <output message="zeusns:getSSLDecryptResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLDecryptByLocation">
         <documentation>
            Get whether each of the named virtual servers should decrypt SSL traffic. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLDecryptByLocationRequest"/>
         <output message="zeusns:getSSLDecryptByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLExpectStartTLS">
         <documentation>
            Get whether each of the named virtual servers should upgrade SMTP connections to SSL using the STARTTLS command.
         </documentation>
         
         <input message="zeusns:getSSLExpectStartTLSRequest"/>
         <output message="zeusns:getSSLExpectStartTLSResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLExpectStartTLSByLocation">
         <documentation>
            Get whether each of the named virtual servers should upgrade SMTP connections to SSL using the STARTTLS command. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLExpectStartTLSByLocationRequest"/>
         <output message="zeusns:getSSLExpectStartTLSByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLHeaders">
         <documentation>
            Get whether each of the named virtual servers should add HTTP headers to each request to show SSL connection parameters.
         </documentation>
         
         <input message="zeusns:getSSLHeadersRequest"/>
         <output message="zeusns:getSSLHeadersResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLHeadersByLocation">
         <documentation>
            Get whether each of the named virtual servers should add HTTP headers to each request to show SSL connection parameters. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLHeadersByLocationRequest"/>
         <output message="zeusns:getSSLHeadersByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLLogEnabled">
         <documentation>
            This method is now obsolete. SSL logging is now done if LogConnectionFailures is enabled. Use VirtualServer.getLogConnectionFailures and VirtualServer.getLogConnection failures to control this configuration.
         </documentation>
         
         <input message="zeusns:getSSLLogEnabledRequest"/>
         <output message="zeusns:getSSLLogEnabledResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLNeverExpiringClientCertificateAuthorities">
         <documentation>
            Get the CAs for which any client certificate they validate is considered valid even if the client certificate's expiration date has passed.
         </documentation>
         
         <input message="zeusns:getSSLNeverExpiringClientCertificateAuthoritiesRequest"/>
         <output message="zeusns:getSSLNeverExpiringClientCertificateAuthoritiesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLNeverExpiringClientCertificateAuthoritiesByLocation">
         <documentation>
            Get the CAs for which any client certificate they validate is considered valid even if the client certificate's expiration date has passed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLNeverExpiringClientCertificateAuthoritiesByLocationRequest"/>
         <output message="zeusns:getSSLNeverExpiringClientCertificateAuthoritiesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLOCSPDefaults">
         <documentation>
            Get the default OCSP responder settings for all client certificates.
         </documentation>
         
         <input message="zeusns:getSSLOCSPDefaultsRequest"/>
         <output message="zeusns:getSSLOCSPDefaultsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLOCSPDefaultsByLocation">
         <documentation>
            Get the default OCSP responder settings for all client certificates. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLOCSPDefaultsByLocationRequest"/>
         <output message="zeusns:getSSLOCSPDefaultsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLOCSPIssuers">
         <documentation>
            Gets a list of mappings between Certificate Authorities and OCSP responder settings. Certificates issued by these authorities will be verified with OCSP using these settings.
         </documentation>
         
         <input message="zeusns:getSSLOCSPIssuersRequest"/>
         <output message="zeusns:getSSLOCSPIssuersResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLOCSPIssuersByLocation">
         <documentation>
            Gets a list of mappings between Certificate Authorities and OCSP responder settings. Certificates issued by these authorities will be verified with OCSP using these settings. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLOCSPIssuersByLocationRequest"/>
         <output message="zeusns:getSSLOCSPIssuersByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLOCSPMaxResponseAge">
         <documentation>
            Get the number of seconds for which an OCSP response is considered valid if it has not yet exceeded the time specified in the 'nextUpdate' field
         </documentation>
         
         <input message="zeusns:getSSLOCSPMaxResponseAgeRequest"/>
         <output message="zeusns:getSSLOCSPMaxResponseAgeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLOCSPMaxResponseAgeByLocation">
         <documentation>
            Get the number of seconds for which an OCSP response is considered valid if it has not yet exceeded the time specified in the 'nextUpdate' field This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLOCSPMaxResponseAgeByLocationRequest"/>
         <output message="zeusns:getSSLOCSPMaxResponseAgeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLOCSPStapling">
         <documentation>
            Get whether the traffic manager is allowed to provide OCSP responses for certificates as part of the handshake, if the client sends a TLS status_request extension in the ClientHello, and OCSP URIs are present in certificates used by this virtual server.
         </documentation>
         
         <input message="zeusns:getSSLOCSPStaplingRequest"/>
         <output message="zeusns:getSSLOCSPStaplingResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLOCSPStaplingByLocation">
         <documentation>
            Get whether the traffic manager is allowed to provide OCSP responses for certificates as part of the handshake, if the client sends a TLS status_request extension in the ClientHello, and OCSP URIs are present in certificates used by this virtual server. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLOCSPStaplingByLocationRequest"/>
         <output message="zeusns:getSSLOCSPStaplingByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLOCSPTimeTolerance">
         <documentation>
            Get the number of seconds outside the permitted range for which the 'thisUpdate' and 'nextUpdate' fields of an OCSP response are still considered valid
         </documentation>
         
         <input message="zeusns:getSSLOCSPTimeToleranceRequest"/>
         <output message="zeusns:getSSLOCSPTimeToleranceResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLOCSPTimeToleranceByLocation">
         <documentation>
            Get the number of seconds outside the permitted range for which the 'thisUpdate' and 'nextUpdate' fields of an OCSP response are still considered valid This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLOCSPTimeToleranceByLocationRequest"/>
         <output message="zeusns:getSSLOCSPTimeToleranceByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLOCSPTimeout">
         <documentation>
            Get the number of seconds after which OCSP requests will be timed out
         </documentation>
         
         <input message="zeusns:getSSLOCSPTimeoutRequest"/>
         <output message="zeusns:getSSLOCSPTimeoutResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLOCSPTimeoutByLocation">
         <documentation>
            Get the number of seconds after which OCSP requests will be timed out This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLOCSPTimeoutByLocationRequest"/>
         <output message="zeusns:getSSLOCSPTimeoutByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLPreferSSLv3">
         <documentation>
            Get whether to prefer SSLv3 over TLS when the client appears to support both. SSLv3 is slightly faster, but some clients don't allow SSLv3 but still send the ClientHello inside SSLv2 or SSLv3 records.
         </documentation>
         
         <input message="zeusns:getSSLPreferSSLv3Request"/>
         <output message="zeusns:getSSLPreferSSLv3Response"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLPreferSSLv3ByLocation">
         <documentation>
            Get whether to prefer SSLv3 over TLS when the client appears to support both. SSLv3 is slightly faster, but some clients don't allow SSLv3 but still send the ClientHello inside SSLv2 or SSLv3 records. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLPreferSSLv3ByLocationRequest"/>
         <output message="zeusns:getSSLPreferSSLv3ByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLRequestClientCertMode">
         <documentation>
            Get whether each of the named virtual servers should request (or require) an identifying certificate from each client.
         </documentation>
         
         <input message="zeusns:getSSLRequestClientCertModeRequest"/>
         <output message="zeusns:getSSLRequestClientCertModeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLRequestClientCertModeByLocation">
         <documentation>
            Get whether each of the named virtual servers should request (or require) an identifying certificate from each client. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLRequestClientCertModeByLocationRequest"/>
         <output message="zeusns:getSSLRequestClientCertModeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLSendCloseAlerts">
         <documentation>
            Get whether each of the named virtual servers should send a close alert when initiating SSL socket disconnections.
         </documentation>
         
         <input message="zeusns:getSSLSendCloseAlertsRequest"/>
         <output message="zeusns:getSSLSendCloseAlertsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLSendCloseAlertsByLocation">
         <documentation>
            Get whether each of the named virtual servers should send a close alert when initiating SSL socket disconnections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLSendCloseAlertsByLocationRequest"/>
         <output message="zeusns:getSSLSendCloseAlertsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLSites">
         <documentation>
            Gets a list of mappings between destination addresses and the certificate used for SSL decryption those addresses, for each of the named virtual servers. Each certificate is the name of an item in the SSL Certificates Catalog.
         </documentation>
         
         <input message="zeusns:getSSLSitesRequest"/>
         <output message="zeusns:getSSLSitesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLSitesByLocation">
         <documentation>
            Gets a list of mappings between destination addresses and the certificate used for SSL decryption those addresses, for each of the named virtual servers. Each certificate is the name of an item in the SSL Certificates Catalog. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLSitesByLocationRequest"/>
         <output message="zeusns:getSSLSitesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLTrustMagic">
         <documentation>
            Get whether each of the named virtual servers should decode extra information on the true origin of an SSL connection. This information is prefixed onto an incoming SSL connection from another traffic manager.
         </documentation>
         
         <input message="zeusns:getSSLTrustMagicRequest"/>
         <output message="zeusns:getSSLTrustMagicResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLTrustMagicByLocation">
         <documentation>
            Get whether each of the named virtual servers should decode extra information on the true origin of an SSL connection. This information is prefixed onto an incoming SSL connection from another traffic manager. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLTrustMagicByLocationRequest"/>
         <output message="zeusns:getSSLTrustMagicByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLUseOCSP">
         <documentation>
            Get whether or not the traffic manager should use OCSP to check the revocation status of client certificates
         </documentation>
         
         <input message="zeusns:getSSLUseOCSPRequest"/>
         <output message="zeusns:getSSLUseOCSPResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLUseOCSPByLocation">
         <documentation>
            Get whether or not the traffic manager should use OCSP to check the revocation status of client certificates This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLUseOCSPByLocationRequest"/>
         <output message="zeusns:getSSLUseOCSPByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getServerfirstBanner">
         <documentation>
            Get the banner that each of the named virtual servers sends to clients for server-first protocols such as POP, SMTP and IMAP.
         </documentation>
         
         <input message="zeusns:getServerfirstBannerRequest"/>
         <output message="zeusns:getServerfirstBannerResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getServerfirstBannerByLocation">
         <documentation>
            Get the banner that each of the named virtual servers sends to clients for server-first protocols such as POP, SMTP and IMAP. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getServerfirstBannerByLocationRequest"/>
         <output message="zeusns:getServerfirstBannerByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getServiceLevelMonitoring">
         <documentation>
            Get the Service Level Monitoring class that each of the named virtual servers uses.
         </documentation>
         
         <input message="zeusns:getServiceLevelMonitoringRequest"/>
         <output message="zeusns:getServiceLevelMonitoringResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getServiceLevelMonitoringByLocation">
         <documentation>
            Get the Service Level Monitoring class that each of the named virtual servers uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getServiceLevelMonitoringByLocationRequest"/>
         <output message="zeusns:getServiceLevelMonitoringByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSipTransactionTimeout">
         <documentation>
            Get the time after which an incomplete transaction should be discarded, in seconds, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getSipTransactionTimeoutRequest"/>
         <output message="zeusns:getSipTransactionTimeoutResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSipTransactionTimeoutByLocation">
         <documentation>
            Get the time after which an incomplete transaction should be discarded, in seconds, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSipTransactionTimeoutByLocationRequest"/>
         <output message="zeusns:getSipTransactionTimeoutByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getTimeout">
         <documentation>
            Get the time to wait for data on an already established connection, in seconds, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getTimeoutRequest"/>
         <output message="zeusns:getTimeoutResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getTimeoutByLocation">
         <documentation>
            Get the time to wait for data on an already established connection, in seconds, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getTimeoutByLocationRequest"/>
         <output message="zeusns:getTimeoutByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getUDPEndpointPersistence">
         <documentation>
            Get whether each of the named virtual servers should send the UDP datagrams from the same IP and port to the same node in the pool if there's an existing UDP transaction. Although it's not always guaranteed as while making a decision to reuse same node, traffic manager can also apply other protocol specific filtering e.g CallID matching for SIP packets in addition to IP and port matching.
         </documentation>
         
         <input message="zeusns:getUDPEndpointPersistenceRequest"/>
         <output message="zeusns:getUDPEndpointPersistenceResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getUDPEndpointPersistenceByLocation">
         <documentation>
            Get whether each of the named virtual servers should send the UDP datagrams from the same IP and port to the same node in the pool if there's an existing UDP transaction. Although it's not always guaranteed as while making a decision to reuse same node, traffic manager can also apply other protocol specific filtering e.g CallID matching for SIP packets in addition to IP and port matching. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getUDPEndpointPersistenceByLocationRequest"/>
         <output message="zeusns:getUDPEndpointPersistenceByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getUDPResponseDatagramsExpected">
         <documentation>
            Get the expected number of UDP datagrams in the response, for each of the named virtual servers.  For simple request/response protocols a value of '1' should be used. If set to -1, the connection will not be discarded until the udp_timeout is reached.
         </documentation>
         
         <input message="zeusns:getUDPResponseDatagramsExpectedRequest"/>
         <output message="zeusns:getUDPResponseDatagramsExpectedResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getUDPResponseDatagramsExpectedByLocation">
         <documentation>
            Get the expected number of UDP datagrams in the response, for each of the named virtual servers.  For simple request/response protocols a value of '1' should be used. If set to -1, the connection will not be discarded until the udp_timeout is reached. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getUDPResponseDatagramsExpectedByLocationRequest"/>
         <output message="zeusns:getUDPResponseDatagramsExpectedByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getUDPTimeout">
         <documentation>
            Get the time after which an idle UDP connection should be discarded and resources reclaimed, in seconds, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:getUDPTimeoutRequest"/>
         <output message="zeusns:getUDPTimeoutResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getUDPTimeoutByLocation">
         <documentation>
            Get the time after which an idle UDP connection should be discarded and resources reclaimed, in seconds, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getUDPTimeoutByLocationRequest"/>
         <output message="zeusns:getUDPTimeoutByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getUseNagle">
         <documentation>
            Get whether Nagle's algorithm should be used for TCP connections.
         </documentation>
         
         <input message="zeusns:getUseNagleRequest"/>
         <output message="zeusns:getUseNagleResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getUseNagleByLocation">
         <documentation>
            Get whether Nagle's algorithm should be used for TCP connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getUseNagleByLocationRequest"/>
         <output message="zeusns:getUseNagleByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getVirtualServerNames">
         <documentation>
            Gets the names of all the configured virtual servers.
         </documentation>
         
         <input message="zeusns:getVirtualServerNamesRequest"/>
         <output message="zeusns:getVirtualServerNamesResponse"/>
      </operation>
      
      <operation name="getWebcacheControlOut">
         <documentation>
            Get the Cache-Control header that should be sent with cached HTTP responses.
         </documentation>
         
         <input message="zeusns:getWebcacheControlOutRequest"/>
         <output message="zeusns:getWebcacheControlOutResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWebcacheControlOutByLocation">
         <documentation>
            Get the Cache-Control header that should be sent with cached HTTP responses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getWebcacheControlOutByLocationRequest"/>
         <output message="zeusns:getWebcacheControlOutByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWebcacheEnabled">
         <documentation>
            Get whether each of the named virtual servers should attempt to cache web server responses.
         </documentation>
         
         <input message="zeusns:getWebcacheEnabledRequest"/>
         <output message="zeusns:getWebcacheEnabledResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWebcacheEnabledByLocation">
         <documentation>
            Get whether each of the named virtual servers should attempt to cache web server responses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getWebcacheEnabledByLocationRequest"/>
         <output message="zeusns:getWebcacheEnabledByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWebcacheErrorpageTime">
         <documentation>
            Get the time periods that each of the named virtual servers should cache error pages for.
         </documentation>
         
         <input message="zeusns:getWebcacheErrorpageTimeRequest"/>
         <output message="zeusns:getWebcacheErrorpageTimeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWebcacheErrorpageTimeByLocation">
         <documentation>
            Get the time periods that each of the named virtual servers should cache error pages for. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getWebcacheErrorpageTimeByLocationRequest"/>
         <output message="zeusns:getWebcacheErrorpageTimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWebcacheRefreshTime">
         <documentation>
            Get the time periods that each of the named virtual servers should consider re-fetching cached pages in.
         </documentation>
         
         <input message="zeusns:getWebcacheRefreshTimeRequest"/>
         <output message="zeusns:getWebcacheRefreshTimeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWebcacheRefreshTimeByLocation">
         <documentation>
            Get the time periods that each of the named virtual servers should consider re-fetching cached pages in. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getWebcacheRefreshTimeByLocationRequest"/>
         <output message="zeusns:getWebcacheRefreshTimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWebcacheTime">
         <documentation>
            Get the time periods that each of the named virtual servers should cache web pages for.
         </documentation>
         
         <input message="zeusns:getWebcacheTimeRequest"/>
         <output message="zeusns:getWebcacheTimeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWebcacheTimeByLocation">
         <documentation>
            Get the time periods that each of the named virtual servers should cache web pages for. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getWebcacheTimeByLocationRequest"/>
         <output message="zeusns:getWebcacheTimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="removeCompressionMIMETypes">
         <documentation>
            For each named virtual server, remove new MIME types from the list of types to compress.
         </documentation>
         
         <input message="zeusns:removeCompressionMIMETypesRequest"/>
         <output message="zeusns:removeCompressionMIMETypesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeCompressionMIMETypesByLocation">
         <documentation>
            For each named virtual server, remove new MIME types from the list of types to compress. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:removeCompressionMIMETypesByLocationRequest"/>
         <output message="zeusns:removeCompressionMIMETypesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeFTPPortRange">
         <documentation>
            Allow FTP connections to use any free ports, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:removeFTPPortRangeRequest"/>
         <output message="zeusns:removeFTPPortRangeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeFTPPortRangeByLocation">
         <documentation>
            Allow FTP connections to use any free ports, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:removeFTPPortRangeByLocationRequest"/>
         <output message="zeusns:removeFTPPortRangeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeRTSPPortRange">
         <documentation>
            Allow any free ports to be used for RTSP connections, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:removeRTSPPortRangeRequest"/>
         <output message="zeusns:removeRTSPPortRangeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeRTSPPortRangeByLocation">
         <documentation>
            Allow any free ports to be used for RTSP connections, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:removeRTSPPortRangeByLocationRequest"/>
         <output message="zeusns:removeRTSPPortRangeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeResponseRules">
         <documentation>
            For each of the named virtual servers, remove rules from the list that are run on server responses.
         </documentation>
         
         <input message="zeusns:removeResponseRulesRequest"/>
         <output message="zeusns:removeResponseRulesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeResponseRulesByLocation">
         <documentation>
            For each of the named virtual servers, remove rules from the list that are run on server responses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:removeResponseRulesByLocationRequest"/>
         <output message="zeusns:removeResponseRulesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeRules">
         <documentation>
            For each of the named virtual servers, remove rules from the list of rules that are run on client requests.
         </documentation>
         
         <input message="zeusns:removeRulesRequest"/>
         <output message="zeusns:removeRulesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeRulesByLocation">
         <documentation>
            For each of the named virtual servers, remove rules from the list of rules that are run on client requests. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:removeRulesByLocationRequest"/>
         <output message="zeusns:removeRulesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeSIPPortRange">
         <documentation>
            Allow any free ports to be used for SIP connections, for each of the named virtual servers. This setting is only used when the SIP virtual server is using 'Full Gateway' mode.
         </documentation>
         
         <input message="zeusns:removeSIPPortRangeRequest"/>
         <output message="zeusns:removeSIPPortRangeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeSIPPortRangeByLocation">
         <documentation>
            Allow any free ports to be used for SIP connections, for each of the named virtual servers. This setting is only used when the SIP virtual server is using 'Full Gateway' mode. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:removeSIPPortRangeByLocationRequest"/>
         <output message="zeusns:removeSIPPortRangeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeSSLClientCertificateAuthorities">
         <documentation>
            Remove certificate authorities for validating client certificates for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:removeSSLClientCertificateAuthoritiesRequest"/>
         <output message="zeusns:removeSSLClientCertificateAuthoritiesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeSSLClientCertificateAuthoritiesByLocation">
         <documentation>
            Remove certificate authorities for validating client certificates for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:removeSSLClientCertificateAuthoritiesByLocationRequest"/>
         <output message="zeusns:removeSSLClientCertificateAuthoritiesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeSSLNeverExpiringClientCertificateAuthorities">
         <documentation>
            Remove CAs for which any client certificate they validate is considered valid even if the client certificate's expiration date has passed, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:removeSSLNeverExpiringClientCertificateAuthoritiesRequest"/>
         <output message="zeusns:removeSSLNeverExpiringClientCertificateAuthoritiesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeSSLNeverExpiringClientCertificateAuthoritiesByLocation">
         <documentation>
            Remove CAs for which any client certificate they validate is considered valid even if the client certificate's expiration date has passed, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:removeSSLNeverExpiringClientCertificateAuthoritiesByLocationRequest"/>
         <output message="zeusns:removeSSLNeverExpiringClientCertificateAuthoritiesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeSSLOCSPIssuers">
         <documentation>
            Removes mappings between OCSP responder settings for the specified Certificate authorities
         </documentation>
         
         <input message="zeusns:removeSSLOCSPIssuersRequest"/>
         <output message="zeusns:removeSSLOCSPIssuersResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeSSLOCSPIssuersByLocation">
         <documentation>
            Removes mappings between OCSP responder settings for the specified Certificate authorities This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:removeSSLOCSPIssuersByLocationRequest"/>
         <output message="zeusns:removeSSLOCSPIssuersByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="renameVirtualServer">
         <documentation>
            Rename each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:renameVirtualServerRequest"/>
         <output message="zeusns:renameVirtualServerResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
      </operation>
      
      <operation name="setAddClusterClientIPHeader">
         <documentation>
            Set whether an 'X-Cluster-Client-Ip' header should be added to each HTTP request, for each of the named virtual servers. The 'X-Cluster-Client-Ip' header contains the client's IP address.
         </documentation>
         
         <input message="zeusns:setAddClusterClientIPHeaderRequest"/>
         <output message="zeusns:setAddClusterClientIPHeaderResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAddClusterClientIPHeaderByLocation">
         <documentation>
            Set whether an 'X-Cluster-Client-Ip' header should be added to each HTTP request, for each of the named virtual servers. The 'X-Cluster-Client-Ip' header contains the client's IP address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAddClusterClientIPHeaderByLocationRequest"/>
         <output message="zeusns:setAddClusterClientIPHeaderByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAddXForwardedForHeader">
         <documentation>
            Set whether the remote client's IP address should be appended to the X-Forwarded-For header. The 'X-Forwarded-For' header contains the client's IP address.
         </documentation>
         
         <input message="zeusns:setAddXForwardedForHeaderRequest"/>
         <output message="zeusns:setAddXForwardedForHeaderResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAddXForwardedForHeaderByLocation">
         <documentation>
            Set whether the remote client's IP address should be appended to the X-Forwarded-For header. The 'X-Forwarded-For' header contains the client's IP address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAddXForwardedForHeaderByLocationRequest"/>
         <output message="zeusns:setAddXForwardedForHeaderByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAddXForwardedProtoHeader">
         <documentation>
            Set whether an 'X-Forwarded-Proto' header should be added to each HTTP request, for each of the named virtual servers. The 'X-Forwarded-Proto' header contains the protocol the client used to connect to the traffic manager
         </documentation>
         
         <input message="zeusns:setAddXForwardedProtoHeaderRequest"/>
         <output message="zeusns:setAddXForwardedProtoHeaderResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAddXForwardedProtoHeaderByLocation">
         <documentation>
            Set whether an 'X-Forwarded-Proto' header should be added to each HTTP request, for each of the named virtual servers. The 'X-Forwarded-Proto' header contains the protocol the client used to connect to the traffic manager This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAddXForwardedProtoHeaderByLocationRequest"/>
         <output message="zeusns:setAddXForwardedProtoHeaderByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setApplicationFirewallEnabled">
         <documentation>
            For each of the named virtual servers, enable or disable the Stingray Application Firewall.
         </documentation>
         
         <input message="zeusns:setApplicationFirewallEnabledRequest"/>
         <output message="zeusns:setApplicationFirewallEnabledResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="setApplicationFirewallEnabledByLocation">
         <documentation>
            For each of the named virtual servers, enable or disable the Stingray Application Firewall. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setApplicationFirewallEnabledByLocationRequest"/>
         <output message="zeusns:setApplicationFirewallEnabledByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="setAptimizerEnabled">
         <documentation>
            Set whether each of the named virtual servers should aptimize web content.
         </documentation>
         
         <input message="zeusns:setAptimizerEnabledRequest"/>
         <output message="zeusns:setAptimizerEnabledResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAptimizerEnabledByLocation">
         <documentation>
            Set whether each of the named virtual servers should aptimize web content. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAptimizerEnabledByLocationRequest"/>
         <output message="zeusns:setAptimizerEnabledByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setBandwidthClass">
         <documentation>
            Set the Bandwidth Class that each of the named virtual servers uses.
         </documentation>
         
         <input message="zeusns:setBandwidthClassRequest"/>
         <output message="zeusns:setBandwidthClassResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setBandwidthClassByLocation">
         <documentation>
            Set the Bandwidth Class that each of the named virtual servers uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setBandwidthClassByLocationRequest"/>
         <output message="zeusns:setBandwidthClassByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCompressUnknownSize">
         <documentation>
            Set whether each of the named virtual servers should compress documents with no given size.
         </documentation>
         
         <input message="zeusns:setCompressUnknownSizeRequest"/>
         <output message="zeusns:setCompressUnknownSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCompressUnknownSizeByLocation">
         <documentation>
            Set whether each of the named virtual servers should compress documents with no given size. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setCompressUnknownSizeByLocationRequest"/>
         <output message="zeusns:setCompressUnknownSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCompressionEnabled">
         <documentation>
            Set whether each of the named virtual servers should compress web pages before sending to the client.
         </documentation>
         
         <input message="zeusns:setCompressionEnabledRequest"/>
         <output message="zeusns:setCompressionEnabledResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCompressionEnabledByLocation">
         <documentation>
            Set whether each of the named virtual servers should compress web pages before sending to the client. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setCompressionEnabledByLocationRequest"/>
         <output message="zeusns:setCompressionEnabledByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCompressionLevel">
         <documentation>
            Set the gzip compression level, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setCompressionLevelRequest"/>
         <output message="zeusns:setCompressionLevelResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCompressionLevelByLocation">
         <documentation>
            Set the gzip compression level, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setCompressionLevelByLocationRequest"/>
         <output message="zeusns:setCompressionLevelByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCompressionMIMETypes">
         <documentation>
            Set the list of MIME types to compress, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setCompressionMIMETypesRequest"/>
         <output message="zeusns:setCompressionMIMETypesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCompressionMIMETypesByLocation">
         <documentation>
            Set the list of MIME types to compress, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setCompressionMIMETypesByLocationRequest"/>
         <output message="zeusns:setCompressionMIMETypesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCompressionMaxSize">
         <documentation>
            Set the maximum document size to compress, in bytes, for each of the named virtual servers.  A document size of '0' means 'unlimited'.
         </documentation>
         
         <input message="zeusns:setCompressionMaxSizeRequest"/>
         <output message="zeusns:setCompressionMaxSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCompressionMaxSizeByLocation">
         <documentation>
            Set the maximum document size to compress, in bytes, for each of the named virtual servers.  A document size of '0' means 'unlimited'. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setCompressionMaxSizeByLocationRequest"/>
         <output message="zeusns:setCompressionMaxSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCompressionMinSize">
         <documentation>
            Set the minimum document size to compress, in bytes, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setCompressionMinSizeRequest"/>
         <output message="zeusns:setCompressionMinSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCompressionMinSizeByLocation">
         <documentation>
            Set the minimum document size to compress, in bytes, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setCompressionMinSizeByLocationRequest"/>
         <output message="zeusns:setCompressionMinSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setConnectTimeout">
         <documentation>
            Set the time to wait for data from a new connection, in seconds, for each of the named virtual servers. If no data is received in this time, the connection will be closed.
         </documentation>
         
         <input message="zeusns:setConnectTimeoutRequest"/>
         <output message="zeusns:setConnectTimeoutResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setConnectTimeoutByLocation">
         <documentation>
            Set the time to wait for data from a new connection, in seconds, for each of the named virtual servers. If no data is received in this time, the connection will be closed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setConnectTimeoutByLocationRequest"/>
         <output message="zeusns:setConnectTimeoutByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCookieDomainRewriteMode">
         <documentation>
            Set how each of the named virtual servers should rewrite the domain portion of cookies set by a back-end web server.
         </documentation>
         
         <input message="zeusns:setCookieDomainRewriteModeRequest"/>
         <output message="zeusns:setCookieDomainRewriteModeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCookieDomainRewriteModeByLocation">
         <documentation>
            Set how each of the named virtual servers should rewrite the domain portion of cookies set by a back-end web server. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setCookieDomainRewriteModeByLocationRequest"/>
         <output message="zeusns:setCookieDomainRewriteModeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCookieNamedDomain">
         <documentation>
            Set the domain to use when rewriting cookie domains, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setCookieNamedDomainRequest"/>
         <output message="zeusns:setCookieNamedDomainResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCookieNamedDomainByLocation">
         <documentation>
            Set the domain to use when rewriting cookie domains, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setCookieNamedDomainByLocationRequest"/>
         <output message="zeusns:setCookieNamedDomainByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCookiePathRewrite">
         <documentation>
            For each of the named virtual servers, set the regex, and replacement for rewriting the path portion of a cookie.
         </documentation>
         
         <input message="zeusns:setCookiePathRewriteRequest"/>
         <output message="zeusns:setCookiePathRewriteResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCookiePathRewriteByLocation">
         <documentation>
            For each of the named virtual servers, set the regex, and replacement for rewriting the path portion of a cookie. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setCookiePathRewriteByLocationRequest"/>
         <output message="zeusns:setCookiePathRewriteByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCookieSecureFlagRewriteMode">
         <documentation>
            Set whether each of the named virtual servers should modify the 'secure' tag of cookies set by a back-end web server.
         </documentation>
         
         <input message="zeusns:setCookieSecureFlagRewriteModeRequest"/>
         <output message="zeusns:setCookieSecureFlagRewriteModeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCookieSecureFlagRewriteModeByLocation">
         <documentation>
            Set whether each of the named virtual servers should modify the 'secure' tag of cookies set by a back-end web server. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setCookieSecureFlagRewriteModeByLocationRequest"/>
         <output message="zeusns:setCookieSecureFlagRewriteModeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setDefaultPool">
         <documentation>
            Set the default Pool that traffic is sent to for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setDefaultPoolRequest"/>
         <output message="zeusns:setDefaultPoolResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setDefaultPoolByLocation">
         <documentation>
            Set the default Pool that traffic is sent to for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setDefaultPoolByLocationRequest"/>
         <output message="zeusns:setDefaultPoolByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setEnabled">
         <documentation>
            Set whether each of the named virtual servers is enabled (i.e. serving traffic).
         </documentation>
         
         <input message="zeusns:setEnabledRequest"/>
         <output message="zeusns:setEnabledResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setEnabledByLocation">
         <documentation>
            Set whether each of the named virtual servers is enabled (i.e. serving traffic). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setEnabledByLocationRequest"/>
         <output message="zeusns:setEnabledByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setErrorFile">
         <documentation>
            Set the file names of the error texts that each of the named virtual servers will send back to a client in case of back-end or internal errors.
         </documentation>
         
         <input message="zeusns:setErrorFileRequest"/>
         <output message="zeusns:setErrorFileResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setErrorFileByLocation">
         <documentation>
            Set the file names of the error texts that each of the named virtual servers will send back to a client in case of back-end or internal errors. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setErrorFileByLocationRequest"/>
         <output message="zeusns:setErrorFileByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFTPDataSourcePort">
         <documentation>
            Set the source port each of the named virtual servers should use for active-mode FTP data connections.  If 0, a random high port will be used, otherwise the specified port will be used.  If a port below 1024 is required you must first explicitly permit use of low ports with the ftp_data_bind_low global setting.
         </documentation>
         
         <input message="zeusns:setFTPDataSourcePortRequest"/>
         <output message="zeusns:setFTPDataSourcePortResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFTPDataSourcePortByLocation">
         <documentation>
            Set the source port each of the named virtual servers should use for active-mode FTP data connections.  If 0, a random high port will be used, otherwise the specified port will be used.  If a port below 1024 is required you must first explicitly permit use of low ports with the ftp_data_bind_low global setting. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setFTPDataSourcePortByLocationRequest"/>
         <output message="zeusns:setFTPDataSourcePortByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFTPForceClientSecure">
         <documentation>
            Set whether each of the named virtual servers should require incoming FTP data connections (from clients) to originate from the same IP address as the corresponding control connection.
         </documentation>
         
         <input message="zeusns:setFTPForceClientSecureRequest"/>
         <output message="zeusns:setFTPForceClientSecureResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFTPForceClientSecureByLocation">
         <documentation>
            Set whether each of the named virtual servers should require incoming FTP data connections (from clients) to originate from the same IP address as the corresponding control connection. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setFTPForceClientSecureByLocationRequest"/>
         <output message="zeusns:setFTPForceClientSecureByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFTPForceServerSecure">
         <documentation>
            Set whether each of the named virtual servers should require incoming FTP data connections (from nodes) to originate from the same IP address as the corresponding control connection.
         </documentation>
         
         <input message="zeusns:setFTPForceServerSecureRequest"/>
         <output message="zeusns:setFTPForceServerSecureResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFTPForceServerSecureByLocation">
         <documentation>
            Set whether each of the named virtual servers should require incoming FTP data connections (from nodes) to originate from the same IP address as the corresponding control connection. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setFTPForceServerSecureByLocationRequest"/>
         <output message="zeusns:setFTPForceServerSecureByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFTPPortRange">
         <documentation>
            Set the port range used for FTP data connections for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setFTPPortRangeRequest"/>
         <output message="zeusns:setFTPPortRangeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFTPPortRangeByLocation">
         <documentation>
            Set the port range used for FTP data connections for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setFTPPortRangeByLocationRequest"/>
         <output message="zeusns:setFTPPortRangeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFTPSSLData">
         <documentation>
            Set whether each of the named virtual servers should use SSL on the data connection as well as the control connection
         </documentation>
         
         <input message="zeusns:setFTPSSLDataRequest"/>
         <output message="zeusns:setFTPSSLDataResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFTPSSLDataByLocation">
         <documentation>
            Set whether each of the named virtual servers should use SSL on the data connection as well as the control connection This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setFTPSSLDataByLocationRequest"/>
         <output message="zeusns:setFTPSSLDataByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setHttpChunkOverheadForwarding">
         <documentation>
            Set how to handle forwarding of data that is pure HTTP chunking overhead.
         </documentation>
         
         <input message="zeusns:setHttpChunkOverheadForwardingRequest"/>
         <output message="zeusns:setHttpChunkOverheadForwardingResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setHttpChunkOverheadForwardingByLocation">
         <documentation>
            Set how to handle forwarding of data that is pure HTTP chunking overhead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setHttpChunkOverheadForwardingByLocationRequest"/>
         <output message="zeusns:setHttpChunkOverheadForwardingByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setKeepalive">
         <documentation>
            Set whether each of the named virtual servers should allow clients to maintain keepalive connections.
         </documentation>
         
         <input message="zeusns:setKeepaliveRequest"/>
         <output message="zeusns:setKeepaliveResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setKeepaliveByLocation">
         <documentation>
            Set whether each of the named virtual servers should allow clients to maintain keepalive connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setKeepaliveByLocationRequest"/>
         <output message="zeusns:setKeepaliveByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setKeepaliveTimeout">
         <documentation>
            Set the time that an idle keepalive connection should be kept open for, in seconds, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setKeepaliveTimeoutRequest"/>
         <output message="zeusns:setKeepaliveTimeoutResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setKeepaliveTimeoutByLocation">
         <documentation>
            Set the time that an idle keepalive connection should be kept open for, in seconds, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setKeepaliveTimeoutByLocationRequest"/>
         <output message="zeusns:setKeepaliveTimeoutByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setListenAddresses">
         <documentation>
            Set the specific IP addresses and hostnames for each named virtual server to listen on.
         </documentation>
         
         <input message="zeusns:setListenAddressesRequest"/>
         <output message="zeusns:setListenAddressesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setListenAddressesByLocation">
         <documentation>
            Set the specific IP addresses and hostnames for each named virtual server to listen on. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setListenAddressesByLocationRequest"/>
         <output message="zeusns:setListenAddressesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setListenOnAllAddresses">
         <documentation>
            Make each of the named virtual servers listen on all IP addresses.
         </documentation>
         
         <input message="zeusns:setListenOnAllAddressesRequest"/>
         <output message="zeusns:setListenOnAllAddressesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setListenOnAllAddressesByLocation">
         <documentation>
            Make each of the named virtual servers listen on all IP addresses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setListenOnAllAddressesByLocationRequest"/>
         <output message="zeusns:setListenOnAllAddressesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setListenTrafficIPGroups">
         <documentation>
            For each of the named virtual servers, set specific Traffic IP Groups for it to listen on.
         </documentation>
         
         <input message="zeusns:setListenTrafficIPGroupsRequest"/>
         <output message="zeusns:setListenTrafficIPGroupsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setListenTrafficIPGroupsByLocation">
         <documentation>
            For each of the named virtual servers, set specific Traffic IP Groups for it to listen on. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setListenTrafficIPGroupsByLocationRequest"/>
         <output message="zeusns:setListenTrafficIPGroupsByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLocationDefaultRewriteMode">
         <documentation>
            Set whether each of the named virtual servers should rewrite the 'Location' header. The rewrite is only performed if the location rewrite regex didn't match.
         </documentation>
         
         <input message="zeusns:setLocationDefaultRewriteModeRequest"/>
         <output message="zeusns:setLocationDefaultRewriteModeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLocationDefaultRewriteModeByLocation">
         <documentation>
            Set whether each of the named virtual servers should rewrite the 'Location' header. The rewrite is only performed if the location rewrite regex didn't match. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setLocationDefaultRewriteModeByLocationRequest"/>
         <output message="zeusns:setLocationDefaultRewriteModeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLocationRewrite">
         <documentation>
            For each of the named virtual servers, set the regex, and replacement for rewriting any 'Location' headers.
         </documentation>
         
         <input message="zeusns:setLocationRewriteRequest"/>
         <output message="zeusns:setLocationRewriteResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLocationRewriteByLocation">
         <documentation>
            For each of the named virtual servers, set the regex, and replacement for rewriting any 'Location' headers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setLocationRewriteByLocationRequest"/>
         <output message="zeusns:setLocationRewriteByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLogClientConnectionFailures">
         <documentation>
            Set whether the virtual server will log client connection failures.
         </documentation>
         
         <input message="zeusns:setLogClientConnectionFailuresRequest"/>
         <output message="zeusns:setLogClientConnectionFailuresResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLogClientConnectionFailuresByLocation">
         <documentation>
            Set whether the virtual server will log client connection failures. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setLogClientConnectionFailuresByLocationRequest"/>
         <output message="zeusns:setLogClientConnectionFailuresByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLogEnabled">
         <documentation>
            Set whether each of the named virtual servers should log each connection to a disk on the file system.
         </documentation>
         
         <input message="zeusns:setLogEnabledRequest"/>
         <output message="zeusns:setLogEnabledResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLogEnabledByLocation">
         <documentation>
            Set whether each of the named virtual servers should log each connection to a disk on the file system. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setLogEnabledByLocationRequest"/>
         <output message="zeusns:setLogEnabledByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLogFilename">
         <documentation>
            Set the name of the file used to store request logs, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setLogFilenameRequest"/>
         <output message="zeusns:setLogFilenameResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLogFilenameByLocation">
         <documentation>
            Set the name of the file used to store request logs, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setLogFilenameByLocationRequest"/>
         <output message="zeusns:setLogFilenameByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLogFormat">
         <documentation>
            Set the log file format for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setLogFormatRequest"/>
         <output message="zeusns:setLogFormatResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLogFormatByLocation">
         <documentation>
            Set the log file format for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setLogFormatByLocationRequest"/>
         <output message="zeusns:setLogFormatByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLogSSLFailures">
         <documentation>
            Set whether the virtual server will log ssl failures.
         </documentation>
         
         <input message="zeusns:setLogSSLFailuresRequest"/>
         <output message="zeusns:setLogSSLFailuresResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLogSSLFailuresByLocation">
         <documentation>
            Set whether the virtual server will log ssl failures. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setLogSSLFailuresByLocationRequest"/>
         <output message="zeusns:setLogSSLFailuresByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLogServerConnectionFailures">
         <documentation>
            Set whether the virtual server will log server connection failures.
         </documentation>
         
         <input message="zeusns:setLogServerConnectionFailuresRequest"/>
         <output message="zeusns:setLogServerConnectionFailuresResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLogServerConnectionFailuresByLocation">
         <documentation>
            Set whether the virtual server will log server connection failures. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setLogServerConnectionFailuresByLocationRequest"/>
         <output message="zeusns:setLogServerConnectionFailuresByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMIMEAutoDetect">
         <documentation>
            Set whether each of the named virtual servers should auto-detect MIME types if the server does not provide them.
         </documentation>
         
         <input message="zeusns:setMIMEAutoDetectRequest"/>
         <output message="zeusns:setMIMEAutoDetectResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMIMEAutoDetectByLocation">
         <documentation>
            Set whether each of the named virtual servers should auto-detect MIME types if the server does not provide them. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMIMEAutoDetectByLocationRequest"/>
         <output message="zeusns:setMIMEAutoDetectByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMIMEDefaultType">
         <documentation>
            Set the MIME type that the server uses as its 'default', for each of the named virtual servers. Responses with this mime type will be auto-corrected by the virtual server if this setting is enabled.
         </documentation>
         
         <input message="zeusns:setMIMEDefaultTypeRequest"/>
         <output message="zeusns:setMIMEDefaultTypeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMIMEDefaultTypeByLocation">
         <documentation>
            Set the MIME type that the server uses as its 'default', for each of the named virtual servers. Responses with this mime type will be auto-corrected by the virtual server if this setting is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMIMEDefaultTypeByLocationRequest"/>
         <output message="zeusns:setMIMEDefaultTypeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxClientBuffer">
         <documentation>
            Set the amount of memory used to store data sent by the client, in bytes, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setMaxClientBufferRequest"/>
         <output message="zeusns:setMaxClientBufferResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxClientBufferByLocation">
         <documentation>
            Set the amount of memory used to store data sent by the client, in bytes, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaxClientBufferByLocationRequest"/>
         <output message="zeusns:setMaxClientBufferByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxServerBuffer">
         <documentation>
            Set the amount of memory used to store data returned by the server, in bytes, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setMaxServerBufferRequest"/>
         <output message="zeusns:setMaxServerBufferResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxServerBufferByLocation">
         <documentation>
            Set the amount of memory used to store data returned by the server, in bytes, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaxServerBufferByLocationRequest"/>
         <output message="zeusns:setMaxServerBufferByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNote">
         <documentation>
            Set the note for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setNoteRequest"/>
         <output message="zeusns:setNoteResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setPort">
         <documentation>
            Set the port that each of the named virtual servers listens on for incoming connections.
         </documentation>
         
         <input message="zeusns:setPortRequest"/>
         <output message="zeusns:setPortResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setPortByLocation">
         <documentation>
            Set the port that each of the named virtual servers listens on for incoming connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setPortByLocationRequest"/>
         <output message="zeusns:setPortByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setProtection">
         <documentation>
            Set the Service Protection Settings that are used to protect each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setProtectionRequest"/>
         <output message="zeusns:setProtectionResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setProtectionByLocation">
         <documentation>
            Set the Service Protection Settings that are used to protect each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setProtectionByLocationRequest"/>
         <output message="zeusns:setProtectionByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setProtocol">
         <documentation>
            Set the protocol that each of the named virtual servers uses.
         </documentation>
         
         <input message="zeusns:setProtocolRequest"/>
         <output message="zeusns:setProtocolResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setProxyClose">
         <documentation>
            Set whether each of the named virtual servers should send a FIN packet on to the back-end server when it is received from the client.  The alternative is to close the connection to the client immediately.  If the traffic manager is responding to the request itself, enabling this setting will cause the traffic manager to continue writing the response even after it has received a FIN from the client.
         </documentation>
         
         <input message="zeusns:setProxyCloseRequest"/>
         <output message="zeusns:setProxyCloseResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setProxyCloseByLocation">
         <documentation>
            Set whether each of the named virtual servers should send a FIN packet on to the back-end server when it is received from the client.  The alternative is to close the connection to the client immediately.  If the traffic manager is responding to the request itself, enabling this setting will cause the traffic manager to continue writing the response even after it has received a FIN from the client. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setProxyCloseByLocationRequest"/>
         <output message="zeusns:setProxyCloseByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRTSPPortRange">
         <documentation>
            Set the port range used for RTSP streaming data connections for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setRTSPPortRangeRequest"/>
         <output message="zeusns:setRTSPPortRangeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRTSPPortRangeByLocation">
         <documentation>
            Set the port range used for RTSP streaming data connections for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setRTSPPortRangeByLocationRequest"/>
         <output message="zeusns:setRTSPPortRangeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRTSPStreamingTimeout">
         <documentation>
            Set the time, in seconds, after which data-streams associated with RTSP connections timeout if no data is transmitted.
         </documentation>
         
         <input message="zeusns:setRTSPStreamingTimeoutRequest"/>
         <output message="zeusns:setRTSPStreamingTimeoutResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRTSPStreamingTimeoutByLocation">
         <documentation>
            Set the time, in seconds, after which data-streams associated with RTSP connections timeout if no data is transmitted. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setRTSPStreamingTimeoutByLocationRequest"/>
         <output message="zeusns:setRTSPStreamingTimeoutByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRequestSyslogEnabled">
         <documentation>
            Set whether each of the named virtual servers should log each connection to a remote syslog server.
         </documentation>
         
         <input message="zeusns:setRequestSyslogEnabledRequest"/>
         <output message="zeusns:setRequestSyslogEnabledResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRequestSyslogEnabledByLocation">
         <documentation>
            Set whether each of the named virtual servers should log each connection to a remote syslog server. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setRequestSyslogEnabledByLocationRequest"/>
         <output message="zeusns:setRequestSyslogEnabledByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRequestSyslogFormat">
         <documentation>
            Set the remote log line format for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setRequestSyslogFormatRequest"/>
         <output message="zeusns:setRequestSyslogFormatResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRequestSyslogFormatByLocation">
         <documentation>
            Set the remote log line format for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setRequestSyslogFormatByLocationRequest"/>
         <output message="zeusns:setRequestSyslogFormatByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRequestSyslogIPEndpoint">
         <documentation>
            Set the remote syslog endpoint for each of the named virtual servers
         </documentation>
         
         <input message="zeusns:setRequestSyslogIPEndpointRequest"/>
         <output message="zeusns:setRequestSyslogIPEndpointResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRequestSyslogIPEndpointByLocation">
         <documentation>
            Set the remote syslog endpoint for each of the named virtual servers This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setRequestSyslogIPEndpointByLocationRequest"/>
         <output message="zeusns:setRequestSyslogIPEndpointByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRequestSyslogMessageLenLimit">
         <documentation>
            Set syslog message length limit.
         </documentation>
         
         <input message="zeusns:setRequestSyslogMessageLenLimitRequest"/>
         <output message="zeusns:setRequestSyslogMessageLenLimitResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRequestSyslogMessageLenLimitByLocation">
         <documentation>
            Set syslog message length limit. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setRequestSyslogMessageLenLimitByLocationRequest"/>
         <output message="zeusns:setRequestSyslogMessageLenLimitByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRequestTracingEnabled">
         <documentation>
            Set whether to record a detailed list of processing history for each request.
         </documentation>
         
         <input message="zeusns:setRequestTracingEnabledRequest"/>
         <output message="zeusns:setRequestTracingEnabledResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRequestTracingEnabledByLocation">
         <documentation>
            Set whether to record a detailed list of processing history for each request. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setRequestTracingEnabledByLocationRequest"/>
         <output message="zeusns:setRequestTracingEnabledByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRequestTracingIO">
         <documentation>
            Set whether to record a detailed list of every IO event in the processing history for each request.
         </documentation>
         
         <input message="zeusns:setRequestTracingIORequest"/>
         <output message="zeusns:setRequestTracingIOResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRequestTracingIOByLocation">
         <documentation>
            Set whether to record a detailed list of every IO event in the processing history for each request. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setRequestTracingIOByLocationRequest"/>
         <output message="zeusns:setRequestTracingIOByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setResponseRules">
         <documentation>
            Set the rules that are run on server responses for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setResponseRulesRequest"/>
         <output message="zeusns:setResponseRulesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setResponseRulesByLocation">
         <documentation>
            Set the rules that are run on server responses for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setResponseRulesByLocationRequest"/>
         <output message="zeusns:setResponseRulesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRewriteSIPURI">
         <documentation>
            Set whether the Request-URI of SIP requests will be replaced with the selected back-end node's address.
         </documentation>
         
         <input message="zeusns:setRewriteSIPURIRequest"/>
         <output message="zeusns:setRewriteSIPURIResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRewriteSIPURIByLocation">
         <documentation>
            Set whether the Request-URI of SIP requests will be replaced with the selected back-end node's address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setRewriteSIPURIByLocationRequest"/>
         <output message="zeusns:setRewriteSIPURIByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRules">
         <documentation>
            Set the rules that are run on client requests for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setRulesRequest"/>
         <output message="zeusns:setRulesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRulesByLocation">
         <documentation>
            Set the rules that are run on client requests for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setRulesByLocationRequest"/>
         <output message="zeusns:setRulesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSIPDangerousRequestMode">
         <documentation>
            Set what should be done with requests that contain body data and should be routed to an external IP.
         </documentation>
         
         <input message="zeusns:setSIPDangerousRequestModeRequest"/>
         <output message="zeusns:setSIPDangerousRequestModeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSIPDangerousRequestModeByLocation">
         <documentation>
            Set what should be done with requests that contain body data and should be routed to an external IP. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSIPDangerousRequestModeByLocationRequest"/>
         <output message="zeusns:setSIPDangerousRequestModeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSIPFollowRoute">
         <documentation>
            Set whether to follow routing information in SIP requests.
         </documentation>
         
         <input message="zeusns:setSIPFollowRouteRequest"/>
         <output message="zeusns:setSIPFollowRouteResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSIPFollowRouteByLocation">
         <documentation>
            Set whether to follow routing information in SIP requests. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSIPFollowRouteByLocationRequest"/>
         <output message="zeusns:setSIPFollowRouteByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSIPMaxConnectionMemory">
         <documentation>
            Set maximum memory per connection.
         </documentation>
         
         <input message="zeusns:setSIPMaxConnectionMemoryRequest"/>
         <output message="zeusns:setSIPMaxConnectionMemoryResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSIPMaxConnectionMemoryByLocation">
         <documentation>
            Set maximum memory per connection. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSIPMaxConnectionMemoryByLocationRequest"/>
         <output message="zeusns:setSIPMaxConnectionMemoryByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSIPMode">
         <documentation>
            Set which mode of operation the SIP virtual server should run in.
         </documentation>
         
         <input message="zeusns:setSIPModeRequest"/>
         <output message="zeusns:setSIPModeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSIPModeByLocation">
         <documentation>
            Set which mode of operation the SIP virtual server should run in. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSIPModeByLocationRequest"/>
         <output message="zeusns:setSIPModeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSIPPortRange">
         <documentation>
            Set the port range used for SIP data connections for each of the named virtual servers. This setting is only used when the SIP virtual server is using 'Full Gateway' mode.
         </documentation>
         
         <input message="zeusns:setSIPPortRangeRequest"/>
         <output message="zeusns:setSIPPortRangeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSIPPortRangeByLocation">
         <documentation>
            Set the port range used for SIP data connections for each of the named virtual servers. This setting is only used when the SIP virtual server is using 'Full Gateway' mode. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSIPPortRangeByLocationRequest"/>
         <output message="zeusns:setSIPPortRangeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSIPStreamingTimeout">
         <documentation>
            Set the time, in seconds, after which a UDP stream will timeout if it has not seen any data.
         </documentation>
         
         <input message="zeusns:setSIPStreamingTimeoutRequest"/>
         <output message="zeusns:setSIPStreamingTimeoutResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSIPStreamingTimeoutByLocation">
         <documentation>
            Set the time, in seconds, after which a UDP stream will timeout if it has not seen any data. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSIPStreamingTimeoutByLocationRequest"/>
         <output message="zeusns:setSIPStreamingTimeoutByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSIPTimeoutMessages">
         <documentation>
            Set send a timed out response to the client and CANCEL request to the server when a transaction times out.
         </documentation>
         
         <input message="zeusns:setSIPTimeoutMessagesRequest"/>
         <output message="zeusns:setSIPTimeoutMessagesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSIPTimeoutMessagesByLocation">
         <documentation>
            Set send a timed out response to the client and CANCEL request to the server when a transaction times out. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSIPTimeoutMessagesByLocationRequest"/>
         <output message="zeusns:setSIPTimeoutMessagesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLCertificate">
         <documentation>
            Set the name of the default SSL Certificate that is used for SSL decryption for each of the named virtual servers. This is the name of an item in the SSL Certificates Catalog. You must call this function to set an SSL Certificate before turning on SSL Decryption.
         </documentation>
         
         <input message="zeusns:setSSLCertificateRequest"/>
         <output message="zeusns:setSSLCertificateResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
      </operation>
      
      <operation name="setSSLCertificateByLocation">
         <documentation>
            Set the name of the default SSL Certificate that is used for SSL decryption for each of the named virtual servers. This is the name of an item in the SSL Certificates Catalog. You must call this function to set an SSL Certificate before turning on SSL Decryption. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLCertificateByLocationRequest"/>
         <output message="zeusns:setSSLCertificateByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
      </operation>
      
      <operation name="setSSLClientCertificateAuthorities">
         <documentation>
            Set the certificate authorities that are trusted for validating client certificates, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setSSLClientCertificateAuthoritiesRequest"/>
         <output message="zeusns:setSSLClientCertificateAuthoritiesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLClientCertificateAuthoritiesByLocation">
         <documentation>
            Set the certificate authorities that are trusted for validating client certificates, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLClientCertificateAuthoritiesByLocationRequest"/>
         <output message="zeusns:setSSLClientCertificateAuthoritiesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLClientCertificateHeaders">
         <documentation>
            Set whether each of the named virtual servers should add HTTP headers to each request to show the data in the client certificate.
         </documentation>
         
         <input message="zeusns:setSSLClientCertificateHeadersRequest"/>
         <output message="zeusns:setSSLClientCertificateHeadersResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLClientCertificateHeadersByLocation">
         <documentation>
            Set whether each of the named virtual servers should add HTTP headers to each request to show the data in the client certificate. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLClientCertificateHeadersByLocationRequest"/>
         <output message="zeusns:setSSLClientCertificateHeadersByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLDecrypt">
         <documentation>
            Sets whether each of the named virtual servers should decrypt SSL traffic. This function will error unless an SSL Certificate has previously been set using setSSLCertificate.
         </documentation>
         
         <input message="zeusns:setSSLDecryptRequest"/>
         <output message="zeusns:setSSLDecryptResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLDecryptByLocation">
         <documentation>
            Sets whether each of the named virtual servers should decrypt SSL traffic. This function will error unless an SSL Certificate has previously been set using setSSLCertificate. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLDecryptByLocationRequest"/>
         <output message="zeusns:setSSLDecryptByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLExpectStartTLS">
         <documentation>
            Set whether each of the named virtual servers should upgrade SMTP connections to SSL using the STARTTLS command.
         </documentation>
         
         <input message="zeusns:setSSLExpectStartTLSRequest"/>
         <output message="zeusns:setSSLExpectStartTLSResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLExpectStartTLSByLocation">
         <documentation>
            Set whether each of the named virtual servers should upgrade SMTP connections to SSL using the STARTTLS command. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLExpectStartTLSByLocationRequest"/>
         <output message="zeusns:setSSLExpectStartTLSByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLHeaders">
         <documentation>
            Set whether each of the named virtual servers should add HTTP headers to each request to show SSL connection parameters.
         </documentation>
         
         <input message="zeusns:setSSLHeadersRequest"/>
         <output message="zeusns:setSSLHeadersResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLHeadersByLocation">
         <documentation>
            Set whether each of the named virtual servers should add HTTP headers to each request to show SSL connection parameters. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLHeadersByLocationRequest"/>
         <output message="zeusns:setSSLHeadersByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLLogEnabled">
         <documentation>
            This method is now obsolete. SSL logging is now done if LogConnectionFailures is enabled. Use VirtualServer.getLogConnectionFailures and VirtualServer.getLogConnection failures to control this configuration.
         </documentation>
         
         <input message="zeusns:setSSLLogEnabledRequest"/>
         <output message="zeusns:setSSLLogEnabledResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLNeverExpiringClientCertificateAuthorities">
         <documentation>
            Set the CAs for which any client certificate they validate is considered valid even if the client certificate's expiration date has passed.
         </documentation>
         
         <input message="zeusns:setSSLNeverExpiringClientCertificateAuthoritiesRequest"/>
         <output message="zeusns:setSSLNeverExpiringClientCertificateAuthoritiesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLNeverExpiringClientCertificateAuthoritiesByLocation">
         <documentation>
            Set the CAs for which any client certificate they validate is considered valid even if the client certificate's expiration date has passed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLNeverExpiringClientCertificateAuthoritiesByLocationRequest"/>
         <output message="zeusns:setSSLNeverExpiringClientCertificateAuthoritiesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLOCSPDefaults">
         <documentation>
            Set the default OCSP responder settings for all client certificates.
         </documentation>
         
         <input message="zeusns:setSSLOCSPDefaultsRequest"/>
         <output message="zeusns:setSSLOCSPDefaultsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLOCSPDefaultsByLocation">
         <documentation>
            Set the default OCSP responder settings for all client certificates. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLOCSPDefaultsByLocationRequest"/>
         <output message="zeusns:setSSLOCSPDefaultsByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLOCSPIssuers">
         <documentation>
            Sets a list of mappings between Certificate Authorities and OCSP responder settings. Certificates issued by these authorities will be verified with OCSP using these settings.
         </documentation>
         
         <input message="zeusns:setSSLOCSPIssuersRequest"/>
         <output message="zeusns:setSSLOCSPIssuersResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLOCSPIssuersByLocation">
         <documentation>
            Sets a list of mappings between Certificate Authorities and OCSP responder settings. Certificates issued by these authorities will be verified with OCSP using these settings. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLOCSPIssuersByLocationRequest"/>
         <output message="zeusns:setSSLOCSPIssuersByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLOCSPMaxResponseAge">
         <documentation>
            Set the number of seconds for which an OCSP response is considered valid if it has not yet exceeded the time specified in the 'nextUpdate' field
         </documentation>
         
         <input message="zeusns:setSSLOCSPMaxResponseAgeRequest"/>
         <output message="zeusns:setSSLOCSPMaxResponseAgeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLOCSPMaxResponseAgeByLocation">
         <documentation>
            Set the number of seconds for which an OCSP response is considered valid if it has not yet exceeded the time specified in the 'nextUpdate' field This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLOCSPMaxResponseAgeByLocationRequest"/>
         <output message="zeusns:setSSLOCSPMaxResponseAgeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLOCSPStapling">
         <documentation>
            Set whether the traffic manager is allowed to provide OCSP responses for certificates as part of the handshake, if the client sends a TLS status_request extension in the ClientHello, and OCSP URIs are present in certificates used by this virtual server.
         </documentation>
         
         <input message="zeusns:setSSLOCSPStaplingRequest"/>
         <output message="zeusns:setSSLOCSPStaplingResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLOCSPStaplingByLocation">
         <documentation>
            Set whether the traffic manager is allowed to provide OCSP responses for certificates as part of the handshake, if the client sends a TLS status_request extension in the ClientHello, and OCSP URIs are present in certificates used by this virtual server. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLOCSPStaplingByLocationRequest"/>
         <output message="zeusns:setSSLOCSPStaplingByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLOCSPTimeTolerance">
         <documentation>
            Set the number of seconds outside the permitted range for which the 'thisUpdate' and 'nextUpdate' fields of an OCSP response are still considered valid
         </documentation>
         
         <input message="zeusns:setSSLOCSPTimeToleranceRequest"/>
         <output message="zeusns:setSSLOCSPTimeToleranceResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLOCSPTimeToleranceByLocation">
         <documentation>
            Set the number of seconds outside the permitted range for which the 'thisUpdate' and 'nextUpdate' fields of an OCSP response are still considered valid This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLOCSPTimeToleranceByLocationRequest"/>
         <output message="zeusns:setSSLOCSPTimeToleranceByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLOCSPTimeout">
         <documentation>
            Set the number of seconds after which OCSP requests will be timed out
         </documentation>
         
         <input message="zeusns:setSSLOCSPTimeoutRequest"/>
         <output message="zeusns:setSSLOCSPTimeoutResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLOCSPTimeoutByLocation">
         <documentation>
            Set the number of seconds after which OCSP requests will be timed out This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLOCSPTimeoutByLocationRequest"/>
         <output message="zeusns:setSSLOCSPTimeoutByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLPreferSSLv3">
         <documentation>
            Set whether to prefer SSLv3 over TLS when the client appears to support both. SSLv3 is slightly faster, but some clients don't allow SSLv3 but still send the ClientHello inside SSLv2 or SSLv3 records.
         </documentation>
         
         <input message="zeusns:setSSLPreferSSLv3Request"/>
         <output message="zeusns:setSSLPreferSSLv3Response"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLPreferSSLv3ByLocation">
         <documentation>
            Set whether to prefer SSLv3 over TLS when the client appears to support both. SSLv3 is slightly faster, but some clients don't allow SSLv3 but still send the ClientHello inside SSLv2 or SSLv3 records. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLPreferSSLv3ByLocationRequest"/>
         <output message="zeusns:setSSLPreferSSLv3ByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLRequestClientCertMode">
         <documentation>
            Set whether each of the named virtual servers should request (or require) an identifying certificate from each client.
         </documentation>
         
         <input message="zeusns:setSSLRequestClientCertModeRequest"/>
         <output message="zeusns:setSSLRequestClientCertModeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLRequestClientCertModeByLocation">
         <documentation>
            Set whether each of the named virtual servers should request (or require) an identifying certificate from each client. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLRequestClientCertModeByLocationRequest"/>
         <output message="zeusns:setSSLRequestClientCertModeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLSendCloseAlerts">
         <documentation>
            Set whether each of the named virtual servers should send a close alert when initiating SSL socket disconnections.
         </documentation>
         
         <input message="zeusns:setSSLSendCloseAlertsRequest"/>
         <output message="zeusns:setSSLSendCloseAlertsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLSendCloseAlertsByLocation">
         <documentation>
            Set whether each of the named virtual servers should send a close alert when initiating SSL socket disconnections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLSendCloseAlertsByLocationRequest"/>
         <output message="zeusns:setSSLSendCloseAlertsByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLTrustMagic">
         <documentation>
            Set whether each of the named virtual servers should decode extra information on the true origin of an SSL connection. This information is prefixed onto an incoming SSL connection from another traffic manager.
         </documentation>
         
         <input message="zeusns:setSSLTrustMagicRequest"/>
         <output message="zeusns:setSSLTrustMagicResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLTrustMagicByLocation">
         <documentation>
            Set whether each of the named virtual servers should decode extra information on the true origin of an SSL connection. This information is prefixed onto an incoming SSL connection from another traffic manager. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLTrustMagicByLocationRequest"/>
         <output message="zeusns:setSSLTrustMagicByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLUseOCSP">
         <documentation>
            Set whether or not the traffic manager should use OCSP to check the revocation status of client certificates
         </documentation>
         
         <input message="zeusns:setSSLUseOCSPRequest"/>
         <output message="zeusns:setSSLUseOCSPResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLUseOCSPByLocation">
         <documentation>
            Set whether or not the traffic manager should use OCSP to check the revocation status of client certificates This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLUseOCSPByLocationRequest"/>
         <output message="zeusns:setSSLUseOCSPByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setServerfirstBanner">
         <documentation>
            Set the banner that each of the named virtual servers sends to clients for server-first protocols such as POP, SMTP and IMAP.
         </documentation>
         
         <input message="zeusns:setServerfirstBannerRequest"/>
         <output message="zeusns:setServerfirstBannerResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setServerfirstBannerByLocation">
         <documentation>
            Set the banner that each of the named virtual servers sends to clients for server-first protocols such as POP, SMTP and IMAP. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setServerfirstBannerByLocationRequest"/>
         <output message="zeusns:setServerfirstBannerByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setServiceLevelMonitoring">
         <documentation>
            Set the Service Level Monitoring class that each of the named virtual servers uses.
         </documentation>
         
         <input message="zeusns:setServiceLevelMonitoringRequest"/>
         <output message="zeusns:setServiceLevelMonitoringResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setServiceLevelMonitoringByLocation">
         <documentation>
            Set the Service Level Monitoring class that each of the named virtual servers uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setServiceLevelMonitoringByLocationRequest"/>
         <output message="zeusns:setServiceLevelMonitoringByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSipTransactionTimeout">
         <documentation>
            Set the time after which an incomplete transaction should be discarded, in seconds, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setSipTransactionTimeoutRequest"/>
         <output message="zeusns:setSipTransactionTimeoutResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSipTransactionTimeoutByLocation">
         <documentation>
            Set the time after which an incomplete transaction should be discarded, in seconds, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSipTransactionTimeoutByLocationRequest"/>
         <output message="zeusns:setSipTransactionTimeoutByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setTimeout">
         <documentation>
            Set the time to wait for data on an already established connection, in seconds, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setTimeoutRequest"/>
         <output message="zeusns:setTimeoutResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setTimeoutByLocation">
         <documentation>
            Set the time to wait for data on an already established connection, in seconds, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setTimeoutByLocationRequest"/>
         <output message="zeusns:setTimeoutByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setUDPEndpointPersistence">
         <documentation>
            Set whether each of the named virtual servers should send the UDP datagrams from the same IP and port to the same node in the pool if there's an existing UDP transaction. Although it's not always guaranteed as while making a decision to reuse same node, traffic manager can also apply other protocol specific filtering e.g CallID matching for SIP packets in addition to IP and port matching.
         </documentation>
         
         <input message="zeusns:setUDPEndpointPersistenceRequest"/>
         <output message="zeusns:setUDPEndpointPersistenceResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setUDPEndpointPersistenceByLocation">
         <documentation>
            Set whether each of the named virtual servers should send the UDP datagrams from the same IP and port to the same node in the pool if there's an existing UDP transaction. Although it's not always guaranteed as while making a decision to reuse same node, traffic manager can also apply other protocol specific filtering e.g CallID matching for SIP packets in addition to IP and port matching. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setUDPEndpointPersistenceByLocationRequest"/>
         <output message="zeusns:setUDPEndpointPersistenceByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setUDPResponseDatagramsExpected">
         <documentation>
            Set the expected number of UDP datagrams in the response, for each of the named virtual servers.  For simple request/response protocols a value of '1' should be used. If set to -1, the connection will not be discarded until the udp_timeout is reached.
         </documentation>
         
         <input message="zeusns:setUDPResponseDatagramsExpectedRequest"/>
         <output message="zeusns:setUDPResponseDatagramsExpectedResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setUDPResponseDatagramsExpectedByLocation">
         <documentation>
            Set the expected number of UDP datagrams in the response, for each of the named virtual servers.  For simple request/response protocols a value of '1' should be used. If set to -1, the connection will not be discarded until the udp_timeout is reached. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setUDPResponseDatagramsExpectedByLocationRequest"/>
         <output message="zeusns:setUDPResponseDatagramsExpectedByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setUDPTimeout">
         <documentation>
            Set the time after which an idle UDP connection should be discarded and resources reclaimed, in seconds, for each of the named virtual servers.
         </documentation>
         
         <input message="zeusns:setUDPTimeoutRequest"/>
         <output message="zeusns:setUDPTimeoutResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setUDPTimeoutByLocation">
         <documentation>
            Set the time after which an idle UDP connection should be discarded and resources reclaimed, in seconds, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setUDPTimeoutByLocationRequest"/>
         <output message="zeusns:setUDPTimeoutByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setUseNagle">
         <documentation>
            Set whether Nagle's algorithm should be used for TCP connections.
         </documentation>
         
         <input message="zeusns:setUseNagleRequest"/>
         <output message="zeusns:setUseNagleResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setUseNagleByLocation">
         <documentation>
            Set whether Nagle's algorithm should be used for TCP connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setUseNagleByLocationRequest"/>
         <output message="zeusns:setUseNagleByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheControlOut">
         <documentation>
            Set the Cache-Control header that should be sent with cached HTTP responses.
         </documentation>
         
         <input message="zeusns:setWebcacheControlOutRequest"/>
         <output message="zeusns:setWebcacheControlOutResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheControlOutByLocation">
         <documentation>
            Set the Cache-Control header that should be sent with cached HTTP responses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setWebcacheControlOutByLocationRequest"/>
         <output message="zeusns:setWebcacheControlOutByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheEnabled">
         <documentation>
            Set whether each of the named virtual servers should attempt to cache web server responses.
         </documentation>
         
         <input message="zeusns:setWebcacheEnabledRequest"/>
         <output message="zeusns:setWebcacheEnabledResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheEnabledByLocation">
         <documentation>
            Set whether each of the named virtual servers should attempt to cache web server responses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setWebcacheEnabledByLocationRequest"/>
         <output message="zeusns:setWebcacheEnabledByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheErrorpageTime">
         <documentation>
            Set the time periods that each of the named virtual servers should cache error pages for.
         </documentation>
         
         <input message="zeusns:setWebcacheErrorpageTimeRequest"/>
         <output message="zeusns:setWebcacheErrorpageTimeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheErrorpageTimeByLocation">
         <documentation>
            Set the time periods that each of the named virtual servers should cache error pages for. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setWebcacheErrorpageTimeByLocationRequest"/>
         <output message="zeusns:setWebcacheErrorpageTimeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheRefreshTime">
         <documentation>
            Set the time periods that each of the named virtual servers should consider re-fetching cached pages in.
         </documentation>
         
         <input message="zeusns:setWebcacheRefreshTimeRequest"/>
         <output message="zeusns:setWebcacheRefreshTimeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheRefreshTimeByLocation">
         <documentation>
            Set the time periods that each of the named virtual servers should consider re-fetching cached pages in. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setWebcacheRefreshTimeByLocationRequest"/>
         <output message="zeusns:setWebcacheRefreshTimeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheTime">
         <documentation>
            Set the time periods that each of the named virtual servers should cache web pages for.
         </documentation>
         
         <input message="zeusns:setWebcacheTimeRequest"/>
         <output message="zeusns:setWebcacheTimeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheTimeByLocation">
         <documentation>
            Set the time periods that each of the named virtual servers should cache web pages for. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setWebcacheTimeByLocationRequest"/>
         <output message="zeusns:setWebcacheTimeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
   </portType>
   
   <binding name="VirtualServerBinding" type="zeusns:VirtualServerPort">
      <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
      <operation name="addCompressionMIMETypes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/addCompressionMIMETypes"/>
         <documentation>
            For each named virtual server, add new MIME types to the list of types to compress.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addCompressionMIMETypesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/addCompressionMIMETypesByLocation"/>
         <documentation>
            For each named virtual server, add new MIME types to the list of types to compress. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addResponseRules">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/addResponseRules"/>
         <documentation>
            Add new rules to be run on server responses for each of the named virtual servers. New rules are run after existing rules. If any of the rules are already configured to run, then they are enabled and flags are set to the values passed in.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addResponseRulesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/addResponseRulesByLocation"/>
         <documentation>
            Add new rules to be run on server responses for each of the named virtual servers. New rules are run after existing rules. If any of the rules are already configured to run, then they are enabled and flags are set to the values passed in. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addRules">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/addRules"/>
         <documentation>
            Add new rules to be run on client requests for each of the named virtual servers. New rules are run after existing rules. If any of the rules are already configured to run, then they are enabled and flags are set to the values passed in.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addRulesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/addRulesByLocation"/>
         <documentation>
            Add new rules to be run on client requests for each of the named virtual servers. New rules are run after existing rules. If any of the rules are already configured to run, then they are enabled and flags are set to the values passed in. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addSSLClientCertificateAuthorities">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/addSSLClientCertificateAuthorities"/>
         <documentation>
            Add new certificate authorities for validating client certificates for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addSSLClientCertificateAuthoritiesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/addSSLClientCertificateAuthoritiesByLocation"/>
         <documentation>
            Add new certificate authorities for validating client certificates for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addSSLNeverExpiringClientCertificateAuthorities">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/addSSLNeverExpiringClientCertificateAuthorities"/>
         <documentation>
            Add CAs for which any client certificate they validate is considered valid even if the client certificate's expiration date has passed, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addSSLNeverExpiringClientCertificateAuthoritiesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/addSSLNeverExpiringClientCertificateAuthoritiesByLocation"/>
         <documentation>
            Add CAs for which any client certificate they validate is considered valid even if the client certificate's expiration date has passed, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addSSLOCSPIssuers">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/addSSLOCSPIssuers"/>
         <documentation>
            Adds mappings between Certificate Authorities and OCSP responder settings. Certificates issued by these authorities will be verified with OCSP using these settings.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addSSLOCSPIssuersByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/addSSLOCSPIssuersByLocation"/>
         <documentation>
            Adds mappings between Certificate Authorities and OCSP responder settings. Certificates issued by these authorities will be verified with OCSP using these settings. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addSSLSites">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/addSSLSites"/>
         <documentation>
            Adds the specified SSLSite objects to the named virtual servers. These objects are mappings between destination addresses and the certificate used for SSL decryption those addresses. Each certificate is the name of an item in the SSL Certificates Catalog.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addSSLSitesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/addSSLSitesByLocation"/>
         <documentation>
            Adds the specified SSLSite objects to the named virtual servers. These objects are mappings between destination addresses and the certificate used for SSL decryption those addresses. Each certificate is the name of an item in the SSL Certificates Catalog. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addVirtualServer">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/addVirtualServer"/>
         <documentation>
            Add each virtual servers, using the provided BasicInfo.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="copyVirtualServer">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/copyVirtualServer"/>
         <documentation>
            Rename each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="deleteSSLSites">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/deleteSSLSites"/>
         <documentation>
            Deletes the SSLSite objects that act on the IP addresses in the site_ips array for each of the named virtual servers. These objects are mappings between destination addresses and the certificate used for SSL decryption those addresses. Each certificate is the name of an item in the SSL Certificates Catalog.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="deleteSSLSitesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/deleteSSLSitesByLocation"/>
         <documentation>
            Deletes the SSLSite objects that act on the IP addresses in the site_ips array for each of the named virtual servers. These objects are mappings between destination addresses and the certificate used for SSL decryption those addresses. Each certificate is the name of an item in the SSL Certificates Catalog. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="deleteVirtualServer">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/deleteVirtualServer"/>
         <documentation>
            Delete each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="editSSLSites">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/editSSLSites"/>
         <documentation>
            Edits the SSLSite objects that act on the IP addresses in the site_ips array for each of the named virtual servers. These objects are mappings between destination addresses and the certificate used for SSL decryption those addresses. Each certificate is the name of an item in the SSL Certificates Catalog.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="editSSLSitesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/editSSLSitesByLocation"/>
         <documentation>
            Edits the SSLSite objects that act on the IP addresses in the site_ips array for each of the named virtual servers. These objects are mappings between destination addresses and the certificate used for SSL decryption those addresses. Each certificate is the name of an item in the SSL Certificates Catalog. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAddClusterClientIPHeader">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getAddClusterClientIPHeader"/>
         <documentation>
            Get whether an 'X-Cluster-Client-Ip' header should be added to each HTTP request, for each of the named virtual servers. The 'X-Cluster-Client-Ip' header contains the client's IP address.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAddClusterClientIPHeaderByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getAddClusterClientIPHeaderByLocation"/>
         <documentation>
            Get whether an 'X-Cluster-Client-Ip' header should be added to each HTTP request, for each of the named virtual servers. The 'X-Cluster-Client-Ip' header contains the client's IP address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAddXForwardedForHeader">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getAddXForwardedForHeader"/>
         <documentation>
            Get whether the remote client's IP address should be appended to the X-Forwarded-For header. The 'X-Forwarded-For' header contains the client's IP address.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAddXForwardedForHeaderByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getAddXForwardedForHeaderByLocation"/>
         <documentation>
            Get whether the remote client's IP address should be appended to the X-Forwarded-For header. The 'X-Forwarded-For' header contains the client's IP address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAddXForwardedProtoHeader">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getAddXForwardedProtoHeader"/>
         <documentation>
            Get whether an 'X-Forwarded-Proto' header should be added to each HTTP request, for each of the named virtual servers. The 'X-Forwarded-Proto' header contains the protocol the client used to connect to the traffic manager
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAddXForwardedProtoHeaderByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getAddXForwardedProtoHeaderByLocation"/>
         <documentation>
            Get whether an 'X-Forwarded-Proto' header should be added to each HTTP request, for each of the named virtual servers. The 'X-Forwarded-Proto' header contains the protocol the client used to connect to the traffic manager This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAptimizerEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getAptimizerEnabled"/>
         <documentation>
            Get whether each of the named virtual servers should aptimize web content.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAptimizerEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getAptimizerEnabledByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should aptimize web content. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getBandwidthClass">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getBandwidthClass"/>
         <documentation>
            Get the Bandwidth Class that each of the named virtual servers uses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getBandwidthClassByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getBandwidthClassByLocation"/>
         <documentation>
            Get the Bandwidth Class that each of the named virtual servers uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getBasicInfo">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getBasicInfo"/>
         <documentation>
            Get the basic information for each of the named virtual servers. This information includes the port, the protocol the virtual server handles and the default pool for the traffic.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getBasicInfoByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getBasicInfoByLocation"/>
         <documentation>
            Get the basic information for each of the named virtual servers. This information includes the port, the protocol the virtual server handles and the default pool for the traffic. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCompressUnknownSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCompressUnknownSize"/>
         <documentation>
            Get whether each of the named virtual servers should compress documents with no given size.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCompressUnknownSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCompressUnknownSizeByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should compress documents with no given size. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCompressionEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCompressionEnabled"/>
         <documentation>
            Get whether each of the named virtual servers should compress web pages before sending to the client.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCompressionEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCompressionEnabledByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should compress web pages before sending to the client. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCompressionLevel">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCompressionLevel"/>
         <documentation>
            Get the gzip compression level, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCompressionLevelByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCompressionLevelByLocation"/>
         <documentation>
            Get the gzip compression level, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCompressionMIMETypes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCompressionMIMETypes"/>
         <documentation>
            Get the list of MIME types to compress, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCompressionMIMETypesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCompressionMIMETypesByLocation"/>
         <documentation>
            Get the list of MIME types to compress, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCompressionMaxSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCompressionMaxSize"/>
         <documentation>
            Get the maximum document size to compress, in bytes, for each of the named virtual servers.  A document size of '0' means 'unlimited'.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCompressionMaxSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCompressionMaxSizeByLocation"/>
         <documentation>
            Get the maximum document size to compress, in bytes, for each of the named virtual servers.  A document size of '0' means 'unlimited'. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCompressionMinSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCompressionMinSize"/>
         <documentation>
            Get the minimum document size to compress, in bytes, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCompressionMinSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCompressionMinSizeByLocation"/>
         <documentation>
            Get the minimum document size to compress, in bytes, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getConnectTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getConnectTimeout"/>
         <documentation>
            Get the time to wait for data from a new connection, in seconds, for each of the named virtual servers. If no data is received in this time, the connection will be closed.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getConnectTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getConnectTimeoutByLocation"/>
         <documentation>
            Get the time to wait for data from a new connection, in seconds, for each of the named virtual servers. If no data is received in this time, the connection will be closed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCookieDomainRewriteMode">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCookieDomainRewriteMode"/>
         <documentation>
            Get how each of the named virtual servers should rewrite the domain portion of cookies set by a back-end web server.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCookieDomainRewriteModeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCookieDomainRewriteModeByLocation"/>
         <documentation>
            Get how each of the named virtual servers should rewrite the domain portion of cookies set by a back-end web server. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCookieNamedDomain">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCookieNamedDomain"/>
         <documentation>
            Get the domain to use when rewriting cookie domains, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCookieNamedDomainByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCookieNamedDomainByLocation"/>
         <documentation>
            Get the domain to use when rewriting cookie domains, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCookiePathRewrite">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCookiePathRewrite"/>
         <documentation>
            For each of the named virtual servers, get the regex and replacement for rewriting the path portion of a cookie.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCookiePathRewriteByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCookiePathRewriteByLocation"/>
         <documentation>
            For each of the named virtual servers, get the regex and replacement for rewriting the path portion of a cookie. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCookieSecureFlagRewriteMode">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCookieSecureFlagRewriteMode"/>
         <documentation>
            Get whether each of the named virtual servers should modify the 'secure' tag of cookies set by a back-end web server.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCookieSecureFlagRewriteModeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getCookieSecureFlagRewriteModeByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should modify the 'secure' tag of cookies set by a back-end web server. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getDefaultPool">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getDefaultPool"/>
         <documentation>
            Get the default Pool that traffic is sent to for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getDefaultPoolByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getDefaultPoolByLocation"/>
         <documentation>
            Get the default Pool that traffic is sent to for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getEnabled"/>
         <documentation>
            Get whether each of the named virtual servers is enabled (i.e. serving traffic).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getEnabledByLocation"/>
         <documentation>
            Get whether each of the named virtual servers is enabled (i.e. serving traffic). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getErrorFile">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getErrorFile"/>
         <documentation>
            Get the file names of the error texts that each of the named virtual servers will send back to a client in case of back-end or internal errors.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getErrorFileByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getErrorFileByLocation"/>
         <documentation>
            Get the file names of the error texts that each of the named virtual servers will send back to a client in case of back-end or internal errors. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFTPDataSourcePort">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getFTPDataSourcePort"/>
         <documentation>
            Get the source port each of the named virtual servers should use for active-mode FTP data connections.  If 0, a random high port will be used, otherwise the specified port will be used.  If a port below 1024 is required you must first explicitly permit use of low ports with the ftp_data_bind_low global setting.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFTPDataSourcePortByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getFTPDataSourcePortByLocation"/>
         <documentation>
            Get the source port each of the named virtual servers should use for active-mode FTP data connections.  If 0, a random high port will be used, otherwise the specified port will be used.  If a port below 1024 is required you must first explicitly permit use of low ports with the ftp_data_bind_low global setting. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFTPForceClientSecure">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getFTPForceClientSecure"/>
         <documentation>
            Get whether each of the named virtual servers should require incoming FTP data connections (from clients) to originate from the same IP address as the corresponding control connection.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFTPForceClientSecureByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getFTPForceClientSecureByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should require incoming FTP data connections (from clients) to originate from the same IP address as the corresponding control connection. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFTPForceServerSecure">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getFTPForceServerSecure"/>
         <documentation>
            Get whether each of the named virtual servers should require incoming FTP data connections (from nodes) to originate from the same IP address as the corresponding control connection.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFTPForceServerSecureByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getFTPForceServerSecureByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should require incoming FTP data connections (from nodes) to originate from the same IP address as the corresponding control connection. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFTPPortRange">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getFTPPortRange"/>
         <documentation>
            Get the port range used for FTP data connections for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFTPPortRangeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getFTPPortRangeByLocation"/>
         <documentation>
            Get the port range used for FTP data connections for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFTPSSLData">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getFTPSSLData"/>
         <documentation>
            Get whether each of the named virtual servers should use SSL on the data connection as well as the control connection
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFTPSSLDataByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getFTPSSLDataByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should use SSL on the data connection as well as the control connection This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getHttpChunkOverheadForwarding">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getHttpChunkOverheadForwarding"/>
         <documentation>
            Get how to handle forwarding of data that is pure HTTP chunking overhead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getHttpChunkOverheadForwardingByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getHttpChunkOverheadForwardingByLocation"/>
         <documentation>
            Get how to handle forwarding of data that is pure HTTP chunking overhead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getKeepalive">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getKeepalive"/>
         <documentation>
            Get whether each of the named virtual servers should allow clients to maintain keepalive connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getKeepaliveByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getKeepaliveByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should allow clients to maintain keepalive connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getKeepaliveTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getKeepaliveTimeout"/>
         <documentation>
            Get the time that an idle keepalive connection should be kept open for, in seconds, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getKeepaliveTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getKeepaliveTimeoutByLocation"/>
         <documentation>
            Get the time that an idle keepalive connection should be kept open for, in seconds, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getListenAddresses">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getListenAddresses"/>
         <documentation>
            Get the specific IP addresses and hostnames that each of the named virtual servers are listening on. This will return an empty array for a virtual server if it is listening on all addresses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getListenAddressesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getListenAddressesByLocation"/>
         <documentation>
            Get the specific IP addresses and hostnames that each of the named virtual servers are listening on. This will return an empty array for a virtual server if it is listening on all addresses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getListenOnAllAddresses">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getListenOnAllAddresses"/>
         <documentation>
            For each of the named virtual servers, gets whether the virtual server is listening on all IP addresses
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getListenOnAllAddressesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getListenOnAllAddressesByLocation"/>
         <documentation>
            For each of the named virtual servers, gets whether the virtual server is listening on all IP addresses This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getListenTrafficIPGroups">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getListenTrafficIPGroups"/>
         <documentation>
            Get the specific Traffic IP Groups that each named virtual server listens on. This will return an empty array for a virtual server if it is listening on all addresses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getListenTrafficIPGroupsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getListenTrafficIPGroupsByLocation"/>
         <documentation>
            Get the specific Traffic IP Groups that each named virtual server listens on. This will return an empty array for a virtual server if it is listening on all addresses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLocationDefaultRewriteMode">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getLocationDefaultRewriteMode"/>
         <documentation>
            Get whether each of the named virtual servers should rewrite the 'Location' header. The rewrite is only performed if the location rewrite regex didn't match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLocationDefaultRewriteModeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getLocationDefaultRewriteModeByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should rewrite the 'Location' header. The rewrite is only performed if the location rewrite regex didn't match. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLocationRewrite">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getLocationRewrite"/>
         <documentation>
            For each of the named virtual servers, get the regex, and replacement for rewriting any 'Location' headers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLocationRewriteByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getLocationRewriteByLocation"/>
         <documentation>
            For each of the named virtual servers, get the regex, and replacement for rewriting any 'Location' headers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLogClientConnectionFailures">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getLogClientConnectionFailures"/>
         <documentation>
            Get whether the virtual server will log client connection failures.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLogClientConnectionFailuresByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getLogClientConnectionFailuresByLocation"/>
         <documentation>
            Get whether the virtual server will log client connection failures. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLogEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getLogEnabled"/>
         <documentation>
            Get whether each of the named virtual servers should log each connection to a disk on the file system.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLogEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getLogEnabledByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should log each connection to a disk on the file system. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLogFilename">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getLogFilename"/>
         <documentation>
            Get the name of the file used to store request logs, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLogFilenameByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getLogFilenameByLocation"/>
         <documentation>
            Get the name of the file used to store request logs, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLogFormat">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getLogFormat"/>
         <documentation>
            Get the log file format for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLogFormatByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getLogFormatByLocation"/>
         <documentation>
            Get the log file format for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLogSSLFailures">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getLogSSLFailures"/>
         <documentation>
            Get whether the virtual server will log ssl failures.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLogSSLFailuresByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getLogSSLFailuresByLocation"/>
         <documentation>
            Get whether the virtual server will log ssl failures. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLogServerConnectionFailures">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getLogServerConnectionFailures"/>
         <documentation>
            Get whether the virtual server will log server connection failures.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLogServerConnectionFailuresByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getLogServerConnectionFailuresByLocation"/>
         <documentation>
            Get whether the virtual server will log server connection failures. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMIMEAutoDetect">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getMIMEAutoDetect"/>
         <documentation>
            Get whether each of the named virtual servers should auto-detect MIME types if the server does not provide them.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMIMEAutoDetectByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getMIMEAutoDetectByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should auto-detect MIME types if the server does not provide them. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMIMEDefaultType">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getMIMEDefaultType"/>
         <documentation>
            Get the MIME type that the server uses as its 'default', for each of the named virtual servers. Responses with this mime type will be auto-corrected by the virtual server if this setting is enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMIMEDefaultTypeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getMIMEDefaultTypeByLocation"/>
         <documentation>
            Get the MIME type that the server uses as its 'default', for each of the named virtual servers. Responses with this mime type will be auto-corrected by the virtual server if this setting is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxClientBuffer">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getMaxClientBuffer"/>
         <documentation>
            Get the amount of memory used to store data sent by the client, in bytes, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxClientBufferByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getMaxClientBufferByLocation"/>
         <documentation>
            Get the amount of memory used to store data sent by the client, in bytes, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxServerBuffer">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getMaxServerBuffer"/>
         <documentation>
            Get the amount of memory used to store data returned by the server, in bytes, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxServerBufferByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getMaxServerBufferByLocation"/>
         <documentation>
            Get the amount of memory used to store data returned by the server, in bytes, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNote">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getNote"/>
         <documentation>
            Get the note for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getPort">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getPort"/>
         <documentation>
            Get the port that each of the named virtual servers listens on for incoming connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getPortByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getPortByLocation"/>
         <documentation>
            Get the port that each of the named virtual servers listens on for incoming connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getProtection">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getProtection"/>
         <documentation>
            Get the Service Protection Settings that are used to protect each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getProtectionByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getProtectionByLocation"/>
         <documentation>
            Get the Service Protection Settings that are used to protect each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getProtocol">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getProtocol"/>
         <documentation>
            Get the protocol that each of the named virtual servers uses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getProxyClose">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getProxyClose"/>
         <documentation>
            Get whether each of the named virtual servers should send a FIN packet on to the back-end server when it is received from the client.  The alternative is to close the connection to the client immediately.  If the traffic manager is responding to the request itself, enabling this setting will cause the traffic manager to continue writing the response even after it has received a FIN from the client.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getProxyCloseByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getProxyCloseByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should send a FIN packet on to the back-end server when it is received from the client.  The alternative is to close the connection to the client immediately.  If the traffic manager is responding to the request itself, enabling this setting will cause the traffic manager to continue writing the response even after it has received a FIN from the client. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRTSPPortRange">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRTSPPortRange"/>
         <documentation>
            Get the port range used for RTSP streaming data connections, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRTSPPortRangeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRTSPPortRangeByLocation"/>
         <documentation>
            Get the port range used for RTSP streaming data connections, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRTSPStreamingTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRTSPStreamingTimeout"/>
         <documentation>
            Get the time, in seconds, after which data-streams associated with RTSP connections timeout if no data is transmitted.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRTSPStreamingTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRTSPStreamingTimeoutByLocation"/>
         <documentation>
            Get the time, in seconds, after which data-streams associated with RTSP connections timeout if no data is transmitted. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRequestSyslogEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRequestSyslogEnabled"/>
         <documentation>
            Get whether each of the named virtual servers should log each connection to a remote syslog server.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRequestSyslogEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRequestSyslogEnabledByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should log each connection to a remote syslog server. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRequestSyslogFormat">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRequestSyslogFormat"/>
         <documentation>
            Get the remote log line format for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRequestSyslogFormatByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRequestSyslogFormatByLocation"/>
         <documentation>
            Get the remote log line format for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRequestSyslogIPEndpoint">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRequestSyslogIPEndpoint"/>
         <documentation>
            Get the remote syslog endpoint for each of the named virtual servers
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRequestSyslogIPEndpointByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRequestSyslogIPEndpointByLocation"/>
         <documentation>
            Get the remote syslog endpoint for each of the named virtual servers This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRequestSyslogMessageLenLimit">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRequestSyslogMessageLenLimit"/>
         <documentation>
            Get syslog message length limit.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRequestSyslogMessageLenLimitByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRequestSyslogMessageLenLimitByLocation"/>
         <documentation>
            Get syslog message length limit. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRequestTracingEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRequestTracingEnabled"/>
         <documentation>
            Get whether to record a detailed list of processing history for each request.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRequestTracingEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRequestTracingEnabledByLocation"/>
         <documentation>
            Get whether to record a detailed list of processing history for each request. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRequestTracingIO">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRequestTracingIO"/>
         <documentation>
            Get whether to record a detailed list of every IO event in the processing history for each request.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRequestTracingIOByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRequestTracingIOByLocation"/>
         <documentation>
            Get whether to record a detailed list of every IO event in the processing history for each request. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getResponseRules">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getResponseRules"/>
         <documentation>
            Get the rules that are run on server responses for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getResponseRulesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getResponseRulesByLocation"/>
         <documentation>
            Get the rules that are run on server responses for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRewriteSIPURI">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRewriteSIPURI"/>
         <documentation>
            Get whether the Request-URI of SIP requests will be replaced with the selected back-end node's address.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRewriteSIPURIByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRewriteSIPURIByLocation"/>
         <documentation>
            Get whether the Request-URI of SIP requests will be replaced with the selected back-end node's address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRules">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRules"/>
         <documentation>
            Get the rules that are run on client requests for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRulesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getRulesByLocation"/>
         <documentation>
            Get the rules that are run on client requests for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSIPDangerousRequestMode">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSIPDangerousRequestMode"/>
         <documentation>
            Get what should be done with requests that contain body data and should be routed to an external IP.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSIPDangerousRequestModeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSIPDangerousRequestModeByLocation"/>
         <documentation>
            Get what should be done with requests that contain body data and should be routed to an external IP. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSIPFollowRoute">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSIPFollowRoute"/>
         <documentation>
            Get whether to follow routing information in SIP requests.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSIPFollowRouteByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSIPFollowRouteByLocation"/>
         <documentation>
            Get whether to follow routing information in SIP requests. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSIPMaxConnectionMemory">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSIPMaxConnectionMemory"/>
         <documentation>
            Get maximum memory per connection.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSIPMaxConnectionMemoryByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSIPMaxConnectionMemoryByLocation"/>
         <documentation>
            Get maximum memory per connection. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSIPMode">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSIPMode"/>
         <documentation>
            Get which mode of operation the SIP virtual server should run in.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSIPModeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSIPModeByLocation"/>
         <documentation>
            Get which mode of operation the SIP virtual server should run in. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSIPPortRange">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSIPPortRange"/>
         <documentation>
            Get the port range used for SIP data connections, for each of the named virtual servers. This setting is only used when the SIP virtual server is using 'Full Gateway' mode.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSIPPortRangeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSIPPortRangeByLocation"/>
         <documentation>
            Get the port range used for SIP data connections, for each of the named virtual servers. This setting is only used when the SIP virtual server is using 'Full Gateway' mode. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSIPStreamingTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSIPStreamingTimeout"/>
         <documentation>
            Get the time, in seconds, after which a UDP stream will timeout if it has not seen any data.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSIPStreamingTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSIPStreamingTimeoutByLocation"/>
         <documentation>
            Get the time, in seconds, after which a UDP stream will timeout if it has not seen any data. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSIPTimeoutMessages">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSIPTimeoutMessages"/>
         <documentation>
            Get send a timed out response to the client and CANCEL request to the server when a transaction times out.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSIPTimeoutMessagesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSIPTimeoutMessagesByLocation"/>
         <documentation>
            Get send a timed out response to the client and CANCEL request to the server when a transaction times out. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLCertificate">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLCertificate"/>
         <documentation>
            Get the name of the default SSL Certificate that is used for SSL decryption for each of the named virtual servers. This is the name of an item in the SSL Certificates Catalog.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLCertificateByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLCertificateByLocation"/>
         <documentation>
            Get the name of the default SSL Certificate that is used for SSL decryption for each of the named virtual servers. This is the name of an item in the SSL Certificates Catalog. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLClientCertificateAuthorities">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLClientCertificateAuthorities"/>
         <documentation>
            Get the certificate authorities that are trusted for validating client certificates, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLClientCertificateAuthoritiesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLClientCertificateAuthoritiesByLocation"/>
         <documentation>
            Get the certificate authorities that are trusted for validating client certificates, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLClientCertificateHeaders">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLClientCertificateHeaders"/>
         <documentation>
            Get whether each of the named virtual servers should add HTTP headers to each request to show the data in the client certificate.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLClientCertificateHeadersByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLClientCertificateHeadersByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should add HTTP headers to each request to show the data in the client certificate. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLDecrypt">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLDecrypt"/>
         <documentation>
            Get whether each of the named virtual servers should decrypt SSL traffic.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLDecryptByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLDecryptByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should decrypt SSL traffic. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLExpectStartTLS">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLExpectStartTLS"/>
         <documentation>
            Get whether each of the named virtual servers should upgrade SMTP connections to SSL using the STARTTLS command.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLExpectStartTLSByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLExpectStartTLSByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should upgrade SMTP connections to SSL using the STARTTLS command. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLHeaders">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLHeaders"/>
         <documentation>
            Get whether each of the named virtual servers should add HTTP headers to each request to show SSL connection parameters.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLHeadersByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLHeadersByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should add HTTP headers to each request to show SSL connection parameters. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLLogEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLLogEnabled"/>
         <documentation>
            This method is now obsolete. SSL logging is now done if LogConnectionFailures is enabled. Use VirtualServer.getLogConnectionFailures and VirtualServer.getLogConnection failures to control this configuration.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLNeverExpiringClientCertificateAuthorities">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLNeverExpiringClientCertificateAuthorities"/>
         <documentation>
            Get the CAs for which any client certificate they validate is considered valid even if the client certificate's expiration date has passed.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLNeverExpiringClientCertificateAuthoritiesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLNeverExpiringClientCertificateAuthoritiesByLocation"/>
         <documentation>
            Get the CAs for which any client certificate they validate is considered valid even if the client certificate's expiration date has passed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLOCSPDefaults">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLOCSPDefaults"/>
         <documentation>
            Get the default OCSP responder settings for all client certificates.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLOCSPDefaultsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLOCSPDefaultsByLocation"/>
         <documentation>
            Get the default OCSP responder settings for all client certificates. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLOCSPIssuers">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLOCSPIssuers"/>
         <documentation>
            Gets a list of mappings between Certificate Authorities and OCSP responder settings. Certificates issued by these authorities will be verified with OCSP using these settings.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLOCSPIssuersByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLOCSPIssuersByLocation"/>
         <documentation>
            Gets a list of mappings between Certificate Authorities and OCSP responder settings. Certificates issued by these authorities will be verified with OCSP using these settings. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLOCSPMaxResponseAge">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLOCSPMaxResponseAge"/>
         <documentation>
            Get the number of seconds for which an OCSP response is considered valid if it has not yet exceeded the time specified in the 'nextUpdate' field
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLOCSPMaxResponseAgeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLOCSPMaxResponseAgeByLocation"/>
         <documentation>
            Get the number of seconds for which an OCSP response is considered valid if it has not yet exceeded the time specified in the 'nextUpdate' field This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLOCSPStapling">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLOCSPStapling"/>
         <documentation>
            Get whether the traffic manager is allowed to provide OCSP responses for certificates as part of the handshake, if the client sends a TLS status_request extension in the ClientHello, and OCSP URIs are present in certificates used by this virtual server.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLOCSPStaplingByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLOCSPStaplingByLocation"/>
         <documentation>
            Get whether the traffic manager is allowed to provide OCSP responses for certificates as part of the handshake, if the client sends a TLS status_request extension in the ClientHello, and OCSP URIs are present in certificates used by this virtual server. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLOCSPTimeTolerance">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLOCSPTimeTolerance"/>
         <documentation>
            Get the number of seconds outside the permitted range for which the 'thisUpdate' and 'nextUpdate' fields of an OCSP response are still considered valid
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLOCSPTimeToleranceByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLOCSPTimeToleranceByLocation"/>
         <documentation>
            Get the number of seconds outside the permitted range for which the 'thisUpdate' and 'nextUpdate' fields of an OCSP response are still considered valid This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLOCSPTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLOCSPTimeout"/>
         <documentation>
            Get the number of seconds after which OCSP requests will be timed out
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLOCSPTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLOCSPTimeoutByLocation"/>
         <documentation>
            Get the number of seconds after which OCSP requests will be timed out This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLPreferSSLv3">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLPreferSSLv3"/>
         <documentation>
            Get whether to prefer SSLv3 over TLS when the client appears to support both. SSLv3 is slightly faster, but some clients don't allow SSLv3 but still send the ClientHello inside SSLv2 or SSLv3 records.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLPreferSSLv3ByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLPreferSSLv3ByLocation"/>
         <documentation>
            Get whether to prefer SSLv3 over TLS when the client appears to support both. SSLv3 is slightly faster, but some clients don't allow SSLv3 but still send the ClientHello inside SSLv2 or SSLv3 records. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLRequestClientCertMode">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLRequestClientCertMode"/>
         <documentation>
            Get whether each of the named virtual servers should request (or require) an identifying certificate from each client.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLRequestClientCertModeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLRequestClientCertModeByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should request (or require) an identifying certificate from each client. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLSendCloseAlerts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLSendCloseAlerts"/>
         <documentation>
            Get whether each of the named virtual servers should send a close alert when initiating SSL socket disconnections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLSendCloseAlertsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLSendCloseAlertsByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should send a close alert when initiating SSL socket disconnections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLSites">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLSites"/>
         <documentation>
            Gets a list of mappings between destination addresses and the certificate used for SSL decryption those addresses, for each of the named virtual servers. Each certificate is the name of an item in the SSL Certificates Catalog.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLSitesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLSitesByLocation"/>
         <documentation>
            Gets a list of mappings between destination addresses and the certificate used for SSL decryption those addresses, for each of the named virtual servers. Each certificate is the name of an item in the SSL Certificates Catalog. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLTrustMagic">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLTrustMagic"/>
         <documentation>
            Get whether each of the named virtual servers should decode extra information on the true origin of an SSL connection. This information is prefixed onto an incoming SSL connection from another traffic manager.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLTrustMagicByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLTrustMagicByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should decode extra information on the true origin of an SSL connection. This information is prefixed onto an incoming SSL connection from another traffic manager. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLUseOCSP">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLUseOCSP"/>
         <documentation>
            Get whether or not the traffic manager should use OCSP to check the revocation status of client certificates
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLUseOCSPByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSSLUseOCSPByLocation"/>
         <documentation>
            Get whether or not the traffic manager should use OCSP to check the revocation status of client certificates This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getServerfirstBanner">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getServerfirstBanner"/>
         <documentation>
            Get the banner that each of the named virtual servers sends to clients for server-first protocols such as POP, SMTP and IMAP.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getServerfirstBannerByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getServerfirstBannerByLocation"/>
         <documentation>
            Get the banner that each of the named virtual servers sends to clients for server-first protocols such as POP, SMTP and IMAP. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getServiceLevelMonitoring">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getServiceLevelMonitoring"/>
         <documentation>
            Get the Service Level Monitoring class that each of the named virtual servers uses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getServiceLevelMonitoringByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getServiceLevelMonitoringByLocation"/>
         <documentation>
            Get the Service Level Monitoring class that each of the named virtual servers uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSipTransactionTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSipTransactionTimeout"/>
         <documentation>
            Get the time after which an incomplete transaction should be discarded, in seconds, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSipTransactionTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getSipTransactionTimeoutByLocation"/>
         <documentation>
            Get the time after which an incomplete transaction should be discarded, in seconds, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getTimeout"/>
         <documentation>
            Get the time to wait for data on an already established connection, in seconds, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getTimeoutByLocation"/>
         <documentation>
            Get the time to wait for data on an already established connection, in seconds, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getUDPEndpointPersistence">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getUDPEndpointPersistence"/>
         <documentation>
            Get whether each of the named virtual servers should send the UDP datagrams from the same IP and port to the same node in the pool if there's an existing UDP transaction. Although it's not always guaranteed as while making a decision to reuse same node, traffic manager can also apply other protocol specific filtering e.g CallID matching for SIP packets in addition to IP and port matching.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getUDPEndpointPersistenceByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getUDPEndpointPersistenceByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should send the UDP datagrams from the same IP and port to the same node in the pool if there's an existing UDP transaction. Although it's not always guaranteed as while making a decision to reuse same node, traffic manager can also apply other protocol specific filtering e.g CallID matching for SIP packets in addition to IP and port matching. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getUDPResponseDatagramsExpected">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getUDPResponseDatagramsExpected"/>
         <documentation>
            Get the expected number of UDP datagrams in the response, for each of the named virtual servers.  For simple request/response protocols a value of '1' should be used. If set to -1, the connection will not be discarded until the udp_timeout is reached.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getUDPResponseDatagramsExpectedByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getUDPResponseDatagramsExpectedByLocation"/>
         <documentation>
            Get the expected number of UDP datagrams in the response, for each of the named virtual servers.  For simple request/response protocols a value of '1' should be used. If set to -1, the connection will not be discarded until the udp_timeout is reached. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getUDPTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getUDPTimeout"/>
         <documentation>
            Get the time after which an idle UDP connection should be discarded and resources reclaimed, in seconds, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getUDPTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getUDPTimeoutByLocation"/>
         <documentation>
            Get the time after which an idle UDP connection should be discarded and resources reclaimed, in seconds, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getUseNagle">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getUseNagle"/>
         <documentation>
            Get whether Nagle's algorithm should be used for TCP connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getUseNagleByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getUseNagleByLocation"/>
         <documentation>
            Get whether Nagle's algorithm should be used for TCP connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getVirtualServerNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getVirtualServerNames"/>
         <documentation>
            Gets the names of all the configured virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getWebcacheControlOut">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getWebcacheControlOut"/>
         <documentation>
            Get the Cache-Control header that should be sent with cached HTTP responses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWebcacheControlOutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getWebcacheControlOutByLocation"/>
         <documentation>
            Get the Cache-Control header that should be sent with cached HTTP responses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWebcacheEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getWebcacheEnabled"/>
         <documentation>
            Get whether each of the named virtual servers should attempt to cache web server responses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWebcacheEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getWebcacheEnabledByLocation"/>
         <documentation>
            Get whether each of the named virtual servers should attempt to cache web server responses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWebcacheErrorpageTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getWebcacheErrorpageTime"/>
         <documentation>
            Get the time periods that each of the named virtual servers should cache error pages for.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWebcacheErrorpageTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getWebcacheErrorpageTimeByLocation"/>
         <documentation>
            Get the time periods that each of the named virtual servers should cache error pages for. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWebcacheRefreshTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getWebcacheRefreshTime"/>
         <documentation>
            Get the time periods that each of the named virtual servers should consider re-fetching cached pages in.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWebcacheRefreshTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getWebcacheRefreshTimeByLocation"/>
         <documentation>
            Get the time periods that each of the named virtual servers should consider re-fetching cached pages in. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWebcacheTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getWebcacheTime"/>
         <documentation>
            Get the time periods that each of the named virtual servers should cache web pages for.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWebcacheTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/getWebcacheTimeByLocation"/>
         <documentation>
            Get the time periods that each of the named virtual servers should cache web pages for. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeCompressionMIMETypes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/removeCompressionMIMETypes"/>
         <documentation>
            For each named virtual server, remove new MIME types from the list of types to compress.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeCompressionMIMETypesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/removeCompressionMIMETypesByLocation"/>
         <documentation>
            For each named virtual server, remove new MIME types from the list of types to compress. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeFTPPortRange">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/removeFTPPortRange"/>
         <documentation>
            Allow FTP connections to use any free ports, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeFTPPortRangeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/removeFTPPortRangeByLocation"/>
         <documentation>
            Allow FTP connections to use any free ports, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeRTSPPortRange">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/removeRTSPPortRange"/>
         <documentation>
            Allow any free ports to be used for RTSP connections, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeRTSPPortRangeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/removeRTSPPortRangeByLocation"/>
         <documentation>
            Allow any free ports to be used for RTSP connections, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeResponseRules">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/removeResponseRules"/>
         <documentation>
            For each of the named virtual servers, remove rules from the list that are run on server responses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeResponseRulesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/removeResponseRulesByLocation"/>
         <documentation>
            For each of the named virtual servers, remove rules from the list that are run on server responses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeRules">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/removeRules"/>
         <documentation>
            For each of the named virtual servers, remove rules from the list of rules that are run on client requests.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeRulesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/removeRulesByLocation"/>
         <documentation>
            For each of the named virtual servers, remove rules from the list of rules that are run on client requests. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeSIPPortRange">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/removeSIPPortRange"/>
         <documentation>
            Allow any free ports to be used for SIP connections, for each of the named virtual servers. This setting is only used when the SIP virtual server is using 'Full Gateway' mode.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeSIPPortRangeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/removeSIPPortRangeByLocation"/>
         <documentation>
            Allow any free ports to be used for SIP connections, for each of the named virtual servers. This setting is only used when the SIP virtual server is using 'Full Gateway' mode. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeSSLClientCertificateAuthorities">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/removeSSLClientCertificateAuthorities"/>
         <documentation>
            Remove certificate authorities for validating client certificates for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeSSLClientCertificateAuthoritiesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/removeSSLClientCertificateAuthoritiesByLocation"/>
         <documentation>
            Remove certificate authorities for validating client certificates for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeSSLNeverExpiringClientCertificateAuthorities">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/removeSSLNeverExpiringClientCertificateAuthorities"/>
         <documentation>
            Remove CAs for which any client certificate they validate is considered valid even if the client certificate's expiration date has passed, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeSSLNeverExpiringClientCertificateAuthoritiesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/removeSSLNeverExpiringClientCertificateAuthoritiesByLocation"/>
         <documentation>
            Remove CAs for which any client certificate they validate is considered valid even if the client certificate's expiration date has passed, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeSSLOCSPIssuers">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/removeSSLOCSPIssuers"/>
         <documentation>
            Removes mappings between OCSP responder settings for the specified Certificate authorities
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeSSLOCSPIssuersByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/removeSSLOCSPIssuersByLocation"/>
         <documentation>
            Removes mappings between OCSP responder settings for the specified Certificate authorities This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="renameVirtualServer">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/renameVirtualServer"/>
         <documentation>
            Rename each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAddClusterClientIPHeader">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setAddClusterClientIPHeader"/>
         <documentation>
            Set whether an 'X-Cluster-Client-Ip' header should be added to each HTTP request, for each of the named virtual servers. The 'X-Cluster-Client-Ip' header contains the client's IP address.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAddClusterClientIPHeaderByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setAddClusterClientIPHeaderByLocation"/>
         <documentation>
            Set whether an 'X-Cluster-Client-Ip' header should be added to each HTTP request, for each of the named virtual servers. The 'X-Cluster-Client-Ip' header contains the client's IP address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAddXForwardedForHeader">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setAddXForwardedForHeader"/>
         <documentation>
            Set whether the remote client's IP address should be appended to the X-Forwarded-For header. The 'X-Forwarded-For' header contains the client's IP address.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAddXForwardedForHeaderByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setAddXForwardedForHeaderByLocation"/>
         <documentation>
            Set whether the remote client's IP address should be appended to the X-Forwarded-For header. The 'X-Forwarded-For' header contains the client's IP address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAddXForwardedProtoHeader">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setAddXForwardedProtoHeader"/>
         <documentation>
            Set whether an 'X-Forwarded-Proto' header should be added to each HTTP request, for each of the named virtual servers. The 'X-Forwarded-Proto' header contains the protocol the client used to connect to the traffic manager
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAddXForwardedProtoHeaderByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setAddXForwardedProtoHeaderByLocation"/>
         <documentation>
            Set whether an 'X-Forwarded-Proto' header should be added to each HTTP request, for each of the named virtual servers. The 'X-Forwarded-Proto' header contains the protocol the client used to connect to the traffic manager This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setApplicationFirewallEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setApplicationFirewallEnabled"/>
         <documentation>
            For each of the named virtual servers, enable or disable the Stingray Application Firewall.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setApplicationFirewallEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setApplicationFirewallEnabledByLocation"/>
         <documentation>
            For each of the named virtual servers, enable or disable the Stingray Application Firewall. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAptimizerEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setAptimizerEnabled"/>
         <documentation>
            Set whether each of the named virtual servers should aptimize web content.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAptimizerEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setAptimizerEnabledByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should aptimize web content. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setBandwidthClass">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setBandwidthClass"/>
         <documentation>
            Set the Bandwidth Class that each of the named virtual servers uses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setBandwidthClassByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setBandwidthClassByLocation"/>
         <documentation>
            Set the Bandwidth Class that each of the named virtual servers uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCompressUnknownSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCompressUnknownSize"/>
         <documentation>
            Set whether each of the named virtual servers should compress documents with no given size.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCompressUnknownSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCompressUnknownSizeByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should compress documents with no given size. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCompressionEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCompressionEnabled"/>
         <documentation>
            Set whether each of the named virtual servers should compress web pages before sending to the client.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCompressionEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCompressionEnabledByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should compress web pages before sending to the client. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCompressionLevel">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCompressionLevel"/>
         <documentation>
            Set the gzip compression level, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCompressionLevelByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCompressionLevelByLocation"/>
         <documentation>
            Set the gzip compression level, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCompressionMIMETypes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCompressionMIMETypes"/>
         <documentation>
            Set the list of MIME types to compress, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCompressionMIMETypesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCompressionMIMETypesByLocation"/>
         <documentation>
            Set the list of MIME types to compress, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCompressionMaxSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCompressionMaxSize"/>
         <documentation>
            Set the maximum document size to compress, in bytes, for each of the named virtual servers.  A document size of '0' means 'unlimited'.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCompressionMaxSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCompressionMaxSizeByLocation"/>
         <documentation>
            Set the maximum document size to compress, in bytes, for each of the named virtual servers.  A document size of '0' means 'unlimited'. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCompressionMinSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCompressionMinSize"/>
         <documentation>
            Set the minimum document size to compress, in bytes, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCompressionMinSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCompressionMinSizeByLocation"/>
         <documentation>
            Set the minimum document size to compress, in bytes, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setConnectTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setConnectTimeout"/>
         <documentation>
            Set the time to wait for data from a new connection, in seconds, for each of the named virtual servers. If no data is received in this time, the connection will be closed.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setConnectTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setConnectTimeoutByLocation"/>
         <documentation>
            Set the time to wait for data from a new connection, in seconds, for each of the named virtual servers. If no data is received in this time, the connection will be closed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCookieDomainRewriteMode">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCookieDomainRewriteMode"/>
         <documentation>
            Set how each of the named virtual servers should rewrite the domain portion of cookies set by a back-end web server.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCookieDomainRewriteModeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCookieDomainRewriteModeByLocation"/>
         <documentation>
            Set how each of the named virtual servers should rewrite the domain portion of cookies set by a back-end web server. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCookieNamedDomain">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCookieNamedDomain"/>
         <documentation>
            Set the domain to use when rewriting cookie domains, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCookieNamedDomainByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCookieNamedDomainByLocation"/>
         <documentation>
            Set the domain to use when rewriting cookie domains, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCookiePathRewrite">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCookiePathRewrite"/>
         <documentation>
            For each of the named virtual servers, set the regex, and replacement for rewriting the path portion of a cookie.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCookiePathRewriteByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCookiePathRewriteByLocation"/>
         <documentation>
            For each of the named virtual servers, set the regex, and replacement for rewriting the path portion of a cookie. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCookieSecureFlagRewriteMode">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCookieSecureFlagRewriteMode"/>
         <documentation>
            Set whether each of the named virtual servers should modify the 'secure' tag of cookies set by a back-end web server.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCookieSecureFlagRewriteModeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setCookieSecureFlagRewriteModeByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should modify the 'secure' tag of cookies set by a back-end web server. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDefaultPool">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setDefaultPool"/>
         <documentation>
            Set the default Pool that traffic is sent to for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDefaultPoolByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setDefaultPoolByLocation"/>
         <documentation>
            Set the default Pool that traffic is sent to for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setEnabled"/>
         <documentation>
            Set whether each of the named virtual servers is enabled (i.e. serving traffic).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setEnabledByLocation"/>
         <documentation>
            Set whether each of the named virtual servers is enabled (i.e. serving traffic). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setErrorFile">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setErrorFile"/>
         <documentation>
            Set the file names of the error texts that each of the named virtual servers will send back to a client in case of back-end or internal errors.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setErrorFileByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setErrorFileByLocation"/>
         <documentation>
            Set the file names of the error texts that each of the named virtual servers will send back to a client in case of back-end or internal errors. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFTPDataSourcePort">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setFTPDataSourcePort"/>
         <documentation>
            Set the source port each of the named virtual servers should use for active-mode FTP data connections.  If 0, a random high port will be used, otherwise the specified port will be used.  If a port below 1024 is required you must first explicitly permit use of low ports with the ftp_data_bind_low global setting.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFTPDataSourcePortByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setFTPDataSourcePortByLocation"/>
         <documentation>
            Set the source port each of the named virtual servers should use for active-mode FTP data connections.  If 0, a random high port will be used, otherwise the specified port will be used.  If a port below 1024 is required you must first explicitly permit use of low ports with the ftp_data_bind_low global setting. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFTPForceClientSecure">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setFTPForceClientSecure"/>
         <documentation>
            Set whether each of the named virtual servers should require incoming FTP data connections (from clients) to originate from the same IP address as the corresponding control connection.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFTPForceClientSecureByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setFTPForceClientSecureByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should require incoming FTP data connections (from clients) to originate from the same IP address as the corresponding control connection. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFTPForceServerSecure">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setFTPForceServerSecure"/>
         <documentation>
            Set whether each of the named virtual servers should require incoming FTP data connections (from nodes) to originate from the same IP address as the corresponding control connection.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFTPForceServerSecureByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setFTPForceServerSecureByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should require incoming FTP data connections (from nodes) to originate from the same IP address as the corresponding control connection. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFTPPortRange">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setFTPPortRange"/>
         <documentation>
            Set the port range used for FTP data connections for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFTPPortRangeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setFTPPortRangeByLocation"/>
         <documentation>
            Set the port range used for FTP data connections for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFTPSSLData">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setFTPSSLData"/>
         <documentation>
            Set whether each of the named virtual servers should use SSL on the data connection as well as the control connection
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFTPSSLDataByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setFTPSSLDataByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should use SSL on the data connection as well as the control connection This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setHttpChunkOverheadForwarding">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setHttpChunkOverheadForwarding"/>
         <documentation>
            Set how to handle forwarding of data that is pure HTTP chunking overhead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setHttpChunkOverheadForwardingByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setHttpChunkOverheadForwardingByLocation"/>
         <documentation>
            Set how to handle forwarding of data that is pure HTTP chunking overhead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setKeepalive">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setKeepalive"/>
         <documentation>
            Set whether each of the named virtual servers should allow clients to maintain keepalive connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setKeepaliveByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setKeepaliveByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should allow clients to maintain keepalive connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setKeepaliveTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setKeepaliveTimeout"/>
         <documentation>
            Set the time that an idle keepalive connection should be kept open for, in seconds, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setKeepaliveTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setKeepaliveTimeoutByLocation"/>
         <documentation>
            Set the time that an idle keepalive connection should be kept open for, in seconds, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setListenAddresses">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setListenAddresses"/>
         <documentation>
            Set the specific IP addresses and hostnames for each named virtual server to listen on.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setListenAddressesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setListenAddressesByLocation"/>
         <documentation>
            Set the specific IP addresses and hostnames for each named virtual server to listen on. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setListenOnAllAddresses">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setListenOnAllAddresses"/>
         <documentation>
            Make each of the named virtual servers listen on all IP addresses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setListenOnAllAddressesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setListenOnAllAddressesByLocation"/>
         <documentation>
            Make each of the named virtual servers listen on all IP addresses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setListenTrafficIPGroups">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setListenTrafficIPGroups"/>
         <documentation>
            For each of the named virtual servers, set specific Traffic IP Groups for it to listen on.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setListenTrafficIPGroupsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setListenTrafficIPGroupsByLocation"/>
         <documentation>
            For each of the named virtual servers, set specific Traffic IP Groups for it to listen on. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLocationDefaultRewriteMode">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setLocationDefaultRewriteMode"/>
         <documentation>
            Set whether each of the named virtual servers should rewrite the 'Location' header. The rewrite is only performed if the location rewrite regex didn't match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLocationDefaultRewriteModeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setLocationDefaultRewriteModeByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should rewrite the 'Location' header. The rewrite is only performed if the location rewrite regex didn't match. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLocationRewrite">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setLocationRewrite"/>
         <documentation>
            For each of the named virtual servers, set the regex, and replacement for rewriting any 'Location' headers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLocationRewriteByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setLocationRewriteByLocation"/>
         <documentation>
            For each of the named virtual servers, set the regex, and replacement for rewriting any 'Location' headers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogClientConnectionFailures">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setLogClientConnectionFailures"/>
         <documentation>
            Set whether the virtual server will log client connection failures.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogClientConnectionFailuresByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setLogClientConnectionFailuresByLocation"/>
         <documentation>
            Set whether the virtual server will log client connection failures. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setLogEnabled"/>
         <documentation>
            Set whether each of the named virtual servers should log each connection to a disk on the file system.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setLogEnabledByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should log each connection to a disk on the file system. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogFilename">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setLogFilename"/>
         <documentation>
            Set the name of the file used to store request logs, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogFilenameByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setLogFilenameByLocation"/>
         <documentation>
            Set the name of the file used to store request logs, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogFormat">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setLogFormat"/>
         <documentation>
            Set the log file format for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogFormatByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setLogFormatByLocation"/>
         <documentation>
            Set the log file format for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogSSLFailures">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setLogSSLFailures"/>
         <documentation>
            Set whether the virtual server will log ssl failures.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogSSLFailuresByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setLogSSLFailuresByLocation"/>
         <documentation>
            Set whether the virtual server will log ssl failures. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogServerConnectionFailures">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setLogServerConnectionFailures"/>
         <documentation>
            Set whether the virtual server will log server connection failures.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogServerConnectionFailuresByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setLogServerConnectionFailuresByLocation"/>
         <documentation>
            Set whether the virtual server will log server connection failures. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMIMEAutoDetect">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setMIMEAutoDetect"/>
         <documentation>
            Set whether each of the named virtual servers should auto-detect MIME types if the server does not provide them.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMIMEAutoDetectByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setMIMEAutoDetectByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should auto-detect MIME types if the server does not provide them. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMIMEDefaultType">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setMIMEDefaultType"/>
         <documentation>
            Set the MIME type that the server uses as its 'default', for each of the named virtual servers. Responses with this mime type will be auto-corrected by the virtual server if this setting is enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMIMEDefaultTypeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setMIMEDefaultTypeByLocation"/>
         <documentation>
            Set the MIME type that the server uses as its 'default', for each of the named virtual servers. Responses with this mime type will be auto-corrected by the virtual server if this setting is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxClientBuffer">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setMaxClientBuffer"/>
         <documentation>
            Set the amount of memory used to store data sent by the client, in bytes, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxClientBufferByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setMaxClientBufferByLocation"/>
         <documentation>
            Set the amount of memory used to store data sent by the client, in bytes, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxServerBuffer">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setMaxServerBuffer"/>
         <documentation>
            Set the amount of memory used to store data returned by the server, in bytes, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxServerBufferByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setMaxServerBufferByLocation"/>
         <documentation>
            Set the amount of memory used to store data returned by the server, in bytes, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNote">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setNote"/>
         <documentation>
            Set the note for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setPort">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setPort"/>
         <documentation>
            Set the port that each of the named virtual servers listens on for incoming connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setPortByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setPortByLocation"/>
         <documentation>
            Set the port that each of the named virtual servers listens on for incoming connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setProtection">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setProtection"/>
         <documentation>
            Set the Service Protection Settings that are used to protect each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setProtectionByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setProtectionByLocation"/>
         <documentation>
            Set the Service Protection Settings that are used to protect each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setProtocol">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setProtocol"/>
         <documentation>
            Set the protocol that each of the named virtual servers uses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setProxyClose">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setProxyClose"/>
         <documentation>
            Set whether each of the named virtual servers should send a FIN packet on to the back-end server when it is received from the client.  The alternative is to close the connection to the client immediately.  If the traffic manager is responding to the request itself, enabling this setting will cause the traffic manager to continue writing the response even after it has received a FIN from the client.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setProxyCloseByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setProxyCloseByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should send a FIN packet on to the back-end server when it is received from the client.  The alternative is to close the connection to the client immediately.  If the traffic manager is responding to the request itself, enabling this setting will cause the traffic manager to continue writing the response even after it has received a FIN from the client. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRTSPPortRange">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRTSPPortRange"/>
         <documentation>
            Set the port range used for RTSP streaming data connections for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRTSPPortRangeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRTSPPortRangeByLocation"/>
         <documentation>
            Set the port range used for RTSP streaming data connections for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRTSPStreamingTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRTSPStreamingTimeout"/>
         <documentation>
            Set the time, in seconds, after which data-streams associated with RTSP connections timeout if no data is transmitted.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRTSPStreamingTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRTSPStreamingTimeoutByLocation"/>
         <documentation>
            Set the time, in seconds, after which data-streams associated with RTSP connections timeout if no data is transmitted. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRequestSyslogEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRequestSyslogEnabled"/>
         <documentation>
            Set whether each of the named virtual servers should log each connection to a remote syslog server.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRequestSyslogEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRequestSyslogEnabledByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should log each connection to a remote syslog server. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRequestSyslogFormat">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRequestSyslogFormat"/>
         <documentation>
            Set the remote log line format for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRequestSyslogFormatByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRequestSyslogFormatByLocation"/>
         <documentation>
            Set the remote log line format for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRequestSyslogIPEndpoint">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRequestSyslogIPEndpoint"/>
         <documentation>
            Set the remote syslog endpoint for each of the named virtual servers
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRequestSyslogIPEndpointByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRequestSyslogIPEndpointByLocation"/>
         <documentation>
            Set the remote syslog endpoint for each of the named virtual servers This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRequestSyslogMessageLenLimit">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRequestSyslogMessageLenLimit"/>
         <documentation>
            Set syslog message length limit.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRequestSyslogMessageLenLimitByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRequestSyslogMessageLenLimitByLocation"/>
         <documentation>
            Set syslog message length limit. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRequestTracingEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRequestTracingEnabled"/>
         <documentation>
            Set whether to record a detailed list of processing history for each request.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRequestTracingEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRequestTracingEnabledByLocation"/>
         <documentation>
            Set whether to record a detailed list of processing history for each request. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRequestTracingIO">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRequestTracingIO"/>
         <documentation>
            Set whether to record a detailed list of every IO event in the processing history for each request.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRequestTracingIOByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRequestTracingIOByLocation"/>
         <documentation>
            Set whether to record a detailed list of every IO event in the processing history for each request. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setResponseRules">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setResponseRules"/>
         <documentation>
            Set the rules that are run on server responses for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setResponseRulesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setResponseRulesByLocation"/>
         <documentation>
            Set the rules that are run on server responses for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRewriteSIPURI">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRewriteSIPURI"/>
         <documentation>
            Set whether the Request-URI of SIP requests will be replaced with the selected back-end node's address.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRewriteSIPURIByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRewriteSIPURIByLocation"/>
         <documentation>
            Set whether the Request-URI of SIP requests will be replaced with the selected back-end node's address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRules">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRules"/>
         <documentation>
            Set the rules that are run on client requests for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRulesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setRulesByLocation"/>
         <documentation>
            Set the rules that are run on client requests for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSIPDangerousRequestMode">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSIPDangerousRequestMode"/>
         <documentation>
            Set what should be done with requests that contain body data and should be routed to an external IP.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSIPDangerousRequestModeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSIPDangerousRequestModeByLocation"/>
         <documentation>
            Set what should be done with requests that contain body data and should be routed to an external IP. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSIPFollowRoute">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSIPFollowRoute"/>
         <documentation>
            Set whether to follow routing information in SIP requests.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSIPFollowRouteByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSIPFollowRouteByLocation"/>
         <documentation>
            Set whether to follow routing information in SIP requests. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSIPMaxConnectionMemory">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSIPMaxConnectionMemory"/>
         <documentation>
            Set maximum memory per connection.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSIPMaxConnectionMemoryByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSIPMaxConnectionMemoryByLocation"/>
         <documentation>
            Set maximum memory per connection. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSIPMode">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSIPMode"/>
         <documentation>
            Set which mode of operation the SIP virtual server should run in.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSIPModeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSIPModeByLocation"/>
         <documentation>
            Set which mode of operation the SIP virtual server should run in. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSIPPortRange">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSIPPortRange"/>
         <documentation>
            Set the port range used for SIP data connections for each of the named virtual servers. This setting is only used when the SIP virtual server is using 'Full Gateway' mode.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSIPPortRangeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSIPPortRangeByLocation"/>
         <documentation>
            Set the port range used for SIP data connections for each of the named virtual servers. This setting is only used when the SIP virtual server is using 'Full Gateway' mode. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSIPStreamingTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSIPStreamingTimeout"/>
         <documentation>
            Set the time, in seconds, after which a UDP stream will timeout if it has not seen any data.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSIPStreamingTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSIPStreamingTimeoutByLocation"/>
         <documentation>
            Set the time, in seconds, after which a UDP stream will timeout if it has not seen any data. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSIPTimeoutMessages">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSIPTimeoutMessages"/>
         <documentation>
            Set send a timed out response to the client and CANCEL request to the server when a transaction times out.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSIPTimeoutMessagesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSIPTimeoutMessagesByLocation"/>
         <documentation>
            Set send a timed out response to the client and CANCEL request to the server when a transaction times out. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLCertificate">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLCertificate"/>
         <documentation>
            Set the name of the default SSL Certificate that is used for SSL decryption for each of the named virtual servers. This is the name of an item in the SSL Certificates Catalog. You must call this function to set an SSL Certificate before turning on SSL Decryption.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLCertificateByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLCertificateByLocation"/>
         <documentation>
            Set the name of the default SSL Certificate that is used for SSL decryption for each of the named virtual servers. This is the name of an item in the SSL Certificates Catalog. You must call this function to set an SSL Certificate before turning on SSL Decryption. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLClientCertificateAuthorities">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLClientCertificateAuthorities"/>
         <documentation>
            Set the certificate authorities that are trusted for validating client certificates, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLClientCertificateAuthoritiesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLClientCertificateAuthoritiesByLocation"/>
         <documentation>
            Set the certificate authorities that are trusted for validating client certificates, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLClientCertificateHeaders">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLClientCertificateHeaders"/>
         <documentation>
            Set whether each of the named virtual servers should add HTTP headers to each request to show the data in the client certificate.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLClientCertificateHeadersByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLClientCertificateHeadersByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should add HTTP headers to each request to show the data in the client certificate. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLDecrypt">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLDecrypt"/>
         <documentation>
            Sets whether each of the named virtual servers should decrypt SSL traffic. This function will error unless an SSL Certificate has previously been set using setSSLCertificate.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLDecryptByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLDecryptByLocation"/>
         <documentation>
            Sets whether each of the named virtual servers should decrypt SSL traffic. This function will error unless an SSL Certificate has previously been set using setSSLCertificate. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLExpectStartTLS">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLExpectStartTLS"/>
         <documentation>
            Set whether each of the named virtual servers should upgrade SMTP connections to SSL using the STARTTLS command.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLExpectStartTLSByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLExpectStartTLSByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should upgrade SMTP connections to SSL using the STARTTLS command. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLHeaders">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLHeaders"/>
         <documentation>
            Set whether each of the named virtual servers should add HTTP headers to each request to show SSL connection parameters.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLHeadersByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLHeadersByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should add HTTP headers to each request to show SSL connection parameters. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLLogEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLLogEnabled"/>
         <documentation>
            This method is now obsolete. SSL logging is now done if LogConnectionFailures is enabled. Use VirtualServer.getLogConnectionFailures and VirtualServer.getLogConnection failures to control this configuration.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLNeverExpiringClientCertificateAuthorities">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLNeverExpiringClientCertificateAuthorities"/>
         <documentation>
            Set the CAs for which any client certificate they validate is considered valid even if the client certificate's expiration date has passed.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLNeverExpiringClientCertificateAuthoritiesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLNeverExpiringClientCertificateAuthoritiesByLocation"/>
         <documentation>
            Set the CAs for which any client certificate they validate is considered valid even if the client certificate's expiration date has passed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLOCSPDefaults">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLOCSPDefaults"/>
         <documentation>
            Set the default OCSP responder settings for all client certificates.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLOCSPDefaultsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLOCSPDefaultsByLocation"/>
         <documentation>
            Set the default OCSP responder settings for all client certificates. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLOCSPIssuers">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLOCSPIssuers"/>
         <documentation>
            Sets a list of mappings between Certificate Authorities and OCSP responder settings. Certificates issued by these authorities will be verified with OCSP using these settings.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLOCSPIssuersByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLOCSPIssuersByLocation"/>
         <documentation>
            Sets a list of mappings between Certificate Authorities and OCSP responder settings. Certificates issued by these authorities will be verified with OCSP using these settings. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLOCSPMaxResponseAge">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLOCSPMaxResponseAge"/>
         <documentation>
            Set the number of seconds for which an OCSP response is considered valid if it has not yet exceeded the time specified in the 'nextUpdate' field
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLOCSPMaxResponseAgeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLOCSPMaxResponseAgeByLocation"/>
         <documentation>
            Set the number of seconds for which an OCSP response is considered valid if it has not yet exceeded the time specified in the 'nextUpdate' field This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLOCSPStapling">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLOCSPStapling"/>
         <documentation>
            Set whether the traffic manager is allowed to provide OCSP responses for certificates as part of the handshake, if the client sends a TLS status_request extension in the ClientHello, and OCSP URIs are present in certificates used by this virtual server.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLOCSPStaplingByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLOCSPStaplingByLocation"/>
         <documentation>
            Set whether the traffic manager is allowed to provide OCSP responses for certificates as part of the handshake, if the client sends a TLS status_request extension in the ClientHello, and OCSP URIs are present in certificates used by this virtual server. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLOCSPTimeTolerance">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLOCSPTimeTolerance"/>
         <documentation>
            Set the number of seconds outside the permitted range for which the 'thisUpdate' and 'nextUpdate' fields of an OCSP response are still considered valid
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLOCSPTimeToleranceByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLOCSPTimeToleranceByLocation"/>
         <documentation>
            Set the number of seconds outside the permitted range for which the 'thisUpdate' and 'nextUpdate' fields of an OCSP response are still considered valid This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLOCSPTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLOCSPTimeout"/>
         <documentation>
            Set the number of seconds after which OCSP requests will be timed out
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLOCSPTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLOCSPTimeoutByLocation"/>
         <documentation>
            Set the number of seconds after which OCSP requests will be timed out This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLPreferSSLv3">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLPreferSSLv3"/>
         <documentation>
            Set whether to prefer SSLv3 over TLS when the client appears to support both. SSLv3 is slightly faster, but some clients don't allow SSLv3 but still send the ClientHello inside SSLv2 or SSLv3 records.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLPreferSSLv3ByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLPreferSSLv3ByLocation"/>
         <documentation>
            Set whether to prefer SSLv3 over TLS when the client appears to support both. SSLv3 is slightly faster, but some clients don't allow SSLv3 but still send the ClientHello inside SSLv2 or SSLv3 records. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLRequestClientCertMode">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLRequestClientCertMode"/>
         <documentation>
            Set whether each of the named virtual servers should request (or require) an identifying certificate from each client.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLRequestClientCertModeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLRequestClientCertModeByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should request (or require) an identifying certificate from each client. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLSendCloseAlerts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLSendCloseAlerts"/>
         <documentation>
            Set whether each of the named virtual servers should send a close alert when initiating SSL socket disconnections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLSendCloseAlertsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLSendCloseAlertsByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should send a close alert when initiating SSL socket disconnections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLTrustMagic">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLTrustMagic"/>
         <documentation>
            Set whether each of the named virtual servers should decode extra information on the true origin of an SSL connection. This information is prefixed onto an incoming SSL connection from another traffic manager.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLTrustMagicByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLTrustMagicByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should decode extra information on the true origin of an SSL connection. This information is prefixed onto an incoming SSL connection from another traffic manager. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLUseOCSP">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLUseOCSP"/>
         <documentation>
            Set whether or not the traffic manager should use OCSP to check the revocation status of client certificates
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLUseOCSPByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSSLUseOCSPByLocation"/>
         <documentation>
            Set whether or not the traffic manager should use OCSP to check the revocation status of client certificates This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setServerfirstBanner">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setServerfirstBanner"/>
         <documentation>
            Set the banner that each of the named virtual servers sends to clients for server-first protocols such as POP, SMTP and IMAP.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setServerfirstBannerByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setServerfirstBannerByLocation"/>
         <documentation>
            Set the banner that each of the named virtual servers sends to clients for server-first protocols such as POP, SMTP and IMAP. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setServiceLevelMonitoring">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setServiceLevelMonitoring"/>
         <documentation>
            Set the Service Level Monitoring class that each of the named virtual servers uses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setServiceLevelMonitoringByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setServiceLevelMonitoringByLocation"/>
         <documentation>
            Set the Service Level Monitoring class that each of the named virtual servers uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSipTransactionTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSipTransactionTimeout"/>
         <documentation>
            Set the time after which an incomplete transaction should be discarded, in seconds, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSipTransactionTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setSipTransactionTimeoutByLocation"/>
         <documentation>
            Set the time after which an incomplete transaction should be discarded, in seconds, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setTimeout"/>
         <documentation>
            Set the time to wait for data on an already established connection, in seconds, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setTimeoutByLocation"/>
         <documentation>
            Set the time to wait for data on an already established connection, in seconds, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setUDPEndpointPersistence">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setUDPEndpointPersistence"/>
         <documentation>
            Set whether each of the named virtual servers should send the UDP datagrams from the same IP and port to the same node in the pool if there's an existing UDP transaction. Although it's not always guaranteed as while making a decision to reuse same node, traffic manager can also apply other protocol specific filtering e.g CallID matching for SIP packets in addition to IP and port matching.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setUDPEndpointPersistenceByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setUDPEndpointPersistenceByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should send the UDP datagrams from the same IP and port to the same node in the pool if there's an existing UDP transaction. Although it's not always guaranteed as while making a decision to reuse same node, traffic manager can also apply other protocol specific filtering e.g CallID matching for SIP packets in addition to IP and port matching. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setUDPResponseDatagramsExpected">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setUDPResponseDatagramsExpected"/>
         <documentation>
            Set the expected number of UDP datagrams in the response, for each of the named virtual servers.  For simple request/response protocols a value of '1' should be used. If set to -1, the connection will not be discarded until the udp_timeout is reached.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setUDPResponseDatagramsExpectedByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setUDPResponseDatagramsExpectedByLocation"/>
         <documentation>
            Set the expected number of UDP datagrams in the response, for each of the named virtual servers.  For simple request/response protocols a value of '1' should be used. If set to -1, the connection will not be discarded until the udp_timeout is reached. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setUDPTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setUDPTimeout"/>
         <documentation>
            Set the time after which an idle UDP connection should be discarded and resources reclaimed, in seconds, for each of the named virtual servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setUDPTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setUDPTimeoutByLocation"/>
         <documentation>
            Set the time after which an idle UDP connection should be discarded and resources reclaimed, in seconds, for each of the named virtual servers. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setUseNagle">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setUseNagle"/>
         <documentation>
            Set whether Nagle's algorithm should be used for TCP connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setUseNagleByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setUseNagleByLocation"/>
         <documentation>
            Set whether Nagle's algorithm should be used for TCP connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheControlOut">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setWebcacheControlOut"/>
         <documentation>
            Set the Cache-Control header that should be sent with cached HTTP responses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheControlOutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setWebcacheControlOutByLocation"/>
         <documentation>
            Set the Cache-Control header that should be sent with cached HTTP responses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setWebcacheEnabled"/>
         <documentation>
            Set whether each of the named virtual servers should attempt to cache web server responses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setWebcacheEnabledByLocation"/>
         <documentation>
            Set whether each of the named virtual servers should attempt to cache web server responses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheErrorpageTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setWebcacheErrorpageTime"/>
         <documentation>
            Set the time periods that each of the named virtual servers should cache error pages for.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheErrorpageTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setWebcacheErrorpageTimeByLocation"/>
         <documentation>
            Set the time periods that each of the named virtual servers should cache error pages for. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheRefreshTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setWebcacheRefreshTime"/>
         <documentation>
            Set the time periods that each of the named virtual servers should consider re-fetching cached pages in.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheRefreshTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setWebcacheRefreshTimeByLocation"/>
         <documentation>
            Set the time periods that each of the named virtual servers should consider re-fetching cached pages in. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setWebcacheTime"/>
         <documentation>
            Set the time periods that each of the named virtual servers should cache web pages for.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/VirtualServer/setWebcacheTimeByLocation"/>
         <documentation>
            Set the time periods that each of the named virtual servers should cache web pages for. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/VirtualServer/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
   </binding>
   
   <service name="VirtualServer">
      <documentation>
         The VirtualServer interface allows management of Virtual Server objects. Using this interface, you can create, delete and rename virtual server objects, and manage their configuration.
      </documentation>
      
      <port name="VirtualServerPort" binding="zeusns:VirtualServerBinding">
         <soap:address location="https://admin_server:9090/soap"/>
      </port>
   </service>
   
</definitions>
