<?xml version="1.0" ?>

<!--
    Copyright (c) 2005-2013 Zeus Technology. All rights reserved.

-->

<definitions name="Catalog.Bandwidth"
 targetNamespace="http://soap.zeus.com/zxtm/1.0/"
 xmlns:zeusns="http://soap.zeus.com/zxtm/1.0/"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
 xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
 xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
 xmlns="http://schemas.xmlsoap.org/wsdl/">
   
   <types>
      <xsd:schema targetNamespace='http://soap.zeus.com/zxtm/1.0/'
       xmlns='http://www.w3.org/2001/XMLSchema'
       xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/'
       xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/'>
         
         <xsd:simpleType name="Catalog.Bandwidth.Sharing">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="connection">
                  <xsd:annotation>
                     <xsd:documentation>Each connection can use the maximum rate</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="machine">
                  <xsd:annotation>
                     <xsd:documentation>Bandwidth is shared per traffic manager</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="cluster">
                  <xsd:annotation>
                     <xsd:documentation>Bandwidth is shared across all traffic managers</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:complexType name="Catalog.Bandwidth.SharingArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:Catalog.Bandwidth.Sharing[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="StringArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:string[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="StringArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:StringArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:boolean[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:booleanArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         
         <xsd:complexType name="doubleArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:double[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="intArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:int[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="longArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:long[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedIntArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedInt[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedLongArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedLong[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="DeploymentError">
           <xsd:annotation>
            <xsd:documentation>
              The DeploymentError fault is raised when a configuration
              change causes errors when attempting to apply the configuration
              to a running traffic manager.
         
              It would be raised in cases such as failing to bind to
              a port when enabling a Virtual Server.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidInput">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidInput fault is raised when the input to a function is
              invalid, for example a number was out of range. This fault is also
              raised in cases such as VirtualServer.setPool() where the Pool
              doesn't exist
         
              The details in the fault contain the object, key and value
              that caused the fault. These might be blank if they are not relevant
              to the fault.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidObjectName">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidObjectName fault is raised when attempting to create
              a new object (e.g. via an add, rename or copy) and the name is
              invalid (e.g. it contains a '/').
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidOperation">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidOperation fault is emitted when attempting an operation
              that doesn't make sense or is prohibited, for example deleting
              a built-in monitor, or attempting to rename an object twice in
              the same call. 
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="LicenseError">
           <xsd:annotation>
            <xsd:documentation>
              The LicenseError fault is emitted when attempting to use functionality
              that is disabled by the license key.
         
              You will need to contact your support provider to get a new license
              key with the required functionality. There may be a charge for this.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="feature" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The license key feature that was missing
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectAlreadyExists">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectAlreadyExists fault is raised when attempting to create an
             object (such as a Virtual Server) that already exists. It will also
             be raised in cases such as renaming and copying objects.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectDoesNotExist">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectDoesNotExist fault is raised when attempting to perform an
             operation on an object (such as Virtual Server) that doesn't exist.
         
             This fault will only be raised if the primary object in the call doesn't
             exist. For example if calling VirtualServer.setPool(), then
             this fault will be raised if the Virtual Server doesn't exist, but if
             the Pool doesn't exist then the "InvalidInput" fault will be raised.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectInUse">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectInUse fault is raised when attempting to delete an object
             that is referenced by another object, for example deleting a Pool
             that is in use by a Virtual Server.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
      </xsd:schema>
   </types>
   
   <message name="addBandwidthRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="addBandwidthResponse"></message>
   
   <message name="copyBandwidthRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="new_names" type="zeusns:StringArray" />
   </message>
   
   <message name="copyBandwidthResponse"></message>
   
   <message name="deleteBandwidthRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="deleteBandwidthResponse"></message>
   
   <message name="getBandwidthNamesRequest"></message>
   
   <message name="getBandwidthNamesResponse">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaximumRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaximumResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaximumByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaximumByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getNoteRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getNoteResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getSharingRequest">
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSharingResponse">
      <part name="values" type="zeusns:Catalog.Bandwidth.SharingArray" />
   </message>
   
   <message name="getSharingByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSharingByLocationResponse">
      <part name="values" type="zeusns:Catalog.Bandwidth.SharingArray" />
   </message>
   
   <message name="renameBandwidthRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="new_names" type="zeusns:StringArray" />
   </message>
   
   <message name="renameBandwidthResponse"></message>
   
   <message name="setMaximumRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaximumResponse"></message>
   
   <message name="setMaximumByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaximumByLocationResponse"></message>
   
   <message name="setNoteRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setNoteResponse"></message>
   
   <message name="setSharingRequest">
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:Catalog.Bandwidth.SharingArray" />
   </message>
   
   <message name="setSharingResponse"></message>
   
   <message name="setSharingByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="class_names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:Catalog.Bandwidth.SharingArray" />
   </message>
   
   <message name="setSharingByLocationResponse"></message>
   
   <message name="DeploymentError">
      <part name="parameters" type="zeusns:DeploymentError" />
   </message>
   
   <message name="InvalidInput">
      <part name="parameters" type="zeusns:InvalidInput" />
   </message>
   
   <message name="InvalidObjectName">
      <part name="parameters" type="zeusns:InvalidObjectName" />
   </message>
   
   <message name="InvalidOperation">
      <part name="parameters" type="zeusns:InvalidOperation" />
   </message>
   
   <message name="LicenseError">
      <part name="parameters" type="zeusns:LicenseError" />
   </message>
   
   <message name="ObjectAlreadyExists">
      <part name="parameters" type="zeusns:ObjectAlreadyExists" />
   </message>
   
   <message name="ObjectDoesNotExist">
      <part name="parameters" type="zeusns:ObjectDoesNotExist" />
   </message>
   
   <message name="ObjectInUse">
      <part name="parameters" type="zeusns:ObjectInUse" />
   </message>
   
   <portType name="Catalog.BandwidthPort">
      <operation name="addBandwidth">
         <documentation>
            Add new bandwidth classes.
         </documentation>
         
         <input message="zeusns:addBandwidthRequest"/>
         <output message="zeusns:addBandwidthResponse"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="copyBandwidth">
         <documentation>
            Copy the named bandwidth classes.
         </documentation>
         
         <input message="zeusns:copyBandwidthRequest"/>
         <output message="zeusns:copyBandwidthResponse"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="deleteBandwidth">
         <documentation>
            Delete the named bandwidth classes.
         </documentation>
         
         <input message="zeusns:deleteBandwidthRequest"/>
         <output message="zeusns:deleteBandwidthResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="ObjectInUse" message="zeusns:ObjectInUse"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="getBandwidthNames">
         <documentation>
            Get the names of all the configured bandwidth classes.
         </documentation>
         
         <input message="zeusns:getBandwidthNamesRequest"/>
         <output message="zeusns:getBandwidthNamesResponse"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="getMaximum">
         <documentation>
            Get the maximum bandwidth, in kbits/second.
         </documentation>
         
         <input message="zeusns:getMaximumRequest"/>
         <output message="zeusns:getMaximumResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="getMaximumByLocation">
         <documentation>
            Get the maximum bandwidth, in kbits/second. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaximumByLocationRequest"/>
         <output message="zeusns:getMaximumByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="getNote">
         <documentation>
            Get the note for each of the named Bandwidth classes.
         </documentation>
         
         <input message="zeusns:getNoteRequest"/>
         <output message="zeusns:getNoteResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="getSharing">
         <documentation>
            Get the bandwidth sharing mode
         </documentation>
         
         <input message="zeusns:getSharingRequest"/>
         <output message="zeusns:getSharingResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="getSharingByLocation">
         <documentation>
            Get the bandwidth sharing mode This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSharingByLocationRequest"/>
         <output message="zeusns:getSharingByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="renameBandwidth">
         <documentation>
            Rename the named bandwidth classes.
         </documentation>
         
         <input message="zeusns:renameBandwidthRequest"/>
         <output message="zeusns:renameBandwidthResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="setMaximum">
         <documentation>
            Set the maximum bandwidth, in kbits/second.
         </documentation>
         
         <input message="zeusns:setMaximumRequest"/>
         <output message="zeusns:setMaximumResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="setMaximumByLocation">
         <documentation>
            Set the maximum bandwidth, in kbits/second. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaximumByLocationRequest"/>
         <output message="zeusns:setMaximumByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="setNote">
         <documentation>
            Set the note for each of the named Bandwidth classes.
         </documentation>
         
         <input message="zeusns:setNoteRequest"/>
         <output message="zeusns:setNoteResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="setSharing">
         <documentation>
            Set the bandwidth sharing mode
         </documentation>
         
         <input message="zeusns:setSharingRequest"/>
         <output message="zeusns:setSharingResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
      
      <operation name="setSharingByLocation">
         <documentation>
            Set the bandwidth sharing mode This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSharingByLocationRequest"/>
         <output message="zeusns:setSharingByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="LicenseError" message="zeusns:LicenseError"/>
      </operation>
   </portType>
   
   <binding name="Catalog.BandwidthBinding" type="zeusns:Catalog.BandwidthPort">
      <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
      <operation name="addBandwidth">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/addBandwidth"/>
         <documentation>
            Add new bandwidth classes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="copyBandwidth">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/copyBandwidth"/>
         <documentation>
            Copy the named bandwidth classes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="deleteBandwidth">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/deleteBandwidth"/>
         <documentation>
            Delete the named bandwidth classes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectInUse">
            <soap:fault use="encoded" name="ObjectInUse" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getBandwidthNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/getBandwidthNames"/>
         <documentation>
            Get the names of all the configured bandwidth classes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaximum">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/getMaximum"/>
         <documentation>
            Get the maximum bandwidth, in kbits/second.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaximumByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/getMaximumByLocation"/>
         <documentation>
            Get the maximum bandwidth, in kbits/second. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNote">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/getNote"/>
         <documentation>
            Get the note for each of the named Bandwidth classes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSharing">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/getSharing"/>
         <documentation>
            Get the bandwidth sharing mode
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSharingByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/getSharingByLocation"/>
         <documentation>
            Get the bandwidth sharing mode This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="renameBandwidth">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/renameBandwidth"/>
         <documentation>
            Rename the named bandwidth classes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaximum">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/setMaximum"/>
         <documentation>
            Set the maximum bandwidth, in kbits/second.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaximumByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/setMaximumByLocation"/>
         <documentation>
            Set the maximum bandwidth, in kbits/second. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNote">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/setNote"/>
         <documentation>
            Set the note for each of the named Bandwidth classes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSharing">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/setSharing"/>
         <documentation>
            Set the bandwidth sharing mode
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSharingByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/setSharingByLocation"/>
         <documentation>
            Set the bandwidth sharing mode This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="LicenseError">
            <soap:fault use="encoded" name="LicenseError" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/Bandwidth/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
   </binding>
   
   <service name="Catalog.Bandwidth">
      <documentation>
         The Catalog.Bandwidth interface allows management of Bandwidth classes. Using this interface, you can create, delete and rename bandwidth classes, and manage their configuration.
      </documentation>
      
      <port name="Catalog.BandwidthPort" binding="zeusns:Catalog.BandwidthBinding">
         <soap:address location="https://admin_server:9090/soap"/>
      </port>
   </service>
   
</definitions>
