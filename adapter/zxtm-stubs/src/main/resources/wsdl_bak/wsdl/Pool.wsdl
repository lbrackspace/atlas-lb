<?xml version="1.0" ?>

<!--
    Copyright (c) 2005-2013 Zeus Technology. All rights reserved.

-->

<definitions name="Pool"
 targetNamespace="http://soap.zeus.com/zxtm/1.0/"
 xmlns:zeusns="http://soap.zeus.com/zxtm/1.0/"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
 xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
 xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
 xmlns="http://schemas.xmlsoap.org/wsdl/">
   
   <types>
      <xsd:schema targetNamespace='http://soap.zeus.com/zxtm/1.0/'
       xmlns='http://www.w3.org/2001/XMLSchema'
       xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/'
       xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/'>
         
         <xsd:simpleType name="Pool.AutoscaleIpstouse">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="publicips">
                  <xsd:annotation>
                     <xsd:documentation>Public IP addresses</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="privateips">
                  <xsd:annotation>
                     <xsd:documentation>Private IP addresses</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:complexType name="Pool.AutoscaleIpstouseArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:Pool.AutoscaleIpstouse[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:simpleType name="Pool.LoadBalancingAlgorithm">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="roundrobin">
                  <xsd:annotation>
                     <xsd:documentation>Round Robin</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="wroundrobin">
                  <xsd:annotation>
                     <xsd:documentation>Weighted Round Robin</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="cells">
                  <xsd:annotation>
                     <xsd:documentation>Perceptive</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="connections">
                  <xsd:annotation>
                     <xsd:documentation>Least Connections</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="wconnections">
                  <xsd:annotation>
                     <xsd:documentation>Weighted Least Connections</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="responsetimes">
                  <xsd:annotation>
                     <xsd:documentation>Fastest Response Time</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="random">
                  <xsd:annotation>
                     <xsd:documentation>Random Node</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:complexType name="Pool.LoadBalancingAlgorithmArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:Pool.LoadBalancingAlgorithm[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="Pool.PriorityValueDefinition">
           <xsd:annotation>
             <xsd:documentation>This structure contains the priority for a particular node. The priority is used when using the priority lists functionality.</xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="node" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The name of the node.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="priority" type="xsd:int">
               <xsd:annotation>
                 <xsd:documentation>The priority value.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="Pool.PriorityValueDefinitionArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:Pool.PriorityValueDefinition[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="Pool.PriorityValueDefinitionArrayArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:Pool.PriorityValueDefinitionArray[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:simpleType name="Pool.UDPAcceptFrom">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="dest_only">
                  <xsd:annotation>
                     <xsd:documentation>Only the IP address and port to which the request was sent.</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="dest_ip_only">
                  <xsd:annotation>
                     <xsd:documentation>Only the IP address to which the request was sent, but from any port.</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="ip_mask">
                  <xsd:annotation>
                     <xsd:documentation>Only a specific set of IP addresses, but from any port.</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="all">
                  <xsd:annotation>
                     <xsd:documentation>Any IP address and any port.</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:complexType name="Pool.UDPAcceptFromArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:Pool.UDPAcceptFrom[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="Pool.WeightingsDefinition">
           <xsd:annotation>
             <xsd:documentation>This structure contains the weighting for a particular node. The weighting is used when using the Weighted Round Robin algorithm functionality.</xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="node" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The name of the node.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="weighting" type="xsd:int">
               <xsd:annotation>
                 <xsd:documentation>The weighting value.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="Pool.WeightingsDefinitionArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:Pool.WeightingsDefinition[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="Pool.WeightingsDefinitionArrayArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:Pool.WeightingsDefinitionArray[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="StringArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:string[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="StringArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:StringArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:boolean[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:booleanArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         
         <xsd:complexType name="doubleArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:double[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="intArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:int[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="longArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:long[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedIntArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedInt[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedLongArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedLong[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="DeploymentError">
           <xsd:annotation>
            <xsd:documentation>
              The DeploymentError fault is raised when a configuration
              change causes errors when attempting to apply the configuration
              to a running traffic manager.
         
              It would be raised in cases such as failing to bind to
              a port when enabling a Virtual Server.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidInput">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidInput fault is raised when the input to a function is
              invalid, for example a number was out of range. This fault is also
              raised in cases such as VirtualServer.setPool() where the Pool
              doesn't exist
         
              The details in the fault contain the object, key and value
              that caused the fault. These might be blank if they are not relevant
              to the fault.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidObjectName">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidObjectName fault is raised when attempting to create
              a new object (e.g. via an add, rename or copy) and the name is
              invalid (e.g. it contains a '/').
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidOperation">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidOperation fault is emitted when attempting an operation
              that doesn't make sense or is prohibited, for example deleting
              a built-in monitor, or attempting to rename an object twice in
              the same call. 
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectAlreadyExists">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectAlreadyExists fault is raised when attempting to create an
             object (such as a Virtual Server) that already exists. It will also
             be raised in cases such as renaming and copying objects.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectDoesNotExist">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectDoesNotExist fault is raised when attempting to perform an
             operation on an object (such as Virtual Server) that doesn't exist.
         
             This fault will only be raised if the primary object in the call doesn't
             exist. For example if calling VirtualServer.setPool(), then
             this fault will be raised if the Virtual Server doesn't exist, but if
             the Pool doesn't exist then the "InvalidInput" fault will be raised.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectInUse">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectInUse fault is raised when attempting to delete an object
             that is referenced by another object, for example deleting a Pool
             that is in use by a Virtual Server.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
      </xsd:schema>
   </types>
   
   <message name="addAutoScaledPoolRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="nodes" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addAutoScaledPoolResponse"></message>
   
   <message name="addDrainingNodesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addDrainingNodesResponse"></message>
   
   <message name="addDrainingNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addDrainingNodesByLocationResponse"></message>
   
   <message name="addMonitorsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addMonitorsResponse"></message>
   
   <message name="addMonitorsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addMonitorsByLocationResponse"></message>
   
   <message name="addNodesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addNodesResponse"></message>
   
   <message name="addNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addNodesByLocationResponse"></message>
   
   <message name="addPoolRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="nodes" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addPoolResponse"></message>
   
   <message name="copyPoolRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="new_names" type="zeusns:StringArray" />
   </message>
   
   <message name="copyPoolResponse"></message>
   
   <message name="deletePoolRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="deletePoolResponse"></message>
   
   <message name="disableNodesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="nodes" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="disableNodesResponse"></message>
   
   <message name="disableNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="nodes" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="disableNodesByLocationResponse"></message>
   
   <message name="enableNodesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="nodes" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="enableNodesResponse"></message>
   
   <message name="enableNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="nodes" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="enableNodesByLocationResponse"></message>
   
   <message name="getAutoscaleCloudcredentialsRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleCloudcredentialsResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleCloudcredentialsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleCloudcredentialsByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleClusterRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleClusterResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleClusterByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleClusterByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleDatacenterRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleDatacenterResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleDatacenterByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleDatacenterByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleDatastoreRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleDatastoreResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleDatastoreByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleDatastoreByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleEnabledResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getAutoscaleEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleEnabledByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getAutoscaleExternalRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleExternalResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getAutoscaleExternalByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleExternalByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getAutoscaleHysteresisRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleHysteresisResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getAutoscaleHysteresisByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleHysteresisByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getAutoscaleImageidRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleImageidResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleImageidByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleImageidByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleIpstouseRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleIpstouseResponse">
      <part name="values" type="zeusns:Pool.AutoscaleIpstouseArray" />
   </message>
   
   <message name="getAutoscaleIpstouseByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleIpstouseByLocationResponse">
      <part name="values" type="zeusns:Pool.AutoscaleIpstouseArray" />
   </message>
   
   <message name="getAutoscaleLastnodeIdletimeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleLastnodeIdletimeResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getAutoscaleLastnodeIdletimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleLastnodeIdletimeByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getAutoscaleMaxNodesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleMaxNodesResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getAutoscaleMaxNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleMaxNodesByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getAutoscaleMinNodesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleMinNodesResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getAutoscaleMinNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleMinNodesByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getAutoscaleNameRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleNameResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleNameByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleNameByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscalePortRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscalePortResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getAutoscalePortByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscalePortByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getAutoscaleRefractoryRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleRefractoryResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getAutoscaleRefractoryByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleRefractoryByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getAutoscaleResponseTimeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleResponseTimeResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getAutoscaleResponseTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleResponseTimeByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getAutoscaleScaledownLevelRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleScaledownLevelResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getAutoscaleScaledownLevelByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleScaledownLevelByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getAutoscaleScaleupLevelRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleScaleupLevelResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getAutoscaleScaleupLevelByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleScaleupLevelByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getAutoscaleSizeidRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleSizeidResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleSizeidByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getAutoscaleSizeidByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getBandwidthClassRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getBandwidthClassResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getBandwidthClassByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getBandwidthClassByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getDisabledNodesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getDisabledNodesResponse">
      <part name="nodes" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getDisabledNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getDisabledNodesByLocationResponse">
      <part name="nodes" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getDrainingNodesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getDrainingNodesResponse">
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getDrainingNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getDrainingNodesByLocationResponse">
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getErrorFileRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getErrorFileResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getFTPSupportRfc2428Request">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getFTPSupportRfc2428Response">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getFTPSupportRfc2428ByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getFTPSupportRfc2428ByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getFailpoolRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getFailpoolResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getFailpoolByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getFailpoolByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getKeepaliveRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getKeepaliveResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getKeepaliveByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getKeepaliveByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getKeepaliveNonIdempotentRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getKeepaliveNonIdempotentResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getKeepaliveNonIdempotentByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getKeepaliveNonIdempotentByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getLoadBalancingAlgorithmRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLoadBalancingAlgorithmResponse">
      <part name="values" type="zeusns:Pool.LoadBalancingAlgorithmArray" />
   </message>
   
   <message name="getLoadBalancingAlgorithmByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLoadBalancingAlgorithmByLocationResponse">
      <part name="values" type="zeusns:Pool.LoadBalancingAlgorithmArray" />
   </message>
   
   <message name="getMaxConnectTimeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxConnectTimeResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxConnectTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxConnectTimeByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxConnectionAttemptsRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxConnectionAttemptsResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxConnectionAttemptsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxConnectionAttemptsByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxConnectionsPernodeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxConnectionsPernodeResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxConnectionsPernodeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxConnectionsPernodeByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxIdleConnectionsPerNodeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxIdleConnectionsPerNodeResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxIdleConnectionsPerNodeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxIdleConnectionsPerNodeByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxKeepalivesPerNodeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxKeepalivesPerNodeResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxKeepalivesPerNodeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxKeepalivesPerNodeByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxQueueSizeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxQueueSizeResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxQueueSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxQueueSizeByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxReplyTimeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxReplyTimeResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxReplyTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxReplyTimeByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxTimedOutConnectionAttemptsRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxTimedOutConnectionAttemptsResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMaxTimedOutConnectionAttemptsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMaxTimedOutConnectionAttemptsByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getMonitorsRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMonitorsResponse">
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getMonitorsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMonitorsByLocationResponse">
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getNodeConnCloseRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getNodeConnCloseResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getNodeConnCloseByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getNodeConnCloseByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getNodeConnectionAttemptsRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getNodeConnectionAttemptsResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getNodeConnectionAttemptsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getNodeConnectionAttemptsByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getNodeFailTimeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getNodeFailTimeResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getNodeFailTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getNodeFailTimeByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getNodeUseNagleRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getNodeUseNagleResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getNodeUseNagleByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getNodeUseNagleByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getNodesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getNodesResponse">
      <part name="nodes" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getNodesByLocationResponse">
      <part name="nodes" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getNodesConnectionCountsRequest">
      <part name="nodes" type="zeusns:StringArray" />
   </message>
   
   <message name="getNodesConnectionCountsResponse">
      <part name="nodes_connection_counts" type="zeusns:intArray" />
   </message>
   
   <message name="getNodesLastUsedRequest">
      <part name="nodes" type="zeusns:StringArray" />
   </message>
   
   <message name="getNodesLastUsedResponse">
      <part name="nodes_last_used" type="zeusns:intArray" />
   </message>
   
   <message name="getNodesPriorityValueRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="nodes" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getNodesPriorityValueResponse">
      <part name="node_values" type="zeusns:Pool.PriorityValueDefinitionArrayArray" />
   </message>
   
   <message name="getNodesPriorityValueByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="nodes" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getNodesPriorityValueByLocationResponse">
      <part name="node_values" type="zeusns:Pool.PriorityValueDefinitionArrayArray" />
   </message>
   
   <message name="getNodesWeightingsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="nodes" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getNodesWeightingsResponse">
      <part name="node_values" type="zeusns:Pool.WeightingsDefinitionArrayArray" />
   </message>
   
   <message name="getNodesWeightingsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="nodes" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getNodesWeightingsByLocationResponse">
      <part name="node_values" type="zeusns:Pool.WeightingsDefinitionArrayArray" />
   </message>
   
   <message name="getNoteRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getNoteResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getPassiveMonitoringRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getPassiveMonitoringResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getPassiveMonitoringByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getPassiveMonitoringByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getPersistenceRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getPersistenceResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getPersistenceByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getPersistenceByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getPoolNamesRequest"></message>
   
   <message name="getPoolNamesResponse">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getPriorityEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getPriorityEnabledResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getPriorityEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getPriorityEnabledByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getPriorityNodesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getPriorityNodesResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getPriorityNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getPriorityNodesByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getPriorityValuesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getPriorityValuesResponse">
      <part name="node_values" type="zeusns:Pool.PriorityValueDefinitionArrayArray" />
   </message>
   
   <message name="getPriorityValuesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getPriorityValuesByLocationResponse">
      <part name="node_values" type="zeusns:Pool.PriorityValueDefinitionArrayArray" />
   </message>
   
   <message name="getQueueTimeoutRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getQueueTimeoutResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getQueueTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getQueueTimeoutByLocationResponse">
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="getSMTPSendStartTLSRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSMTPSendStartTLSResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSMTPSendStartTLSByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSMTPSendStartTLSByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLClientAuthRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLClientAuthResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLClientAuthByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLClientAuthByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLEncryptRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLEncryptResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLEncryptByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLEncryptByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLEnhanceRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLEnhanceResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLEnhanceByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLEnhanceByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLSendCloseAlertsRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLSendCloseAlertsResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLSendCloseAlertsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLSendCloseAlertsByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLServerNameExtensionRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLServerNameExtensionResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLServerNameExtensionByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLServerNameExtensionByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLStrictVerifyRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLStrictVerifyResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getSSLStrictVerifyByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSSLStrictVerifyByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getTransparentRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getTransparentResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getTransparentByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getTransparentByLocationResponse">
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="getUDPAcceptFromRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getUDPAcceptFromResponse">
      <part name="values" type="zeusns:Pool.UDPAcceptFromArray" />
   </message>
   
   <message name="getUDPAcceptFromByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getUDPAcceptFromByLocationResponse">
      <part name="values" type="zeusns:Pool.UDPAcceptFromArray" />
   </message>
   
   <message name="getUDPAcceptFromIPMaskRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getUDPAcceptFromIPMaskResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getUDPAcceptFromIPMaskByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getUDPAcceptFromIPMaskByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getWeightingsRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getWeightingsResponse">
      <part name="node_values" type="zeusns:Pool.WeightingsDefinitionArrayArray" />
   </message>
   
   <message name="getWeightingsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getWeightingsByLocationResponse">
      <part name="node_values" type="zeusns:Pool.WeightingsDefinitionArrayArray" />
   </message>
   
   <message name="removeDrainingNodesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeDrainingNodesResponse"></message>
   
   <message name="removeDrainingNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeDrainingNodesByLocationResponse"></message>
   
   <message name="removeMonitorsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeMonitorsResponse"></message>
   
   <message name="removeMonitorsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeMonitorsByLocationResponse"></message>
   
   <message name="removeNodesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeNodesResponse"></message>
   
   <message name="removeNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeNodesByLocationResponse"></message>
   
   <message name="renamePoolRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="new_names" type="zeusns:StringArray" />
   </message>
   
   <message name="renamePoolResponse"></message>
   
   <message name="setAutoscaleCloudcredentialsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setAutoscaleCloudcredentialsResponse"></message>
   
   <message name="setAutoscaleCloudcredentialsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setAutoscaleCloudcredentialsByLocationResponse"></message>
   
   <message name="setAutoscaleClusterRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setAutoscaleClusterResponse"></message>
   
   <message name="setAutoscaleClusterByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setAutoscaleClusterByLocationResponse"></message>
   
   <message name="setAutoscaleDatacenterRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setAutoscaleDatacenterResponse"></message>
   
   <message name="setAutoscaleDatacenterByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setAutoscaleDatacenterByLocationResponse"></message>
   
   <message name="setAutoscaleDatastoreRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setAutoscaleDatastoreResponse"></message>
   
   <message name="setAutoscaleDatastoreByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setAutoscaleDatastoreByLocationResponse"></message>
   
   <message name="setAutoscaleEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setAutoscaleEnabledResponse"></message>
   
   <message name="setAutoscaleEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setAutoscaleEnabledByLocationResponse"></message>
   
   <message name="setAutoscaleExternalRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setAutoscaleExternalResponse"></message>
   
   <message name="setAutoscaleExternalByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setAutoscaleExternalByLocationResponse"></message>
   
   <message name="setAutoscaleHysteresisRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setAutoscaleHysteresisResponse"></message>
   
   <message name="setAutoscaleHysteresisByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setAutoscaleHysteresisByLocationResponse"></message>
   
   <message name="setAutoscaleImageidRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setAutoscaleImageidResponse"></message>
   
   <message name="setAutoscaleImageidByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setAutoscaleImageidByLocationResponse"></message>
   
   <message name="setAutoscaleIpstouseRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:Pool.AutoscaleIpstouseArray" />
   </message>
   
   <message name="setAutoscaleIpstouseResponse"></message>
   
   <message name="setAutoscaleIpstouseByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:Pool.AutoscaleIpstouseArray" />
   </message>
   
   <message name="setAutoscaleIpstouseByLocationResponse"></message>
   
   <message name="setAutoscaleLastnodeIdletimeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setAutoscaleLastnodeIdletimeResponse"></message>
   
   <message name="setAutoscaleLastnodeIdletimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setAutoscaleLastnodeIdletimeByLocationResponse"></message>
   
   <message name="setAutoscaleMaxNodesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setAutoscaleMaxNodesResponse"></message>
   
   <message name="setAutoscaleMaxNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setAutoscaleMaxNodesByLocationResponse"></message>
   
   <message name="setAutoscaleMinNodesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setAutoscaleMinNodesResponse"></message>
   
   <message name="setAutoscaleMinNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setAutoscaleMinNodesByLocationResponse"></message>
   
   <message name="setAutoscaleNameRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setAutoscaleNameResponse"></message>
   
   <message name="setAutoscaleNameByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setAutoscaleNameByLocationResponse"></message>
   
   <message name="setAutoscalePortRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setAutoscalePortResponse"></message>
   
   <message name="setAutoscalePortByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setAutoscalePortByLocationResponse"></message>
   
   <message name="setAutoscaleRefractoryRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setAutoscaleRefractoryResponse"></message>
   
   <message name="setAutoscaleRefractoryByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setAutoscaleRefractoryByLocationResponse"></message>
   
   <message name="setAutoscaleResponseTimeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setAutoscaleResponseTimeResponse"></message>
   
   <message name="setAutoscaleResponseTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setAutoscaleResponseTimeByLocationResponse"></message>
   
   <message name="setAutoscaleScaledownLevelRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setAutoscaleScaledownLevelResponse"></message>
   
   <message name="setAutoscaleScaledownLevelByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setAutoscaleScaledownLevelByLocationResponse"></message>
   
   <message name="setAutoscaleScaleupLevelRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setAutoscaleScaleupLevelResponse"></message>
   
   <message name="setAutoscaleScaleupLevelByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setAutoscaleScaleupLevelByLocationResponse"></message>
   
   <message name="setAutoscaleSizeidRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setAutoscaleSizeidResponse"></message>
   
   <message name="setAutoscaleSizeidByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setAutoscaleSizeidByLocationResponse"></message>
   
   <message name="setBandwidthClassRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setBandwidthClassResponse"></message>
   
   <message name="setBandwidthClassByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setBandwidthClassByLocationResponse"></message>
   
   <message name="setDisabledNodesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="nodes" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setDisabledNodesResponse"></message>
   
   <message name="setDisabledNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="nodes" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setDisabledNodesByLocationResponse"></message>
   
   <message name="setDrainingNodesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setDrainingNodesResponse"></message>
   
   <message name="setDrainingNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setDrainingNodesByLocationResponse"></message>
   
   <message name="setErrorFileRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setErrorFileResponse"></message>
   
   <message name="setFTPSupportRfc2428Request">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setFTPSupportRfc2428Response"></message>
   
   <message name="setFTPSupportRfc2428ByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setFTPSupportRfc2428ByLocationResponse"></message>
   
   <message name="setFailpoolRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setFailpoolResponse"></message>
   
   <message name="setFailpoolByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setFailpoolByLocationResponse"></message>
   
   <message name="setKeepaliveRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setKeepaliveResponse"></message>
   
   <message name="setKeepaliveByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setKeepaliveByLocationResponse"></message>
   
   <message name="setKeepaliveNonIdempotentRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setKeepaliveNonIdempotentResponse"></message>
   
   <message name="setKeepaliveNonIdempotentByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setKeepaliveNonIdempotentByLocationResponse"></message>
   
   <message name="setLoadBalancingAlgorithmRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:Pool.LoadBalancingAlgorithmArray" />
   </message>
   
   <message name="setLoadBalancingAlgorithmResponse"></message>
   
   <message name="setLoadBalancingAlgorithmByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:Pool.LoadBalancingAlgorithmArray" />
   </message>
   
   <message name="setLoadBalancingAlgorithmByLocationResponse"></message>
   
   <message name="setMaxConnectTimeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxConnectTimeResponse"></message>
   
   <message name="setMaxConnectTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxConnectTimeByLocationResponse"></message>
   
   <message name="setMaxConnectionAttemptsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxConnectionAttemptsResponse"></message>
   
   <message name="setMaxConnectionAttemptsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxConnectionAttemptsByLocationResponse"></message>
   
   <message name="setMaxConnectionsPernodeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxConnectionsPernodeResponse"></message>
   
   <message name="setMaxConnectionsPernodeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxConnectionsPernodeByLocationResponse"></message>
   
   <message name="setMaxIdleConnectionsPerNodeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxIdleConnectionsPerNodeResponse"></message>
   
   <message name="setMaxIdleConnectionsPerNodeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxIdleConnectionsPerNodeByLocationResponse"></message>
   
   <message name="setMaxKeepalivesPerNodeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxKeepalivesPerNodeResponse"></message>
   
   <message name="setMaxKeepalivesPerNodeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxKeepalivesPerNodeByLocationResponse"></message>
   
   <message name="setMaxQueueSizeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxQueueSizeResponse"></message>
   
   <message name="setMaxQueueSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxQueueSizeByLocationResponse"></message>
   
   <message name="setMaxReplyTimeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxReplyTimeResponse"></message>
   
   <message name="setMaxReplyTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxReplyTimeByLocationResponse"></message>
   
   <message name="setMaxTimedOutConnectionAttemptsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxTimedOutConnectionAttemptsResponse"></message>
   
   <message name="setMaxTimedOutConnectionAttemptsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setMaxTimedOutConnectionAttemptsByLocationResponse"></message>
   
   <message name="setMonitorsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setMonitorsResponse"></message>
   
   <message name="setMonitorsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setMonitorsByLocationResponse"></message>
   
   <message name="setNodeConnCloseRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setNodeConnCloseResponse"></message>
   
   <message name="setNodeConnCloseByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setNodeConnCloseByLocationResponse"></message>
   
   <message name="setNodeConnectionAttemptsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setNodeConnectionAttemptsResponse"></message>
   
   <message name="setNodeConnectionAttemptsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setNodeConnectionAttemptsByLocationResponse"></message>
   
   <message name="setNodeFailTimeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setNodeFailTimeResponse"></message>
   
   <message name="setNodeFailTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setNodeFailTimeByLocationResponse"></message>
   
   <message name="setNodeUseNagleRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setNodeUseNagleResponse"></message>
   
   <message name="setNodeUseNagleByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setNodeUseNagleByLocationResponse"></message>
   
   <message name="setNodesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setNodesResponse"></message>
   
   <message name="setNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setNodesByLocationResponse"></message>
   
   <message name="setNodesPriorityValueRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="node_values" type="zeusns:Pool.PriorityValueDefinitionArrayArray" />
   </message>
   
   <message name="setNodesPriorityValueResponse"></message>
   
   <message name="setNodesPriorityValueByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="node_values" type="zeusns:Pool.PriorityValueDefinitionArrayArray" />
   </message>
   
   <message name="setNodesPriorityValueByLocationResponse"></message>
   
   <message name="setNodesWeightingsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="nodes_values" type="zeusns:Pool.WeightingsDefinitionArrayArray" />
   </message>
   
   <message name="setNodesWeightingsResponse"></message>
   
   <message name="setNodesWeightingsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="nodes_values" type="zeusns:Pool.WeightingsDefinitionArrayArray" />
   </message>
   
   <message name="setNodesWeightingsByLocationResponse"></message>
   
   <message name="setNoteRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setNoteResponse"></message>
   
   <message name="setPassiveMonitoringRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setPassiveMonitoringResponse"></message>
   
   <message name="setPassiveMonitoringByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setPassiveMonitoringByLocationResponse"></message>
   
   <message name="setPersistenceRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setPersistenceResponse"></message>
   
   <message name="setPersistenceByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setPersistenceByLocationResponse"></message>
   
   <message name="setPriorityEnabledRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setPriorityEnabledResponse"></message>
   
   <message name="setPriorityEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setPriorityEnabledByLocationResponse"></message>
   
   <message name="setPriorityNodesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setPriorityNodesResponse"></message>
   
   <message name="setPriorityNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setPriorityNodesByLocationResponse"></message>
   
   <message name="setQueueTimeoutRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setQueueTimeoutResponse"></message>
   
   <message name="setQueueTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:unsignedIntArray" />
   </message>
   
   <message name="setQueueTimeoutByLocationResponse"></message>
   
   <message name="setSMTPSendStartTLSRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSMTPSendStartTLSResponse"></message>
   
   <message name="setSMTPSendStartTLSByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSMTPSendStartTLSByLocationResponse"></message>
   
   <message name="setSSLClientAuthRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLClientAuthResponse"></message>
   
   <message name="setSSLClientAuthByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLClientAuthByLocationResponse"></message>
   
   <message name="setSSLEncryptRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLEncryptResponse"></message>
   
   <message name="setSSLEncryptByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLEncryptByLocationResponse"></message>
   
   <message name="setSSLEnhanceRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLEnhanceResponse"></message>
   
   <message name="setSSLEnhanceByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLEnhanceByLocationResponse"></message>
   
   <message name="setSSLSendCloseAlertsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLSendCloseAlertsResponse"></message>
   
   <message name="setSSLSendCloseAlertsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLSendCloseAlertsByLocationResponse"></message>
   
   <message name="setSSLServerNameExtensionRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLServerNameExtensionResponse"></message>
   
   <message name="setSSLServerNameExtensionByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLServerNameExtensionByLocationResponse"></message>
   
   <message name="setSSLStrictVerifyRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLStrictVerifyResponse"></message>
   
   <message name="setSSLStrictVerifyByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setSSLStrictVerifyByLocationResponse"></message>
   
   <message name="setTransparentRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setTransparentResponse"></message>
   
   <message name="setTransparentByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:booleanArray" />
   </message>
   
   <message name="setTransparentByLocationResponse"></message>
   
   <message name="setUDPAcceptFromRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:Pool.UDPAcceptFromArray" />
   </message>
   
   <message name="setUDPAcceptFromResponse"></message>
   
   <message name="setUDPAcceptFromByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:Pool.UDPAcceptFromArray" />
   </message>
   
   <message name="setUDPAcceptFromByLocationResponse"></message>
   
   <message name="setUDPAcceptFromIPMaskRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setUDPAcceptFromIPMaskResponse"></message>
   
   <message name="setUDPAcceptFromIPMaskByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setUDPAcceptFromIPMaskByLocationResponse"></message>
   
   <message name="DeploymentError">
      <part name="parameters" type="zeusns:DeploymentError" />
   </message>
   
   <message name="InvalidInput">
      <part name="parameters" type="zeusns:InvalidInput" />
   </message>
   
   <message name="InvalidObjectName">
      <part name="parameters" type="zeusns:InvalidObjectName" />
   </message>
   
   <message name="InvalidOperation">
      <part name="parameters" type="zeusns:InvalidOperation" />
   </message>
   
   <message name="ObjectAlreadyExists">
      <part name="parameters" type="zeusns:ObjectAlreadyExists" />
   </message>
   
   <message name="ObjectDoesNotExist">
      <part name="parameters" type="zeusns:ObjectDoesNotExist" />
   </message>
   
   <message name="ObjectInUse">
      <part name="parameters" type="zeusns:ObjectInUse" />
   </message>
   
   <portType name="PoolPort">
      <operation name="addAutoScaledPool">
         <documentation>
            Add each of the named auto-scaled pools, using the node lists for each. The node lists can be empty
         </documentation>
         
         <input message="zeusns:addAutoScaledPoolRequest"/>
         <output message="zeusns:addAutoScaledPoolResponse"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addDrainingNodes">
         <documentation>
            Add nodes to the lists of draining nodes, for each of the named pools.
         </documentation>
         
         <input message="zeusns:addDrainingNodesRequest"/>
         <output message="zeusns:addDrainingNodesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addDrainingNodesByLocation">
         <documentation>
            Add nodes to the lists of draining nodes, for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:addDrainingNodesByLocationRequest"/>
         <output message="zeusns:addDrainingNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addMonitors">
         <documentation>
            Add monitors to each of the named pools.
         </documentation>
         
         <input message="zeusns:addMonitorsRequest"/>
         <output message="zeusns:addMonitorsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addMonitorsByLocation">
         <documentation>
            Add monitors to each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:addMonitorsByLocationRequest"/>
         <output message="zeusns:addMonitorsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addNodes">
         <documentation>
            Add nodes to each of the named pools.
         </documentation>
         
         <input message="zeusns:addNodesRequest"/>
         <output message="zeusns:addNodesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addNodesByLocation">
         <documentation>
            Add nodes to each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:addNodesByLocationRequest"/>
         <output message="zeusns:addNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addPool">
         <documentation>
            Add each of the named pools, using the node lists for each.
         </documentation>
         
         <input message="zeusns:addPoolRequest"/>
         <output message="zeusns:addPoolResponse"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="copyPool">
         <documentation>
            Copy each of the named pools.
         </documentation>
         
         <input message="zeusns:copyPoolRequest"/>
         <output message="zeusns:copyPoolResponse"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="deletePool">
         <documentation>
            Delete each of the named pools.
         </documentation>
         
         <input message="zeusns:deletePoolRequest"/>
         <output message="zeusns:deletePoolResponse"/>
         <fault name="ObjectInUse" message="zeusns:ObjectInUse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="disableNodes">
         <documentation>
            For each of the named pools, disable the specified nodes in the pool.
         </documentation>
         
         <input message="zeusns:disableNodesRequest"/>
         <output message="zeusns:disableNodesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="disableNodesByLocation">
         <documentation>
            For each of the named pools, disable the specified nodes in the pool. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:disableNodesByLocationRequest"/>
         <output message="zeusns:disableNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="enableNodes">
         <documentation>
            For each of the named pools, enable the specified nodes that are disabled in the pool.
         </documentation>
         
         <input message="zeusns:enableNodesRequest"/>
         <output message="zeusns:enableNodesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="enableNodesByLocation">
         <documentation>
            For each of the named pools, enable the specified nodes that are disabled in the pool. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:enableNodesByLocationRequest"/>
         <output message="zeusns:enableNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="getAutoscaleCloudcredentials">
         <documentation>
            Get the cloud credentials for this auto-scaled pool
         </documentation>
         
         <input message="zeusns:getAutoscaleCloudcredentialsRequest"/>
         <output message="zeusns:getAutoscaleCloudcredentialsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleCloudcredentialsByLocation">
         <documentation>
            Get the cloud credentials for this auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscaleCloudcredentialsByLocationRequest"/>
         <output message="zeusns:getAutoscaleCloudcredentialsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleCluster">
         <documentation>
            Get The ESX host or ESX cluster name to put the new virtual machine instances on.
         </documentation>
         
         <input message="zeusns:getAutoscaleClusterRequest"/>
         <output message="zeusns:getAutoscaleClusterResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleClusterByLocation">
         <documentation>
            Get The ESX host or ESX cluster name to put the new virtual machine instances on. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscaleClusterByLocationRequest"/>
         <output message="zeusns:getAutoscaleClusterByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleDatacenter">
         <documentation>
            Get The name of the logical datacenter on the vCenter server
         </documentation>
         
         <input message="zeusns:getAutoscaleDatacenterRequest"/>
         <output message="zeusns:getAutoscaleDatacenterResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleDatacenterByLocation">
         <documentation>
            Get The name of the logical datacenter on the vCenter server This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscaleDatacenterByLocationRequest"/>
         <output message="zeusns:getAutoscaleDatacenterByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleDatastore">
         <documentation>
            Get The name of the datastore to be used by the newly created virtual machine.
         </documentation>
         
         <input message="zeusns:getAutoscaleDatastoreRequest"/>
         <output message="zeusns:getAutoscaleDatastoreResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleDatastoreByLocation">
         <documentation>
            Get The name of the datastore to be used by the newly created virtual machine. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscaleDatastoreByLocationRequest"/>
         <output message="zeusns:getAutoscaleDatastoreByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleEnabled">
         <documentation>
            Get whether this pool uses auto-scaling.
         </documentation>
         
         <input message="zeusns:getAutoscaleEnabledRequest"/>
         <output message="zeusns:getAutoscaleEnabledResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleEnabledByLocation">
         <documentation>
            Get whether this pool uses auto-scaling. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscaleEnabledByLocationRequest"/>
         <output message="zeusns:getAutoscaleEnabledByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleExternal">
         <documentation>
            Get whether autoscaling is handled externally or internally
         </documentation>
         
         <input message="zeusns:getAutoscaleExternalRequest"/>
         <output message="zeusns:getAutoscaleExternalResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleExternalByLocation">
         <documentation>
            Get whether autoscaling is handled externally or internally This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscaleExternalByLocationRequest"/>
         <output message="zeusns:getAutoscaleExternalByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleHysteresis">
         <documentation>
            Get the hysteresis period for an auto-scaled pool
         </documentation>
         
         <input message="zeusns:getAutoscaleHysteresisRequest"/>
         <output message="zeusns:getAutoscaleHysteresisResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleHysteresisByLocation">
         <documentation>
            Get the hysteresis period for an auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscaleHysteresisByLocationRequest"/>
         <output message="zeusns:getAutoscaleHysteresisByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleImageid">
         <documentation>
            Get the image identifier
         </documentation>
         
         <input message="zeusns:getAutoscaleImageidRequest"/>
         <output message="zeusns:getAutoscaleImageidResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleImageidByLocation">
         <documentation>
            Get the image identifier This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscaleImageidByLocationRequest"/>
         <output message="zeusns:getAutoscaleImageidByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleIpstouse">
         <documentation>
            Get whether to use the public or private IPs
         </documentation>
         
         <input message="zeusns:getAutoscaleIpstouseRequest"/>
         <output message="zeusns:getAutoscaleIpstouseResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleIpstouseByLocation">
         <documentation>
            Get whether to use the public or private IPs This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscaleIpstouseByLocationRequest"/>
         <output message="zeusns:getAutoscaleIpstouseByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleLastnodeIdletime">
         <documentation>
            Get the idle time of the last node in an autoscaled pool before it can be destroyed
         </documentation>
         
         <input message="zeusns:getAutoscaleLastnodeIdletimeRequest"/>
         <output message="zeusns:getAutoscaleLastnodeIdletimeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleLastnodeIdletimeByLocation">
         <documentation>
            Get the idle time of the last node in an autoscaled pool before it can be destroyed This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscaleLastnodeIdletimeByLocationRequest"/>
         <output message="zeusns:getAutoscaleLastnodeIdletimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleMaxNodes">
         <documentation>
            Get the maximum number of nodes in an auto-scaled pool
         </documentation>
         
         <input message="zeusns:getAutoscaleMaxNodesRequest"/>
         <output message="zeusns:getAutoscaleMaxNodesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleMaxNodesByLocation">
         <documentation>
            Get the maximum number of nodes in an auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscaleMaxNodesByLocationRequest"/>
         <output message="zeusns:getAutoscaleMaxNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleMinNodes">
         <documentation>
            Get the minimum number of nodes in an auto-scaled pool
         </documentation>
         
         <input message="zeusns:getAutoscaleMinNodesRequest"/>
         <output message="zeusns:getAutoscaleMinNodesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleMinNodesByLocation">
         <documentation>
            Get the minimum number of nodes in an auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscaleMinNodesByLocationRequest"/>
         <output message="zeusns:getAutoscaleMinNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleName">
         <documentation>
            Get the node name prefix for this auto-scaled pool
         </documentation>
         
         <input message="zeusns:getAutoscaleNameRequest"/>
         <output message="zeusns:getAutoscaleNameResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleNameByLocation">
         <documentation>
            Get the node name prefix for this auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscaleNameByLocationRequest"/>
         <output message="zeusns:getAutoscaleNameByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscalePort">
         <documentation>
            Get the port number for this auto-scaled pool
         </documentation>
         
         <input message="zeusns:getAutoscalePortRequest"/>
         <output message="zeusns:getAutoscalePortResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscalePortByLocation">
         <documentation>
            Get the port number for this auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscalePortByLocationRequest"/>
         <output message="zeusns:getAutoscalePortByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleRefractory">
         <documentation>
            Get the refractory period for an auto-scaled pool
         </documentation>
         
         <input message="zeusns:getAutoscaleRefractoryRequest"/>
         <output message="zeusns:getAutoscaleRefractoryResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleRefractoryByLocation">
         <documentation>
            Get the refractory period for an auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscaleRefractoryByLocationRequest"/>
         <output message="zeusns:getAutoscaleRefractoryByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleResponseTime">
         <documentation>
            Get the expected node response time in milliseconds
         </documentation>
         
         <input message="zeusns:getAutoscaleResponseTimeRequest"/>
         <output message="zeusns:getAutoscaleResponseTimeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleResponseTimeByLocation">
         <documentation>
            Get the expected node response time in milliseconds This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscaleResponseTimeByLocationRequest"/>
         <output message="zeusns:getAutoscaleResponseTimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleScaledownLevel">
         <documentation>
            Get the threshold of conforming requests for scaling down
         </documentation>
         
         <input message="zeusns:getAutoscaleScaledownLevelRequest"/>
         <output message="zeusns:getAutoscaleScaledownLevelResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleScaledownLevelByLocation">
         <documentation>
            Get the threshold of conforming requests for scaling down This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscaleScaledownLevelByLocationRequest"/>
         <output message="zeusns:getAutoscaleScaledownLevelByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleScaleupLevel">
         <documentation>
            Get the acceptable lower percentage of conforming requests
         </documentation>
         
         <input message="zeusns:getAutoscaleScaleupLevelRequest"/>
         <output message="zeusns:getAutoscaleScaleupLevelResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleScaleupLevelByLocation">
         <documentation>
            Get the acceptable lower percentage of conforming requests This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscaleScaleupLevelByLocationRequest"/>
         <output message="zeusns:getAutoscaleScaleupLevelByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleSizeid">
         <documentation>
            Get the size identifier
         </documentation>
         
         <input message="zeusns:getAutoscaleSizeidRequest"/>
         <output message="zeusns:getAutoscaleSizeidResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAutoscaleSizeidByLocation">
         <documentation>
            Get the size identifier This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscaleSizeidByLocationRequest"/>
         <output message="zeusns:getAutoscaleSizeidByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getBandwidthClass">
         <documentation>
            Get the Bandwidth Classes that each of the named pools uses.
         </documentation>
         
         <input message="zeusns:getBandwidthClassRequest"/>
         <output message="zeusns:getBandwidthClassResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getBandwidthClassByLocation">
         <documentation>
            Get the Bandwidth Classes that each of the named pools uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getBandwidthClassByLocationRequest"/>
         <output message="zeusns:getBandwidthClassByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getDisabledNodes">
         <documentation>
            For each of the named pools, get the disabled nodes in the pool.
         </documentation>
         
         <input message="zeusns:getDisabledNodesRequest"/>
         <output message="zeusns:getDisabledNodesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getDisabledNodesByLocation">
         <documentation>
            For each of the named pools, get the disabled nodes in the pool. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getDisabledNodesByLocationRequest"/>
         <output message="zeusns:getDisabledNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getDrainingNodes">
         <documentation>
            Get the lists of draining nodes for each of the named pools.
         </documentation>
         
         <input message="zeusns:getDrainingNodesRequest"/>
         <output message="zeusns:getDrainingNodesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getDrainingNodesByLocation">
         <documentation>
            Get the lists of draining nodes for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getDrainingNodesByLocationRequest"/>
         <output message="zeusns:getDrainingNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getErrorFile">
         <documentation>
            This method is now obsolete and is replaced by VirtualServer.getErrorFile.
         </documentation>
         
         <input message="zeusns:getErrorFileRequest"/>
         <output message="zeusns:getErrorFileResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFTPSupportRfc2428">
         <documentation>
            Get whether backend IPv4 nodes understand the FTP EPRT and EPSV commands.
         </documentation>
         
         <input message="zeusns:getFTPSupportRfc2428Request"/>
         <output message="zeusns:getFTPSupportRfc2428Response"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFTPSupportRfc2428ByLocation">
         <documentation>
            Get whether backend IPv4 nodes understand the FTP EPRT and EPSV commands. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getFTPSupportRfc2428ByLocationRequest"/>
         <output message="zeusns:getFTPSupportRfc2428ByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFailpool">
         <documentation>
            Get the pool to use when all nodes in a pool fail, for each of the named pools.
         </documentation>
         
         <input message="zeusns:getFailpoolRequest"/>
         <output message="zeusns:getFailpoolResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFailpoolByLocation">
         <documentation>
            Get the pool to use when all nodes in a pool fail, for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getFailpoolByLocationRequest"/>
         <output message="zeusns:getFailpoolByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getKeepalive">
         <documentation>
            Get whether each of the named pools should maintain HTTP keepalive connections to the nodes.
         </documentation>
         
         <input message="zeusns:getKeepaliveRequest"/>
         <output message="zeusns:getKeepaliveResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getKeepaliveByLocation">
         <documentation>
            Get whether each of the named pools should maintain HTTP keepalive connections to the nodes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getKeepaliveByLocationRequest"/>
         <output message="zeusns:getKeepaliveByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getKeepaliveNonIdempotent">
         <documentation>
            Get whether each of the named pools should maintain HTTP keepalive connections to the nodes for non-idempotent requests.
         </documentation>
         
         <input message="zeusns:getKeepaliveNonIdempotentRequest"/>
         <output message="zeusns:getKeepaliveNonIdempotentResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getKeepaliveNonIdempotentByLocation">
         <documentation>
            Get whether each of the named pools should maintain HTTP keepalive connections to the nodes for non-idempotent requests. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getKeepaliveNonIdempotentByLocationRequest"/>
         <output message="zeusns:getKeepaliveNonIdempotentByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLoadBalancingAlgorithm">
         <documentation>
            Get the load balancing algorithms that each of the named pools uses.
         </documentation>
         
         <input message="zeusns:getLoadBalancingAlgorithmRequest"/>
         <output message="zeusns:getLoadBalancingAlgorithmResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLoadBalancingAlgorithmByLocation">
         <documentation>
            Get the load balancing algorithms that each of the named pools uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getLoadBalancingAlgorithmByLocationRequest"/>
         <output message="zeusns:getLoadBalancingAlgorithmByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxConnectTime">
         <documentation>
            Get the time that each of the named pools should wait for a connection to establish to a node before trying another node, in seconds.
         </documentation>
         
         <input message="zeusns:getMaxConnectTimeRequest"/>
         <output message="zeusns:getMaxConnectTimeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxConnectTimeByLocation">
         <documentation>
            Get the time that each of the named pools should wait for a connection to establish to a node before trying another node, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaxConnectTimeByLocationRequest"/>
         <output message="zeusns:getMaxConnectTimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxConnectionAttempts">
         <documentation>
            Get the number of times that each of the named pools can try to connect to any of its nodes before sending an error response.
         </documentation>
         
         <input message="zeusns:getMaxConnectionAttemptsRequest"/>
         <output message="zeusns:getMaxConnectionAttemptsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxConnectionAttemptsByLocation">
         <documentation>
            Get the number of times that each of the named pools can try to connect to any of its nodes before sending an error response. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaxConnectionAttemptsByLocationRequest"/>
         <output message="zeusns:getMaxConnectionAttemptsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxConnectionsPernode">
         <documentation>
            Get is the maximum number of conncurrent connections allowed to each node in the pool per machine.
         </documentation>
         
         <input message="zeusns:getMaxConnectionsPernodeRequest"/>
         <output message="zeusns:getMaxConnectionsPernodeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxConnectionsPernodeByLocation">
         <documentation>
            Get is the maximum number of conncurrent connections allowed to each node in the pool per machine. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaxConnectionsPernodeByLocationRequest"/>
         <output message="zeusns:getMaxConnectionsPernodeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxIdleConnectionsPerNode">
         <documentation>
            Get the maximum numbers of unused HTTP keepalive connections that each of the named pools should maintain to an individual node.
         </documentation>
         
         <input message="zeusns:getMaxIdleConnectionsPerNodeRequest"/>
         <output message="zeusns:getMaxIdleConnectionsPerNodeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxIdleConnectionsPerNodeByLocation">
         <documentation>
            Get the maximum numbers of unused HTTP keepalive connections that each of the named pools should maintain to an individual node. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaxIdleConnectionsPerNodeByLocationRequest"/>
         <output message="zeusns:getMaxIdleConnectionsPerNodeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxKeepalivesPerNode">
         <documentation>
            getMaxKeepalivesPerNode is deprecated, please use getMaxIdleConnectionsPerNode instead.
         </documentation>
         
         <input message="zeusns:getMaxKeepalivesPerNodeRequest"/>
         <output message="zeusns:getMaxKeepalivesPerNodeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxKeepalivesPerNodeByLocation">
         <documentation>
            getMaxKeepalivesPerNode is deprecated, please use getMaxIdleConnectionsPerNode instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaxKeepalivesPerNodeByLocationRequest"/>
         <output message="zeusns:getMaxKeepalivesPerNodeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxQueueSize">
         <documentation>
            Get is the maximum number of connections that can be queued due to connection limits.
         </documentation>
         
         <input message="zeusns:getMaxQueueSizeRequest"/>
         <output message="zeusns:getMaxQueueSizeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxQueueSizeByLocation">
         <documentation>
            Get is the maximum number of connections that can be queued due to connection limits. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaxQueueSizeByLocationRequest"/>
         <output message="zeusns:getMaxQueueSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxReplyTime">
         <documentation>
            Get the time that each of the named pools should wait for a response from a node before either discarding the request or trying another node, in seconds (retryable requests only).
         </documentation>
         
         <input message="zeusns:getMaxReplyTimeRequest"/>
         <output message="zeusns:getMaxReplyTimeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxReplyTimeByLocation">
         <documentation>
            Get the time that each of the named pools should wait for a response from a node before either discarding the request or trying another node, in seconds (retryable requests only). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaxReplyTimeByLocationRequest"/>
         <output message="zeusns:getMaxReplyTimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxTimedOutConnectionAttempts">
         <documentation>
            Get the number of times that each of the named pools can try to connect and time out waiting for a response, by exceeding max_reply_time, to any of its nodes before sending an error response.
         </documentation>
         
         <input message="zeusns:getMaxTimedOutConnectionAttemptsRequest"/>
         <output message="zeusns:getMaxTimedOutConnectionAttemptsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxTimedOutConnectionAttemptsByLocation">
         <documentation>
            Get the number of times that each of the named pools can try to connect and time out waiting for a response, by exceeding max_reply_time, to any of its nodes before sending an error response. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaxTimedOutConnectionAttemptsByLocationRequest"/>
         <output message="zeusns:getMaxTimedOutConnectionAttemptsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMonitors">
         <documentation>
            Get the list of all monitors.
         </documentation>
         
         <input message="zeusns:getMonitorsRequest"/>
         <output message="zeusns:getMonitorsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMonitorsByLocation">
         <documentation>
            Get the list of all monitors. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMonitorsByLocationRequest"/>
         <output message="zeusns:getMonitorsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNodeConnClose">
         <documentation>
            Get whether all connections that have been sent to a node are closed when that node is marked as dead.
         </documentation>
         
         <input message="zeusns:getNodeConnCloseRequest"/>
         <output message="zeusns:getNodeConnCloseResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNodeConnCloseByLocation">
         <documentation>
            Get whether all connections that have been sent to a node are closed when that node is marked as dead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getNodeConnCloseByLocationRequest"/>
         <output message="zeusns:getNodeConnCloseByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNodeConnectionAttempts">
         <documentation>
            Get the number of times your traffic manager should try and connect to a node before registering it as failed when passive monitoring is enabled.
         </documentation>
         
         <input message="zeusns:getNodeConnectionAttemptsRequest"/>
         <output message="zeusns:getNodeConnectionAttemptsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNodeConnectionAttemptsByLocation">
         <documentation>
            Get the number of times your traffic manager should try and connect to a node before registering it as failed when passive monitoring is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getNodeConnectionAttemptsByLocationRequest"/>
         <output message="zeusns:getNodeConnectionAttemptsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNodeFailTime">
         <documentation>
            Get the length of time a failed node should be isolated for before testing it with new traffic, in seconds
         </documentation>
         
         <input message="zeusns:getNodeFailTimeRequest"/>
         <output message="zeusns:getNodeFailTimeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNodeFailTimeByLocation">
         <documentation>
            Get the length of time a failed node should be isolated for before testing it with new traffic, in seconds This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getNodeFailTimeByLocationRequest"/>
         <output message="zeusns:getNodeFailTimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNodeUseNagle">
         <documentation>
            Get whether Nagle's algorithm should be used for TCP connections to the back-end nodes.
         </documentation>
         
         <input message="zeusns:getNodeUseNagleRequest"/>
         <output message="zeusns:getNodeUseNagleResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNodeUseNagleByLocation">
         <documentation>
            Get whether Nagle's algorithm should be used for TCP connections to the back-end nodes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getNodeUseNagleByLocationRequest"/>
         <output message="zeusns:getNodeUseNagleByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNodes">
         <documentation>
            Get the lists of nodes for each of the named pools.
         </documentation>
         
         <input message="zeusns:getNodesRequest"/>
         <output message="zeusns:getNodesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNodesByLocation">
         <documentation>
            Get the lists of nodes for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getNodesByLocationRequest"/>
         <output message="zeusns:getNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNodesConnectionCounts">
         <documentation>
            Get the number of active connections to each of the specified nodes.
         </documentation>
         
         <input message="zeusns:getNodesConnectionCountsRequest"/>
         <output message="zeusns:getNodesConnectionCountsResponse"/>
      </operation>
      
      <operation name="getNodesLastUsed">
         <documentation>
            Get the number of seconds since each of the specified nodes was last used.
         </documentation>
         
         <input message="zeusns:getNodesLastUsedRequest"/>
         <output message="zeusns:getNodesLastUsedResponse"/>
      </operation>
      
      <operation name="getNodesPriorityValue">
         <documentation>
            For each of the named pools, get the priority values for the named nodes in each pool.
         </documentation>
         
         <input message="zeusns:getNodesPriorityValueRequest"/>
         <output message="zeusns:getNodesPriorityValueResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNodesPriorityValueByLocation">
         <documentation>
            For each of the named pools, get the priority values for the named nodes in each pool. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getNodesPriorityValueByLocationRequest"/>
         <output message="zeusns:getNodesPriorityValueByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNodesWeightings">
         <documentation>
            For each of the named pools, get the weighting values for the specified nodes in this pool.
         </documentation>
         
         <input message="zeusns:getNodesWeightingsRequest"/>
         <output message="zeusns:getNodesWeightingsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNodesWeightingsByLocation">
         <documentation>
            For each of the named pools, get the weighting values for the specified nodes in this pool. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getNodesWeightingsByLocationRequest"/>
         <output message="zeusns:getNodesWeightingsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNote">
         <documentation>
            Get the note for each of the named pools.
         </documentation>
         
         <input message="zeusns:getNoteRequest"/>
         <output message="zeusns:getNoteResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getPassiveMonitoring">
         <documentation>
            Get whether this pool uses passive monitoring.
         </documentation>
         
         <input message="zeusns:getPassiveMonitoringRequest"/>
         <output message="zeusns:getPassiveMonitoringResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getPassiveMonitoringByLocation">
         <documentation>
            Get whether this pool uses passive monitoring. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getPassiveMonitoringByLocationRequest"/>
         <output message="zeusns:getPassiveMonitoringByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getPersistence">
         <documentation>
            Get the default Session Persistence classes that each of the named pools uses.
         </documentation>
         
         <input message="zeusns:getPersistenceRequest"/>
         <output message="zeusns:getPersistenceResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getPersistenceByLocation">
         <documentation>
            Get the default Session Persistence classes that each of the named pools uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getPersistenceByLocationRequest"/>
         <output message="zeusns:getPersistenceByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getPoolNames">
         <documentation>
            Get the names of all of the configured pools.
         </documentation>
         
         <input message="zeusns:getPoolNamesRequest"/>
         <output message="zeusns:getPoolNamesResponse"/>
      </operation>
      
      <operation name="getPriorityEnabled">
         <documentation>
            Get whether each of the named pools uses priority lists.
         </documentation>
         
         <input message="zeusns:getPriorityEnabledRequest"/>
         <output message="zeusns:getPriorityEnabledResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getPriorityEnabledByLocation">
         <documentation>
            Get whether each of the named pools uses priority lists. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getPriorityEnabledByLocationRequest"/>
         <output message="zeusns:getPriorityEnabledByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getPriorityNodes">
         <documentation>
            Get the minimum number of highest-priority active nodes, for each of the named pools.
         </documentation>
         
         <input message="zeusns:getPriorityNodesRequest"/>
         <output message="zeusns:getPriorityNodesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getPriorityNodesByLocation">
         <documentation>
            Get the minimum number of highest-priority active nodes, for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getPriorityNodesByLocationRequest"/>
         <output message="zeusns:getPriorityNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getPriorityValues">
         <documentation>
            For each of the named pools, get the priority values for each of the nodes in each pool.
         </documentation>
         
         <input message="zeusns:getPriorityValuesRequest"/>
         <output message="zeusns:getPriorityValuesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getPriorityValuesByLocation">
         <documentation>
            For each of the named pools, get the priority values for each of the nodes in each pool. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getPriorityValuesByLocationRequest"/>
         <output message="zeusns:getPriorityValuesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getQueueTimeout">
         <documentation>
            Get is the maximum time to keep a connections queued in seconds. A value of 0 will not timeout queued connections.
         </documentation>
         
         <input message="zeusns:getQueueTimeoutRequest"/>
         <output message="zeusns:getQueueTimeoutResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getQueueTimeoutByLocation">
         <documentation>
            Get is the maximum time to keep a connections queued in seconds. A value of 0 will not timeout queued connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getQueueTimeoutByLocationRequest"/>
         <output message="zeusns:getQueueTimeoutByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSMTPSendStartTLS">
         <documentation>
            Get whether each of the named pools should upgrade SMTP connections to SSL using STARTTLS (the alternative is to encrypt the entire connection).
         </documentation>
         
         <input message="zeusns:getSMTPSendStartTLSRequest"/>
         <output message="zeusns:getSMTPSendStartTLSResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSMTPSendStartTLSByLocation">
         <documentation>
            Get whether each of the named pools should upgrade SMTP connections to SSL using STARTTLS (the alternative is to encrypt the entire connection). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSMTPSendStartTLSByLocationRequest"/>
         <output message="zeusns:getSMTPSendStartTLSByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLClientAuth">
         <documentation>
            Get whether each of the named pools should use client authentication. If client authentication is enabled and a back-end node asks for a client authentication, a suitable certificate and private key will be used from the SSL Client Certificates catalog.
         </documentation>
         
         <input message="zeusns:getSSLClientAuthRequest"/>
         <output message="zeusns:getSSLClientAuthResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLClientAuthByLocation">
         <documentation>
            Get whether each of the named pools should use client authentication. If client authentication is enabled and a back-end node asks for a client authentication, a suitable certificate and private key will be used from the SSL Client Certificates catalog. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLClientAuthByLocationRequest"/>
         <output message="zeusns:getSSLClientAuthByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLEncrypt">
         <documentation>
            Get whether each of the named pools should encrypt data to the back-end nodes using SSL.
         </documentation>
         
         <input message="zeusns:getSSLEncryptRequest"/>
         <output message="zeusns:getSSLEncryptResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLEncryptByLocation">
         <documentation>
            Get whether each of the named pools should encrypt data to the back-end nodes using SSL. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLEncryptByLocationRequest"/>
         <output message="zeusns:getSSLEncryptByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLEnhance">
         <documentation>
            Get whether each of the named pools should use SSL protocol enhancements. These enhancements allow Riverbed Web Servers to run multiple SSL sites, and to discover the client's IP address. Only use enable this if, for this pool, you are using Riverbed Web Servers or Stingray Traffic Managers whose virtual servers have the 'ssl_trust_magic' setting enabled.
         </documentation>
         
         <input message="zeusns:getSSLEnhanceRequest"/>
         <output message="zeusns:getSSLEnhanceResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLEnhanceByLocation">
         <documentation>
            Get whether each of the named pools should use SSL protocol enhancements. These enhancements allow Riverbed Web Servers to run multiple SSL sites, and to discover the client's IP address. Only use enable this if, for this pool, you are using Riverbed Web Servers or Stingray Traffic Managers whose virtual servers have the 'ssl_trust_magic' setting enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLEnhanceByLocationRequest"/>
         <output message="zeusns:getSSLEnhanceByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLSendCloseAlerts">
         <documentation>
            Get whether each of the named pools should send a close alert when they initiate socket disconnections.
         </documentation>
         
         <input message="zeusns:getSSLSendCloseAlertsRequest"/>
         <output message="zeusns:getSSLSendCloseAlertsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLSendCloseAlertsByLocation">
         <documentation>
            Get whether each of the named pools should send a close alert when they initiate socket disconnections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLSendCloseAlertsByLocationRequest"/>
         <output message="zeusns:getSSLSendCloseAlertsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLServerNameExtension">
         <documentation>
            Get if we should send the server_name extension to the back-end node. This setting forces the use of at least TLS 1.0.
         </documentation>
         
         <input message="zeusns:getSSLServerNameExtensionRequest"/>
         <output message="zeusns:getSSLServerNameExtensionResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLServerNameExtensionByLocation">
         <documentation>
            Get if we should send the server_name extension to the back-end node. This setting forces the use of at least TLS 1.0. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLServerNameExtensionByLocationRequest"/>
         <output message="zeusns:getSSLServerNameExtensionByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLStrictVerify">
         <documentation>
            Get whether each of the named pools should perform strict certificate validation on SSL certificates from the back-end nodes.
         </documentation>
         
         <input message="zeusns:getSSLStrictVerifyRequest"/>
         <output message="zeusns:getSSLStrictVerifyResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLStrictVerifyByLocation">
         <documentation>
            Get whether each of the named pools should perform strict certificate validation on SSL certificates from the back-end nodes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLStrictVerifyByLocationRequest"/>
         <output message="zeusns:getSSLStrictVerifyByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getTransparent">
         <documentation>
            Get whether each of the named pools should make connections to the back-ends appear to originate from the source client IP address.
         </documentation>
         
         <input message="zeusns:getTransparentRequest"/>
         <output message="zeusns:getTransparentResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getTransparentByLocation">
         <documentation>
            Get whether each of the named pools should make connections to the back-ends appear to originate from the source client IP address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getTransparentByLocationRequest"/>
         <output message="zeusns:getTransparentByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getUDPAcceptFrom">
         <documentation>
            Get what sets of IP addresses and ports from which we should accept UDP responses.
         </documentation>
         
         <input message="zeusns:getUDPAcceptFromRequest"/>
         <output message="zeusns:getUDPAcceptFromResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getUDPAcceptFromByLocation">
         <documentation>
            Get what sets of IP addresses and ports from which we should accept UDP responses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getUDPAcceptFromByLocationRequest"/>
         <output message="zeusns:getUDPAcceptFromByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getUDPAcceptFromIPMask">
         <documentation>
            Get the mask to validate the IP of UDP responses with. Only used if UDPAcceptFromIP is set to 'ip_mask'.
         </documentation>
         
         <input message="zeusns:getUDPAcceptFromIPMaskRequest"/>
         <output message="zeusns:getUDPAcceptFromIPMaskResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getUDPAcceptFromIPMaskByLocation">
         <documentation>
            Get the mask to validate the IP of UDP responses with. Only used if UDPAcceptFromIP is set to 'ip_mask'. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getUDPAcceptFromIPMaskByLocationRequest"/>
         <output message="zeusns:getUDPAcceptFromIPMaskByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWeightings">
         <documentation>
            For each of the named pools, get the weightings for each of the nodes in each pool.
         </documentation>
         
         <input message="zeusns:getWeightingsRequest"/>
         <output message="zeusns:getWeightingsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWeightingsByLocation">
         <documentation>
            For each of the named pools, get the weightings for each of the nodes in each pool. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getWeightingsByLocationRequest"/>
         <output message="zeusns:getWeightingsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="removeDrainingNodes">
         <documentation>
            Remove nodes from the lists of draining nodes, for each of the named pools.
         </documentation>
         
         <input message="zeusns:removeDrainingNodesRequest"/>
         <output message="zeusns:removeDrainingNodesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeDrainingNodesByLocation">
         <documentation>
            Remove nodes from the lists of draining nodes, for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:removeDrainingNodesByLocationRequest"/>
         <output message="zeusns:removeDrainingNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeMonitors">
         <documentation>
            Remove monitors from each of the named pools.
         </documentation>
         
         <input message="zeusns:removeMonitorsRequest"/>
         <output message="zeusns:removeMonitorsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeMonitorsByLocation">
         <documentation>
            Remove monitors from each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:removeMonitorsByLocationRequest"/>
         <output message="zeusns:removeMonitorsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeNodes">
         <documentation>
            Remove nodes from each of the named pools.
         </documentation>
         
         <input message="zeusns:removeNodesRequest"/>
         <output message="zeusns:removeNodesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeNodesByLocation">
         <documentation>
            Remove nodes from each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:removeNodesByLocationRequest"/>
         <output message="zeusns:removeNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="renamePool">
         <documentation>
            Rename each of the named pools.
         </documentation>
         
         <input message="zeusns:renamePoolRequest"/>
         <output message="zeusns:renamePoolResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
      </operation>
      
      <operation name="setAutoscaleCloudcredentials">
         <documentation>
            Set the cloud credentials for this auto-scaled pool
         </documentation>
         
         <input message="zeusns:setAutoscaleCloudcredentialsRequest"/>
         <output message="zeusns:setAutoscaleCloudcredentialsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleCloudcredentialsByLocation">
         <documentation>
            Set the cloud credentials for this auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscaleCloudcredentialsByLocationRequest"/>
         <output message="zeusns:setAutoscaleCloudcredentialsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleCluster">
         <documentation>
            Set The ESX host or ESX cluster name to put the new virtual machine instances on.
         </documentation>
         
         <input message="zeusns:setAutoscaleClusterRequest"/>
         <output message="zeusns:setAutoscaleClusterResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleClusterByLocation">
         <documentation>
            Set The ESX host or ESX cluster name to put the new virtual machine instances on. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscaleClusterByLocationRequest"/>
         <output message="zeusns:setAutoscaleClusterByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleDatacenter">
         <documentation>
            Set The name of the logical datacenter on the vCenter server
         </documentation>
         
         <input message="zeusns:setAutoscaleDatacenterRequest"/>
         <output message="zeusns:setAutoscaleDatacenterResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleDatacenterByLocation">
         <documentation>
            Set The name of the logical datacenter on the vCenter server This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscaleDatacenterByLocationRequest"/>
         <output message="zeusns:setAutoscaleDatacenterByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleDatastore">
         <documentation>
            Set The name of the datastore to be used by the newly created virtual machine.
         </documentation>
         
         <input message="zeusns:setAutoscaleDatastoreRequest"/>
         <output message="zeusns:setAutoscaleDatastoreResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleDatastoreByLocation">
         <documentation>
            Set The name of the datastore to be used by the newly created virtual machine. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscaleDatastoreByLocationRequest"/>
         <output message="zeusns:setAutoscaleDatastoreByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleEnabled">
         <documentation>
            Set whether this pool uses auto-scaling.
         </documentation>
         
         <input message="zeusns:setAutoscaleEnabledRequest"/>
         <output message="zeusns:setAutoscaleEnabledResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleEnabledByLocation">
         <documentation>
            Set whether this pool uses auto-scaling. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscaleEnabledByLocationRequest"/>
         <output message="zeusns:setAutoscaleEnabledByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleExternal">
         <documentation>
            Set whether autoscaling is handled externally or internally
         </documentation>
         
         <input message="zeusns:setAutoscaleExternalRequest"/>
         <output message="zeusns:setAutoscaleExternalResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleExternalByLocation">
         <documentation>
            Set whether autoscaling is handled externally or internally This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscaleExternalByLocationRequest"/>
         <output message="zeusns:setAutoscaleExternalByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleHysteresis">
         <documentation>
            Set the hysteresis period for an auto-scaled pool
         </documentation>
         
         <input message="zeusns:setAutoscaleHysteresisRequest"/>
         <output message="zeusns:setAutoscaleHysteresisResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleHysteresisByLocation">
         <documentation>
            Set the hysteresis period for an auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscaleHysteresisByLocationRequest"/>
         <output message="zeusns:setAutoscaleHysteresisByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleImageid">
         <documentation>
            Set the image identifier
         </documentation>
         
         <input message="zeusns:setAutoscaleImageidRequest"/>
         <output message="zeusns:setAutoscaleImageidResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleImageidByLocation">
         <documentation>
            Set the image identifier This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscaleImageidByLocationRequest"/>
         <output message="zeusns:setAutoscaleImageidByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleIpstouse">
         <documentation>
            Set whether to use the public or private IPs
         </documentation>
         
         <input message="zeusns:setAutoscaleIpstouseRequest"/>
         <output message="zeusns:setAutoscaleIpstouseResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleIpstouseByLocation">
         <documentation>
            Set whether to use the public or private IPs This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscaleIpstouseByLocationRequest"/>
         <output message="zeusns:setAutoscaleIpstouseByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleLastnodeIdletime">
         <documentation>
            Set the idle time of the last node in an autoscaled pool before it can be destroyed
         </documentation>
         
         <input message="zeusns:setAutoscaleLastnodeIdletimeRequest"/>
         <output message="zeusns:setAutoscaleLastnodeIdletimeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleLastnodeIdletimeByLocation">
         <documentation>
            Set the idle time of the last node in an autoscaled pool before it can be destroyed This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscaleLastnodeIdletimeByLocationRequest"/>
         <output message="zeusns:setAutoscaleLastnodeIdletimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleMaxNodes">
         <documentation>
            Set the maximum number of nodes in an auto-scaled pool
         </documentation>
         
         <input message="zeusns:setAutoscaleMaxNodesRequest"/>
         <output message="zeusns:setAutoscaleMaxNodesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleMaxNodesByLocation">
         <documentation>
            Set the maximum number of nodes in an auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscaleMaxNodesByLocationRequest"/>
         <output message="zeusns:setAutoscaleMaxNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleMinNodes">
         <documentation>
            Set the minimum number of nodes in an auto-scaled pool
         </documentation>
         
         <input message="zeusns:setAutoscaleMinNodesRequest"/>
         <output message="zeusns:setAutoscaleMinNodesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleMinNodesByLocation">
         <documentation>
            Set the minimum number of nodes in an auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscaleMinNodesByLocationRequest"/>
         <output message="zeusns:setAutoscaleMinNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleName">
         <documentation>
            Set the node name prefix for this auto-scaled pool
         </documentation>
         
         <input message="zeusns:setAutoscaleNameRequest"/>
         <output message="zeusns:setAutoscaleNameResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleNameByLocation">
         <documentation>
            Set the node name prefix for this auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscaleNameByLocationRequest"/>
         <output message="zeusns:setAutoscaleNameByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscalePort">
         <documentation>
            Set the port number for this auto-scaled pool
         </documentation>
         
         <input message="zeusns:setAutoscalePortRequest"/>
         <output message="zeusns:setAutoscalePortResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscalePortByLocation">
         <documentation>
            Set the port number for this auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscalePortByLocationRequest"/>
         <output message="zeusns:setAutoscalePortByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleRefractory">
         <documentation>
            Set the refractory period for an auto-scaled pool
         </documentation>
         
         <input message="zeusns:setAutoscaleRefractoryRequest"/>
         <output message="zeusns:setAutoscaleRefractoryResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleRefractoryByLocation">
         <documentation>
            Set the refractory period for an auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscaleRefractoryByLocationRequest"/>
         <output message="zeusns:setAutoscaleRefractoryByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleResponseTime">
         <documentation>
            Set the expected node response time in milliseconds
         </documentation>
         
         <input message="zeusns:setAutoscaleResponseTimeRequest"/>
         <output message="zeusns:setAutoscaleResponseTimeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleResponseTimeByLocation">
         <documentation>
            Set the expected node response time in milliseconds This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscaleResponseTimeByLocationRequest"/>
         <output message="zeusns:setAutoscaleResponseTimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleScaledownLevel">
         <documentation>
            Set the threshold of conforming requests for scaling down
         </documentation>
         
         <input message="zeusns:setAutoscaleScaledownLevelRequest"/>
         <output message="zeusns:setAutoscaleScaledownLevelResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleScaledownLevelByLocation">
         <documentation>
            Set the threshold of conforming requests for scaling down This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscaleScaledownLevelByLocationRequest"/>
         <output message="zeusns:setAutoscaleScaledownLevelByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleScaleupLevel">
         <documentation>
            Set the acceptable lower percentage of conforming requests
         </documentation>
         
         <input message="zeusns:setAutoscaleScaleupLevelRequest"/>
         <output message="zeusns:setAutoscaleScaleupLevelResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleScaleupLevelByLocation">
         <documentation>
            Set the acceptable lower percentage of conforming requests This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscaleScaleupLevelByLocationRequest"/>
         <output message="zeusns:setAutoscaleScaleupLevelByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleSizeid">
         <documentation>
            Set the size identifier
         </documentation>
         
         <input message="zeusns:setAutoscaleSizeidRequest"/>
         <output message="zeusns:setAutoscaleSizeidResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscaleSizeidByLocation">
         <documentation>
            Set the size identifier This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscaleSizeidByLocationRequest"/>
         <output message="zeusns:setAutoscaleSizeidByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setBandwidthClass">
         <documentation>
            Set the Bandwidth Classes that each of the named pools uses.
         </documentation>
         
         <input message="zeusns:setBandwidthClassRequest"/>
         <output message="zeusns:setBandwidthClassResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setBandwidthClassByLocation">
         <documentation>
            Set the Bandwidth Classes that each of the named pools uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setBandwidthClassByLocationRequest"/>
         <output message="zeusns:setBandwidthClassByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setDisabledNodes">
         <documentation>
            For each of the named pools, set the specified nodes to be disabled in the pool (all other nodes will remain in their existing state).
         </documentation>
         
         <input message="zeusns:setDisabledNodesRequest"/>
         <output message="zeusns:setDisabledNodesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setDisabledNodesByLocation">
         <documentation>
            For each of the named pools, set the specified nodes to be disabled in the pool (all other nodes will remain in their existing state). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setDisabledNodesByLocationRequest"/>
         <output message="zeusns:setDisabledNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setDrainingNodes">
         <documentation>
            Set the lists of draining nodes for each of the named pools.
         </documentation>
         
         <input message="zeusns:setDrainingNodesRequest"/>
         <output message="zeusns:setDrainingNodesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setDrainingNodesByLocation">
         <documentation>
            Set the lists of draining nodes for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setDrainingNodesByLocationRequest"/>
         <output message="zeusns:setDrainingNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setErrorFile">
         <documentation>
            This method is now obsolete and is replaced by VirtualServer.setErrorFile.
         </documentation>
         
         <input message="zeusns:setErrorFileRequest"/>
         <output message="zeusns:setErrorFileResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFTPSupportRfc2428">
         <documentation>
            Set whether backend IPv4 nodes understand the FTP EPRT and EPSV commands.
         </documentation>
         
         <input message="zeusns:setFTPSupportRfc2428Request"/>
         <output message="zeusns:setFTPSupportRfc2428Response"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFTPSupportRfc2428ByLocation">
         <documentation>
            Set whether backend IPv4 nodes understand the FTP EPRT and EPSV commands. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setFTPSupportRfc2428ByLocationRequest"/>
         <output message="zeusns:setFTPSupportRfc2428ByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFailpool">
         <documentation>
            Set the pool to use when all nodes in a pool fail, for each of the named pools.
         </documentation>
         
         <input message="zeusns:setFailpoolRequest"/>
         <output message="zeusns:setFailpoolResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFailpoolByLocation">
         <documentation>
            Set the pool to use when all nodes in a pool fail, for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setFailpoolByLocationRequest"/>
         <output message="zeusns:setFailpoolByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setKeepalive">
         <documentation>
            Set whether each of the named pools should maintain HTTP keepalive connections to the nodes.
         </documentation>
         
         <input message="zeusns:setKeepaliveRequest"/>
         <output message="zeusns:setKeepaliveResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setKeepaliveByLocation">
         <documentation>
            Set whether each of the named pools should maintain HTTP keepalive connections to the nodes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setKeepaliveByLocationRequest"/>
         <output message="zeusns:setKeepaliveByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setKeepaliveNonIdempotent">
         <documentation>
            Set whether each of the named pools should maintain HTTP keepalive connections to the nodes for non-idempotent requests.
         </documentation>
         
         <input message="zeusns:setKeepaliveNonIdempotentRequest"/>
         <output message="zeusns:setKeepaliveNonIdempotentResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setKeepaliveNonIdempotentByLocation">
         <documentation>
            Set whether each of the named pools should maintain HTTP keepalive connections to the nodes for non-idempotent requests. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setKeepaliveNonIdempotentByLocationRequest"/>
         <output message="zeusns:setKeepaliveNonIdempotentByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLoadBalancingAlgorithm">
         <documentation>
            Set the load balancing algorithms that each of the named pools uses.
         </documentation>
         
         <input message="zeusns:setLoadBalancingAlgorithmRequest"/>
         <output message="zeusns:setLoadBalancingAlgorithmResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLoadBalancingAlgorithmByLocation">
         <documentation>
            Set the load balancing algorithms that each of the named pools uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setLoadBalancingAlgorithmByLocationRequest"/>
         <output message="zeusns:setLoadBalancingAlgorithmByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxConnectTime">
         <documentation>
            Set the time that each of the named pools should wait for a connection to establish to a node before trying another node, in seconds.
         </documentation>
         
         <input message="zeusns:setMaxConnectTimeRequest"/>
         <output message="zeusns:setMaxConnectTimeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxConnectTimeByLocation">
         <documentation>
            Set the time that each of the named pools should wait for a connection to establish to a node before trying another node, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaxConnectTimeByLocationRequest"/>
         <output message="zeusns:setMaxConnectTimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxConnectionAttempts">
         <documentation>
            Set the number of times that each of the named pools can try to connect to any of its nodes before sending an error response.
         </documentation>
         
         <input message="zeusns:setMaxConnectionAttemptsRequest"/>
         <output message="zeusns:setMaxConnectionAttemptsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxConnectionAttemptsByLocation">
         <documentation>
            Set the number of times that each of the named pools can try to connect to any of its nodes before sending an error response. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaxConnectionAttemptsByLocationRequest"/>
         <output message="zeusns:setMaxConnectionAttemptsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxConnectionsPernode">
         <documentation>
            Set is the maximum number of conncurrent connections allowed to each node in the pool per machine.
         </documentation>
         
         <input message="zeusns:setMaxConnectionsPernodeRequest"/>
         <output message="zeusns:setMaxConnectionsPernodeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxConnectionsPernodeByLocation">
         <documentation>
            Set is the maximum number of conncurrent connections allowed to each node in the pool per machine. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaxConnectionsPernodeByLocationRequest"/>
         <output message="zeusns:setMaxConnectionsPernodeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxIdleConnectionsPerNode">
         <documentation>
            Set the maximum numbers of unused HTTP keepalive connections that each of the named pools should maintain to an individual node.
         </documentation>
         
         <input message="zeusns:setMaxIdleConnectionsPerNodeRequest"/>
         <output message="zeusns:setMaxIdleConnectionsPerNodeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxIdleConnectionsPerNodeByLocation">
         <documentation>
            Set the maximum numbers of unused HTTP keepalive connections that each of the named pools should maintain to an individual node. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaxIdleConnectionsPerNodeByLocationRequest"/>
         <output message="zeusns:setMaxIdleConnectionsPerNodeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxKeepalivesPerNode">
         <documentation>
            setMaxKeepalivesPerNode is deprecated, please use setMaxIdleConnectionsPerNode instead.
         </documentation>
         
         <input message="zeusns:setMaxKeepalivesPerNodeRequest"/>
         <output message="zeusns:setMaxKeepalivesPerNodeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxKeepalivesPerNodeByLocation">
         <documentation>
            setMaxKeepalivesPerNode is deprecated, please use setMaxIdleConnectionsPerNode instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaxKeepalivesPerNodeByLocationRequest"/>
         <output message="zeusns:setMaxKeepalivesPerNodeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxQueueSize">
         <documentation>
            Set is the maximum number of connections that can be queued due to connection limits.
         </documentation>
         
         <input message="zeusns:setMaxQueueSizeRequest"/>
         <output message="zeusns:setMaxQueueSizeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxQueueSizeByLocation">
         <documentation>
            Set is the maximum number of connections that can be queued due to connection limits. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaxQueueSizeByLocationRequest"/>
         <output message="zeusns:setMaxQueueSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxReplyTime">
         <documentation>
            Set the time that each of the named pools should wait for a response from a node before either discarding the request or trying another node, in seconds (retryable requests only).
         </documentation>
         
         <input message="zeusns:setMaxReplyTimeRequest"/>
         <output message="zeusns:setMaxReplyTimeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxReplyTimeByLocation">
         <documentation>
            Set the time that each of the named pools should wait for a response from a node before either discarding the request or trying another node, in seconds (retryable requests only). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaxReplyTimeByLocationRequest"/>
         <output message="zeusns:setMaxReplyTimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxTimedOutConnectionAttempts">
         <documentation>
            Set the number of times that each of the named pools can try to connect and time out waiting for a response, by exceeding max_reply_time, to any of its nodes before sending an error response.
         </documentation>
         
         <input message="zeusns:setMaxTimedOutConnectionAttemptsRequest"/>
         <output message="zeusns:setMaxTimedOutConnectionAttemptsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxTimedOutConnectionAttemptsByLocation">
         <documentation>
            Set the number of times that each of the named pools can try to connect and time out waiting for a response, by exceeding max_reply_time, to any of its nodes before sending an error response. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaxTimedOutConnectionAttemptsByLocationRequest"/>
         <output message="zeusns:setMaxTimedOutConnectionAttemptsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMonitors">
         <documentation>
            Set the list of all monitors.
         </documentation>
         
         <input message="zeusns:setMonitorsRequest"/>
         <output message="zeusns:setMonitorsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMonitorsByLocation">
         <documentation>
            Set the list of all monitors. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMonitorsByLocationRequest"/>
         <output message="zeusns:setMonitorsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNodeConnClose">
         <documentation>
            Set whether all connections that have been sent to a node are closed when that node is marked as dead.
         </documentation>
         
         <input message="zeusns:setNodeConnCloseRequest"/>
         <output message="zeusns:setNodeConnCloseResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNodeConnCloseByLocation">
         <documentation>
            Set whether all connections that have been sent to a node are closed when that node is marked as dead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setNodeConnCloseByLocationRequest"/>
         <output message="zeusns:setNodeConnCloseByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNodeConnectionAttempts">
         <documentation>
            Set the number of times your traffic manager should try and connect to a node before registering it as failed when passive monitoring is enabled.
         </documentation>
         
         <input message="zeusns:setNodeConnectionAttemptsRequest"/>
         <output message="zeusns:setNodeConnectionAttemptsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNodeConnectionAttemptsByLocation">
         <documentation>
            Set the number of times your traffic manager should try and connect to a node before registering it as failed when passive monitoring is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setNodeConnectionAttemptsByLocationRequest"/>
         <output message="zeusns:setNodeConnectionAttemptsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNodeFailTime">
         <documentation>
            Set the length of time a failed node should be isolated for before testing it with new traffic, in seconds
         </documentation>
         
         <input message="zeusns:setNodeFailTimeRequest"/>
         <output message="zeusns:setNodeFailTimeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNodeFailTimeByLocation">
         <documentation>
            Set the length of time a failed node should be isolated for before testing it with new traffic, in seconds This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setNodeFailTimeByLocationRequest"/>
         <output message="zeusns:setNodeFailTimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNodeUseNagle">
         <documentation>
            Set whether Nagle's algorithm should be used for TCP connections to the back-end nodes.
         </documentation>
         
         <input message="zeusns:setNodeUseNagleRequest"/>
         <output message="zeusns:setNodeUseNagleResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNodeUseNagleByLocation">
         <documentation>
            Set whether Nagle's algorithm should be used for TCP connections to the back-end nodes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setNodeUseNagleByLocationRequest"/>
         <output message="zeusns:setNodeUseNagleByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNodes">
         <documentation>
            Set the lists of nodes for each of the named pools.
         </documentation>
         
         <input message="zeusns:setNodesRequest"/>
         <output message="zeusns:setNodesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNodesByLocation">
         <documentation>
            Set the lists of nodes for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setNodesByLocationRequest"/>
         <output message="zeusns:setNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNodesPriorityValue">
         <documentation>
            For each of the named pools, set the priority values for the named nodes in each pool.
         </documentation>
         
         <input message="zeusns:setNodesPriorityValueRequest"/>
         <output message="zeusns:setNodesPriorityValueResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNodesPriorityValueByLocation">
         <documentation>
            For each of the named pools, set the priority values for the named nodes in each pool. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setNodesPriorityValueByLocationRequest"/>
         <output message="zeusns:setNodesPriorityValueByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNodesWeightings">
         <documentation>
            For each of the named pools, set the weighting (for the Weighted Round Robin algorithm) for each node in that pool.
         </documentation>
         
         <input message="zeusns:setNodesWeightingsRequest"/>
         <output message="zeusns:setNodesWeightingsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNodesWeightingsByLocation">
         <documentation>
            For each of the named pools, set the weighting (for the Weighted Round Robin algorithm) for each node in that pool. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setNodesWeightingsByLocationRequest"/>
         <output message="zeusns:setNodesWeightingsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNote">
         <documentation>
            Set the note for each of the named pools.
         </documentation>
         
         <input message="zeusns:setNoteRequest"/>
         <output message="zeusns:setNoteResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setPassiveMonitoring">
         <documentation>
            Set whether this pool uses passive monitoring.
         </documentation>
         
         <input message="zeusns:setPassiveMonitoringRequest"/>
         <output message="zeusns:setPassiveMonitoringResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setPassiveMonitoringByLocation">
         <documentation>
            Set whether this pool uses passive monitoring. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setPassiveMonitoringByLocationRequest"/>
         <output message="zeusns:setPassiveMonitoringByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setPersistence">
         <documentation>
            Set the default Session Persistence classes that each of the named pools uses.
         </documentation>
         
         <input message="zeusns:setPersistenceRequest"/>
         <output message="zeusns:setPersistenceResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setPersistenceByLocation">
         <documentation>
            Set the default Session Persistence classes that each of the named pools uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setPersistenceByLocationRequest"/>
         <output message="zeusns:setPersistenceByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setPriorityEnabled">
         <documentation>
            Set whether each of the named pools uses priority lists.
         </documentation>
         
         <input message="zeusns:setPriorityEnabledRequest"/>
         <output message="zeusns:setPriorityEnabledResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setPriorityEnabledByLocation">
         <documentation>
            Set whether each of the named pools uses priority lists. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setPriorityEnabledByLocationRequest"/>
         <output message="zeusns:setPriorityEnabledByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setPriorityNodes">
         <documentation>
            Set the minimum number of highest-priority active nodes, for each of the named pools.
         </documentation>
         
         <input message="zeusns:setPriorityNodesRequest"/>
         <output message="zeusns:setPriorityNodesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setPriorityNodesByLocation">
         <documentation>
            Set the minimum number of highest-priority active nodes, for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setPriorityNodesByLocationRequest"/>
         <output message="zeusns:setPriorityNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setQueueTimeout">
         <documentation>
            Set is the maximum time to keep a connections queued in seconds. A value of 0 will not timeout queued connections.
         </documentation>
         
         <input message="zeusns:setQueueTimeoutRequest"/>
         <output message="zeusns:setQueueTimeoutResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setQueueTimeoutByLocation">
         <documentation>
            Set is the maximum time to keep a connections queued in seconds. A value of 0 will not timeout queued connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setQueueTimeoutByLocationRequest"/>
         <output message="zeusns:setQueueTimeoutByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSMTPSendStartTLS">
         <documentation>
            Set whether each of the named pools should upgrade SMTP connections to SSL using STARTTLS (the alternative is to encrypt the entire connection).
         </documentation>
         
         <input message="zeusns:setSMTPSendStartTLSRequest"/>
         <output message="zeusns:setSMTPSendStartTLSResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSMTPSendStartTLSByLocation">
         <documentation>
            Set whether each of the named pools should upgrade SMTP connections to SSL using STARTTLS (the alternative is to encrypt the entire connection). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSMTPSendStartTLSByLocationRequest"/>
         <output message="zeusns:setSMTPSendStartTLSByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLClientAuth">
         <documentation>
            Set whether each of the named pools should use client authentication. If client authentication is enabled and a back-end node asks for a client authentication, a suitable certificate and private key will be used from the SSL Client Certificates catalog.
         </documentation>
         
         <input message="zeusns:setSSLClientAuthRequest"/>
         <output message="zeusns:setSSLClientAuthResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLClientAuthByLocation">
         <documentation>
            Set whether each of the named pools should use client authentication. If client authentication is enabled and a back-end node asks for a client authentication, a suitable certificate and private key will be used from the SSL Client Certificates catalog. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLClientAuthByLocationRequest"/>
         <output message="zeusns:setSSLClientAuthByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLEncrypt">
         <documentation>
            Set whether each of the named pools should encrypt data to the back-end nodes using SSL.
         </documentation>
         
         <input message="zeusns:setSSLEncryptRequest"/>
         <output message="zeusns:setSSLEncryptResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLEncryptByLocation">
         <documentation>
            Set whether each of the named pools should encrypt data to the back-end nodes using SSL. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLEncryptByLocationRequest"/>
         <output message="zeusns:setSSLEncryptByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLEnhance">
         <documentation>
            Set whether each of the named pools should use SSL protocol enhancements. These enhancements allow Riverbed Web Servers to run multiple SSL sites, and to discover the client's IP address. Only use enable this if, for this pool, you are using Riverbed Web Servers or Stingray Traffic Managers whose virtual servers have the 'ssl_trust_magic' setting enabled.
         </documentation>
         
         <input message="zeusns:setSSLEnhanceRequest"/>
         <output message="zeusns:setSSLEnhanceResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLEnhanceByLocation">
         <documentation>
            Set whether each of the named pools should use SSL protocol enhancements. These enhancements allow Riverbed Web Servers to run multiple SSL sites, and to discover the client's IP address. Only use enable this if, for this pool, you are using Riverbed Web Servers or Stingray Traffic Managers whose virtual servers have the 'ssl_trust_magic' setting enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLEnhanceByLocationRequest"/>
         <output message="zeusns:setSSLEnhanceByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLSendCloseAlerts">
         <documentation>
            Set whether each of the named pools should send a close alert when they initiate socket disconnections.
         </documentation>
         
         <input message="zeusns:setSSLSendCloseAlertsRequest"/>
         <output message="zeusns:setSSLSendCloseAlertsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLSendCloseAlertsByLocation">
         <documentation>
            Set whether each of the named pools should send a close alert when they initiate socket disconnections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLSendCloseAlertsByLocationRequest"/>
         <output message="zeusns:setSSLSendCloseAlertsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLServerNameExtension">
         <documentation>
            Set if we should send the server_name extension to the back-end node. This setting forces the use of at least TLS 1.0.
         </documentation>
         
         <input message="zeusns:setSSLServerNameExtensionRequest"/>
         <output message="zeusns:setSSLServerNameExtensionResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLServerNameExtensionByLocation">
         <documentation>
            Set if we should send the server_name extension to the back-end node. This setting forces the use of at least TLS 1.0. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLServerNameExtensionByLocationRequest"/>
         <output message="zeusns:setSSLServerNameExtensionByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLStrictVerify">
         <documentation>
            Set whether each of the named pools should perform strict certificate validation on SSL certificates from the back-end nodes.
         </documentation>
         
         <input message="zeusns:setSSLStrictVerifyRequest"/>
         <output message="zeusns:setSSLStrictVerifyResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLStrictVerifyByLocation">
         <documentation>
            Set whether each of the named pools should perform strict certificate validation on SSL certificates from the back-end nodes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLStrictVerifyByLocationRequest"/>
         <output message="zeusns:setSSLStrictVerifyByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setTransparent">
         <documentation>
            Set whether each of the named pools should make connections to the back-ends appear to originate from the source client IP address.
         </documentation>
         
         <input message="zeusns:setTransparentRequest"/>
         <output message="zeusns:setTransparentResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setTransparentByLocation">
         <documentation>
            Set whether each of the named pools should make connections to the back-ends appear to originate from the source client IP address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setTransparentByLocationRequest"/>
         <output message="zeusns:setTransparentByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setUDPAcceptFrom">
         <documentation>
            Set what sets of IP addresses and ports from which we should accept UDP responses.
         </documentation>
         
         <input message="zeusns:setUDPAcceptFromRequest"/>
         <output message="zeusns:setUDPAcceptFromResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setUDPAcceptFromByLocation">
         <documentation>
            Set what sets of IP addresses and ports from which we should accept UDP responses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setUDPAcceptFromByLocationRequest"/>
         <output message="zeusns:setUDPAcceptFromByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setUDPAcceptFromIPMask">
         <documentation>
            Set the mask to validate the IP of UDP responses with. Only used if UDPAcceptFromIP is set to 'ip_mask'.
         </documentation>
         
         <input message="zeusns:setUDPAcceptFromIPMaskRequest"/>
         <output message="zeusns:setUDPAcceptFromIPMaskResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setUDPAcceptFromIPMaskByLocation">
         <documentation>
            Set the mask to validate the IP of UDP responses with. Only used if UDPAcceptFromIP is set to 'ip_mask'. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setUDPAcceptFromIPMaskByLocationRequest"/>
         <output message="zeusns:setUDPAcceptFromIPMaskByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
   </portType>
   
   <binding name="PoolBinding" type="zeusns:PoolPort">
      <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
      <operation name="addAutoScaledPool">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/addAutoScaledPool"/>
         <documentation>
            Add each of the named auto-scaled pools, using the node lists for each. The node lists can be empty
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addDrainingNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/addDrainingNodes"/>
         <documentation>
            Add nodes to the lists of draining nodes, for each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addDrainingNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/addDrainingNodesByLocation"/>
         <documentation>
            Add nodes to the lists of draining nodes, for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addMonitors">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/addMonitors"/>
         <documentation>
            Add monitors to each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addMonitorsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/addMonitorsByLocation"/>
         <documentation>
            Add monitors to each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/addNodes"/>
         <documentation>
            Add nodes to each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/addNodesByLocation"/>
         <documentation>
            Add nodes to each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addPool">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/addPool"/>
         <documentation>
            Add each of the named pools, using the node lists for each.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="copyPool">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/copyPool"/>
         <documentation>
            Copy each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="deletePool">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/deletePool"/>
         <documentation>
            Delete each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectInUse">
            <soap:fault use="encoded" name="ObjectInUse" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="disableNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/disableNodes"/>
         <documentation>
            For each of the named pools, disable the specified nodes in the pool.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="disableNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/disableNodesByLocation"/>
         <documentation>
            For each of the named pools, disable the specified nodes in the pool. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="enableNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/enableNodes"/>
         <documentation>
            For each of the named pools, enable the specified nodes that are disabled in the pool.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="enableNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/enableNodesByLocation"/>
         <documentation>
            For each of the named pools, enable the specified nodes that are disabled in the pool. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleCloudcredentials">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleCloudcredentials"/>
         <documentation>
            Get the cloud credentials for this auto-scaled pool
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleCloudcredentialsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleCloudcredentialsByLocation"/>
         <documentation>
            Get the cloud credentials for this auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleCluster">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleCluster"/>
         <documentation>
            Get The ESX host or ESX cluster name to put the new virtual machine instances on.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleClusterByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleClusterByLocation"/>
         <documentation>
            Get The ESX host or ESX cluster name to put the new virtual machine instances on. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleDatacenter">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleDatacenter"/>
         <documentation>
            Get The name of the logical datacenter on the vCenter server
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleDatacenterByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleDatacenterByLocation"/>
         <documentation>
            Get The name of the logical datacenter on the vCenter server This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleDatastore">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleDatastore"/>
         <documentation>
            Get The name of the datastore to be used by the newly created virtual machine.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleDatastoreByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleDatastoreByLocation"/>
         <documentation>
            Get The name of the datastore to be used by the newly created virtual machine. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleEnabled"/>
         <documentation>
            Get whether this pool uses auto-scaling.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleEnabledByLocation"/>
         <documentation>
            Get whether this pool uses auto-scaling. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleExternal">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleExternal"/>
         <documentation>
            Get whether autoscaling is handled externally or internally
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleExternalByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleExternalByLocation"/>
         <documentation>
            Get whether autoscaling is handled externally or internally This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleHysteresis">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleHysteresis"/>
         <documentation>
            Get the hysteresis period for an auto-scaled pool
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleHysteresisByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleHysteresisByLocation"/>
         <documentation>
            Get the hysteresis period for an auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleImageid">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleImageid"/>
         <documentation>
            Get the image identifier
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleImageidByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleImageidByLocation"/>
         <documentation>
            Get the image identifier This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleIpstouse">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleIpstouse"/>
         <documentation>
            Get whether to use the public or private IPs
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleIpstouseByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleIpstouseByLocation"/>
         <documentation>
            Get whether to use the public or private IPs This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleLastnodeIdletime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleLastnodeIdletime"/>
         <documentation>
            Get the idle time of the last node in an autoscaled pool before it can be destroyed
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleLastnodeIdletimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleLastnodeIdletimeByLocation"/>
         <documentation>
            Get the idle time of the last node in an autoscaled pool before it can be destroyed This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleMaxNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleMaxNodes"/>
         <documentation>
            Get the maximum number of nodes in an auto-scaled pool
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleMaxNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleMaxNodesByLocation"/>
         <documentation>
            Get the maximum number of nodes in an auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleMinNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleMinNodes"/>
         <documentation>
            Get the minimum number of nodes in an auto-scaled pool
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleMinNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleMinNodesByLocation"/>
         <documentation>
            Get the minimum number of nodes in an auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleName">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleName"/>
         <documentation>
            Get the node name prefix for this auto-scaled pool
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleNameByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleNameByLocation"/>
         <documentation>
            Get the node name prefix for this auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscalePort">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscalePort"/>
         <documentation>
            Get the port number for this auto-scaled pool
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscalePortByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscalePortByLocation"/>
         <documentation>
            Get the port number for this auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleRefractory">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleRefractory"/>
         <documentation>
            Get the refractory period for an auto-scaled pool
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleRefractoryByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleRefractoryByLocation"/>
         <documentation>
            Get the refractory period for an auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleResponseTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleResponseTime"/>
         <documentation>
            Get the expected node response time in milliseconds
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleResponseTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleResponseTimeByLocation"/>
         <documentation>
            Get the expected node response time in milliseconds This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleScaledownLevel">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleScaledownLevel"/>
         <documentation>
            Get the threshold of conforming requests for scaling down
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleScaledownLevelByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleScaledownLevelByLocation"/>
         <documentation>
            Get the threshold of conforming requests for scaling down This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleScaleupLevel">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleScaleupLevel"/>
         <documentation>
            Get the acceptable lower percentage of conforming requests
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleScaleupLevelByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleScaleupLevelByLocation"/>
         <documentation>
            Get the acceptable lower percentage of conforming requests This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleSizeid">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleSizeid"/>
         <documentation>
            Get the size identifier
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAutoscaleSizeidByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getAutoscaleSizeidByLocation"/>
         <documentation>
            Get the size identifier This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getBandwidthClass">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getBandwidthClass"/>
         <documentation>
            Get the Bandwidth Classes that each of the named pools uses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getBandwidthClassByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getBandwidthClassByLocation"/>
         <documentation>
            Get the Bandwidth Classes that each of the named pools uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getDisabledNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getDisabledNodes"/>
         <documentation>
            For each of the named pools, get the disabled nodes in the pool.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getDisabledNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getDisabledNodesByLocation"/>
         <documentation>
            For each of the named pools, get the disabled nodes in the pool. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getDrainingNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getDrainingNodes"/>
         <documentation>
            Get the lists of draining nodes for each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getDrainingNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getDrainingNodesByLocation"/>
         <documentation>
            Get the lists of draining nodes for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getErrorFile">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getErrorFile"/>
         <documentation>
            This method is now obsolete and is replaced by VirtualServer.getErrorFile.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFTPSupportRfc2428">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getFTPSupportRfc2428"/>
         <documentation>
            Get whether backend IPv4 nodes understand the FTP EPRT and EPSV commands.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFTPSupportRfc2428ByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getFTPSupportRfc2428ByLocation"/>
         <documentation>
            Get whether backend IPv4 nodes understand the FTP EPRT and EPSV commands. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFailpool">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getFailpool"/>
         <documentation>
            Get the pool to use when all nodes in a pool fail, for each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFailpoolByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getFailpoolByLocation"/>
         <documentation>
            Get the pool to use when all nodes in a pool fail, for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getKeepalive">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getKeepalive"/>
         <documentation>
            Get whether each of the named pools should maintain HTTP keepalive connections to the nodes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getKeepaliveByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getKeepaliveByLocation"/>
         <documentation>
            Get whether each of the named pools should maintain HTTP keepalive connections to the nodes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getKeepaliveNonIdempotent">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getKeepaliveNonIdempotent"/>
         <documentation>
            Get whether each of the named pools should maintain HTTP keepalive connections to the nodes for non-idempotent requests.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getKeepaliveNonIdempotentByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getKeepaliveNonIdempotentByLocation"/>
         <documentation>
            Get whether each of the named pools should maintain HTTP keepalive connections to the nodes for non-idempotent requests. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLoadBalancingAlgorithm">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getLoadBalancingAlgorithm"/>
         <documentation>
            Get the load balancing algorithms that each of the named pools uses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLoadBalancingAlgorithmByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getLoadBalancingAlgorithmByLocation"/>
         <documentation>
            Get the load balancing algorithms that each of the named pools uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxConnectTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getMaxConnectTime"/>
         <documentation>
            Get the time that each of the named pools should wait for a connection to establish to a node before trying another node, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxConnectTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getMaxConnectTimeByLocation"/>
         <documentation>
            Get the time that each of the named pools should wait for a connection to establish to a node before trying another node, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxConnectionAttempts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getMaxConnectionAttempts"/>
         <documentation>
            Get the number of times that each of the named pools can try to connect to any of its nodes before sending an error response.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxConnectionAttemptsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getMaxConnectionAttemptsByLocation"/>
         <documentation>
            Get the number of times that each of the named pools can try to connect to any of its nodes before sending an error response. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxConnectionsPernode">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getMaxConnectionsPernode"/>
         <documentation>
            Get is the maximum number of conncurrent connections allowed to each node in the pool per machine.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxConnectionsPernodeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getMaxConnectionsPernodeByLocation"/>
         <documentation>
            Get is the maximum number of conncurrent connections allowed to each node in the pool per machine. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxIdleConnectionsPerNode">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getMaxIdleConnectionsPerNode"/>
         <documentation>
            Get the maximum numbers of unused HTTP keepalive connections that each of the named pools should maintain to an individual node.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxIdleConnectionsPerNodeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getMaxIdleConnectionsPerNodeByLocation"/>
         <documentation>
            Get the maximum numbers of unused HTTP keepalive connections that each of the named pools should maintain to an individual node. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxKeepalivesPerNode">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getMaxKeepalivesPerNode"/>
         <documentation>
            getMaxKeepalivesPerNode is deprecated, please use getMaxIdleConnectionsPerNode instead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxKeepalivesPerNodeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getMaxKeepalivesPerNodeByLocation"/>
         <documentation>
            getMaxKeepalivesPerNode is deprecated, please use getMaxIdleConnectionsPerNode instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxQueueSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getMaxQueueSize"/>
         <documentation>
            Get is the maximum number of connections that can be queued due to connection limits.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxQueueSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getMaxQueueSizeByLocation"/>
         <documentation>
            Get is the maximum number of connections that can be queued due to connection limits. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxReplyTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getMaxReplyTime"/>
         <documentation>
            Get the time that each of the named pools should wait for a response from a node before either discarding the request or trying another node, in seconds (retryable requests only).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxReplyTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getMaxReplyTimeByLocation"/>
         <documentation>
            Get the time that each of the named pools should wait for a response from a node before either discarding the request or trying another node, in seconds (retryable requests only). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxTimedOutConnectionAttempts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getMaxTimedOutConnectionAttempts"/>
         <documentation>
            Get the number of times that each of the named pools can try to connect and time out waiting for a response, by exceeding max_reply_time, to any of its nodes before sending an error response.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxTimedOutConnectionAttemptsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getMaxTimedOutConnectionAttemptsByLocation"/>
         <documentation>
            Get the number of times that each of the named pools can try to connect and time out waiting for a response, by exceeding max_reply_time, to any of its nodes before sending an error response. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMonitors">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getMonitors"/>
         <documentation>
            Get the list of all monitors.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMonitorsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getMonitorsByLocation"/>
         <documentation>
            Get the list of all monitors. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNodeConnClose">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getNodeConnClose"/>
         <documentation>
            Get whether all connections that have been sent to a node are closed when that node is marked as dead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNodeConnCloseByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getNodeConnCloseByLocation"/>
         <documentation>
            Get whether all connections that have been sent to a node are closed when that node is marked as dead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNodeConnectionAttempts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getNodeConnectionAttempts"/>
         <documentation>
            Get the number of times your traffic manager should try and connect to a node before registering it as failed when passive monitoring is enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNodeConnectionAttemptsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getNodeConnectionAttemptsByLocation"/>
         <documentation>
            Get the number of times your traffic manager should try and connect to a node before registering it as failed when passive monitoring is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNodeFailTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getNodeFailTime"/>
         <documentation>
            Get the length of time a failed node should be isolated for before testing it with new traffic, in seconds
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNodeFailTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getNodeFailTimeByLocation"/>
         <documentation>
            Get the length of time a failed node should be isolated for before testing it with new traffic, in seconds This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNodeUseNagle">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getNodeUseNagle"/>
         <documentation>
            Get whether Nagle's algorithm should be used for TCP connections to the back-end nodes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNodeUseNagleByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getNodeUseNagleByLocation"/>
         <documentation>
            Get whether Nagle's algorithm should be used for TCP connections to the back-end nodes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getNodes"/>
         <documentation>
            Get the lists of nodes for each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getNodesByLocation"/>
         <documentation>
            Get the lists of nodes for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNodesConnectionCounts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getNodesConnectionCounts"/>
         <documentation>
            Get the number of active connections to each of the specified nodes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getNodesLastUsed">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getNodesLastUsed"/>
         <documentation>
            Get the number of seconds since each of the specified nodes was last used.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getNodesPriorityValue">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getNodesPriorityValue"/>
         <documentation>
            For each of the named pools, get the priority values for the named nodes in each pool.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNodesPriorityValueByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getNodesPriorityValueByLocation"/>
         <documentation>
            For each of the named pools, get the priority values for the named nodes in each pool. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNodesWeightings">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getNodesWeightings"/>
         <documentation>
            For each of the named pools, get the weighting values for the specified nodes in this pool.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNodesWeightingsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getNodesWeightingsByLocation"/>
         <documentation>
            For each of the named pools, get the weighting values for the specified nodes in this pool. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNote">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getNote"/>
         <documentation>
            Get the note for each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getPassiveMonitoring">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getPassiveMonitoring"/>
         <documentation>
            Get whether this pool uses passive monitoring.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getPassiveMonitoringByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getPassiveMonitoringByLocation"/>
         <documentation>
            Get whether this pool uses passive monitoring. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getPersistence">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getPersistence"/>
         <documentation>
            Get the default Session Persistence classes that each of the named pools uses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getPersistenceByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getPersistenceByLocation"/>
         <documentation>
            Get the default Session Persistence classes that each of the named pools uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getPoolNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getPoolNames"/>
         <documentation>
            Get the names of all of the configured pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getPriorityEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getPriorityEnabled"/>
         <documentation>
            Get whether each of the named pools uses priority lists.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getPriorityEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getPriorityEnabledByLocation"/>
         <documentation>
            Get whether each of the named pools uses priority lists. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getPriorityNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getPriorityNodes"/>
         <documentation>
            Get the minimum number of highest-priority active nodes, for each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getPriorityNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getPriorityNodesByLocation"/>
         <documentation>
            Get the minimum number of highest-priority active nodes, for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getPriorityValues">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getPriorityValues"/>
         <documentation>
            For each of the named pools, get the priority values for each of the nodes in each pool.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getPriorityValuesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getPriorityValuesByLocation"/>
         <documentation>
            For each of the named pools, get the priority values for each of the nodes in each pool. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getQueueTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getQueueTimeout"/>
         <documentation>
            Get is the maximum time to keep a connections queued in seconds. A value of 0 will not timeout queued connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getQueueTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getQueueTimeoutByLocation"/>
         <documentation>
            Get is the maximum time to keep a connections queued in seconds. A value of 0 will not timeout queued connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSMTPSendStartTLS">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getSMTPSendStartTLS"/>
         <documentation>
            Get whether each of the named pools should upgrade SMTP connections to SSL using STARTTLS (the alternative is to encrypt the entire connection).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSMTPSendStartTLSByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getSMTPSendStartTLSByLocation"/>
         <documentation>
            Get whether each of the named pools should upgrade SMTP connections to SSL using STARTTLS (the alternative is to encrypt the entire connection). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLClientAuth">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getSSLClientAuth"/>
         <documentation>
            Get whether each of the named pools should use client authentication. If client authentication is enabled and a back-end node asks for a client authentication, a suitable certificate and private key will be used from the SSL Client Certificates catalog.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLClientAuthByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getSSLClientAuthByLocation"/>
         <documentation>
            Get whether each of the named pools should use client authentication. If client authentication is enabled and a back-end node asks for a client authentication, a suitable certificate and private key will be used from the SSL Client Certificates catalog. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLEncrypt">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getSSLEncrypt"/>
         <documentation>
            Get whether each of the named pools should encrypt data to the back-end nodes using SSL.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLEncryptByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getSSLEncryptByLocation"/>
         <documentation>
            Get whether each of the named pools should encrypt data to the back-end nodes using SSL. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLEnhance">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getSSLEnhance"/>
         <documentation>
            Get whether each of the named pools should use SSL protocol enhancements. These enhancements allow Riverbed Web Servers to run multiple SSL sites, and to discover the client's IP address. Only use enable this if, for this pool, you are using Riverbed Web Servers or Stingray Traffic Managers whose virtual servers have the 'ssl_trust_magic' setting enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLEnhanceByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getSSLEnhanceByLocation"/>
         <documentation>
            Get whether each of the named pools should use SSL protocol enhancements. These enhancements allow Riverbed Web Servers to run multiple SSL sites, and to discover the client's IP address. Only use enable this if, for this pool, you are using Riverbed Web Servers or Stingray Traffic Managers whose virtual servers have the 'ssl_trust_magic' setting enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLSendCloseAlerts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getSSLSendCloseAlerts"/>
         <documentation>
            Get whether each of the named pools should send a close alert when they initiate socket disconnections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLSendCloseAlertsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getSSLSendCloseAlertsByLocation"/>
         <documentation>
            Get whether each of the named pools should send a close alert when they initiate socket disconnections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLServerNameExtension">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getSSLServerNameExtension"/>
         <documentation>
            Get if we should send the server_name extension to the back-end node. This setting forces the use of at least TLS 1.0.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLServerNameExtensionByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getSSLServerNameExtensionByLocation"/>
         <documentation>
            Get if we should send the server_name extension to the back-end node. This setting forces the use of at least TLS 1.0. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLStrictVerify">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getSSLStrictVerify"/>
         <documentation>
            Get whether each of the named pools should perform strict certificate validation on SSL certificates from the back-end nodes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLStrictVerifyByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getSSLStrictVerifyByLocation"/>
         <documentation>
            Get whether each of the named pools should perform strict certificate validation on SSL certificates from the back-end nodes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getTransparent">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getTransparent"/>
         <documentation>
            Get whether each of the named pools should make connections to the back-ends appear to originate from the source client IP address.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getTransparentByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getTransparentByLocation"/>
         <documentation>
            Get whether each of the named pools should make connections to the back-ends appear to originate from the source client IP address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getUDPAcceptFrom">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getUDPAcceptFrom"/>
         <documentation>
            Get what sets of IP addresses and ports from which we should accept UDP responses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getUDPAcceptFromByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getUDPAcceptFromByLocation"/>
         <documentation>
            Get what sets of IP addresses and ports from which we should accept UDP responses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getUDPAcceptFromIPMask">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getUDPAcceptFromIPMask"/>
         <documentation>
            Get the mask to validate the IP of UDP responses with. Only used if UDPAcceptFromIP is set to 'ip_mask'.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getUDPAcceptFromIPMaskByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getUDPAcceptFromIPMaskByLocation"/>
         <documentation>
            Get the mask to validate the IP of UDP responses with. Only used if UDPAcceptFromIP is set to 'ip_mask'. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWeightings">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getWeightings"/>
         <documentation>
            For each of the named pools, get the weightings for each of the nodes in each pool.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWeightingsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/getWeightingsByLocation"/>
         <documentation>
            For each of the named pools, get the weightings for each of the nodes in each pool. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeDrainingNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/removeDrainingNodes"/>
         <documentation>
            Remove nodes from the lists of draining nodes, for each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeDrainingNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/removeDrainingNodesByLocation"/>
         <documentation>
            Remove nodes from the lists of draining nodes, for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeMonitors">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/removeMonitors"/>
         <documentation>
            Remove monitors from each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeMonitorsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/removeMonitorsByLocation"/>
         <documentation>
            Remove monitors from each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/removeNodes"/>
         <documentation>
            Remove nodes from each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/removeNodesByLocation"/>
         <documentation>
            Remove nodes from each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="renamePool">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/renamePool"/>
         <documentation>
            Rename each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleCloudcredentials">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleCloudcredentials"/>
         <documentation>
            Set the cloud credentials for this auto-scaled pool
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleCloudcredentialsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleCloudcredentialsByLocation"/>
         <documentation>
            Set the cloud credentials for this auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleCluster">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleCluster"/>
         <documentation>
            Set The ESX host or ESX cluster name to put the new virtual machine instances on.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleClusterByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleClusterByLocation"/>
         <documentation>
            Set The ESX host or ESX cluster name to put the new virtual machine instances on. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleDatacenter">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleDatacenter"/>
         <documentation>
            Set The name of the logical datacenter on the vCenter server
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleDatacenterByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleDatacenterByLocation"/>
         <documentation>
            Set The name of the logical datacenter on the vCenter server This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleDatastore">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleDatastore"/>
         <documentation>
            Set The name of the datastore to be used by the newly created virtual machine.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleDatastoreByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleDatastoreByLocation"/>
         <documentation>
            Set The name of the datastore to be used by the newly created virtual machine. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleEnabled"/>
         <documentation>
            Set whether this pool uses auto-scaling.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleEnabledByLocation"/>
         <documentation>
            Set whether this pool uses auto-scaling. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleExternal">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleExternal"/>
         <documentation>
            Set whether autoscaling is handled externally or internally
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleExternalByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleExternalByLocation"/>
         <documentation>
            Set whether autoscaling is handled externally or internally This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleHysteresis">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleHysteresis"/>
         <documentation>
            Set the hysteresis period for an auto-scaled pool
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleHysteresisByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleHysteresisByLocation"/>
         <documentation>
            Set the hysteresis period for an auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleImageid">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleImageid"/>
         <documentation>
            Set the image identifier
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleImageidByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleImageidByLocation"/>
         <documentation>
            Set the image identifier This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleIpstouse">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleIpstouse"/>
         <documentation>
            Set whether to use the public or private IPs
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleIpstouseByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleIpstouseByLocation"/>
         <documentation>
            Set whether to use the public or private IPs This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleLastnodeIdletime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleLastnodeIdletime"/>
         <documentation>
            Set the idle time of the last node in an autoscaled pool before it can be destroyed
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleLastnodeIdletimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleLastnodeIdletimeByLocation"/>
         <documentation>
            Set the idle time of the last node in an autoscaled pool before it can be destroyed This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleMaxNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleMaxNodes"/>
         <documentation>
            Set the maximum number of nodes in an auto-scaled pool
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleMaxNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleMaxNodesByLocation"/>
         <documentation>
            Set the maximum number of nodes in an auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleMinNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleMinNodes"/>
         <documentation>
            Set the minimum number of nodes in an auto-scaled pool
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleMinNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleMinNodesByLocation"/>
         <documentation>
            Set the minimum number of nodes in an auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleName">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleName"/>
         <documentation>
            Set the node name prefix for this auto-scaled pool
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleNameByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleNameByLocation"/>
         <documentation>
            Set the node name prefix for this auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscalePort">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscalePort"/>
         <documentation>
            Set the port number for this auto-scaled pool
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscalePortByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscalePortByLocation"/>
         <documentation>
            Set the port number for this auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleRefractory">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleRefractory"/>
         <documentation>
            Set the refractory period for an auto-scaled pool
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleRefractoryByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleRefractoryByLocation"/>
         <documentation>
            Set the refractory period for an auto-scaled pool This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleResponseTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleResponseTime"/>
         <documentation>
            Set the expected node response time in milliseconds
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleResponseTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleResponseTimeByLocation"/>
         <documentation>
            Set the expected node response time in milliseconds This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleScaledownLevel">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleScaledownLevel"/>
         <documentation>
            Set the threshold of conforming requests for scaling down
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleScaledownLevelByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleScaledownLevelByLocation"/>
         <documentation>
            Set the threshold of conforming requests for scaling down This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleScaleupLevel">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleScaleupLevel"/>
         <documentation>
            Set the acceptable lower percentage of conforming requests
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleScaleupLevelByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleScaleupLevelByLocation"/>
         <documentation>
            Set the acceptable lower percentage of conforming requests This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleSizeid">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleSizeid"/>
         <documentation>
            Set the size identifier
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscaleSizeidByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setAutoscaleSizeidByLocation"/>
         <documentation>
            Set the size identifier This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setBandwidthClass">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setBandwidthClass"/>
         <documentation>
            Set the Bandwidth Classes that each of the named pools uses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setBandwidthClassByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setBandwidthClassByLocation"/>
         <documentation>
            Set the Bandwidth Classes that each of the named pools uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDisabledNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setDisabledNodes"/>
         <documentation>
            For each of the named pools, set the specified nodes to be disabled in the pool (all other nodes will remain in their existing state).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDisabledNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setDisabledNodesByLocation"/>
         <documentation>
            For each of the named pools, set the specified nodes to be disabled in the pool (all other nodes will remain in their existing state). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDrainingNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setDrainingNodes"/>
         <documentation>
            Set the lists of draining nodes for each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDrainingNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setDrainingNodesByLocation"/>
         <documentation>
            Set the lists of draining nodes for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setErrorFile">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setErrorFile"/>
         <documentation>
            This method is now obsolete and is replaced by VirtualServer.setErrorFile.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFTPSupportRfc2428">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setFTPSupportRfc2428"/>
         <documentation>
            Set whether backend IPv4 nodes understand the FTP EPRT and EPSV commands.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFTPSupportRfc2428ByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setFTPSupportRfc2428ByLocation"/>
         <documentation>
            Set whether backend IPv4 nodes understand the FTP EPRT and EPSV commands. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFailpool">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setFailpool"/>
         <documentation>
            Set the pool to use when all nodes in a pool fail, for each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFailpoolByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setFailpoolByLocation"/>
         <documentation>
            Set the pool to use when all nodes in a pool fail, for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setKeepalive">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setKeepalive"/>
         <documentation>
            Set whether each of the named pools should maintain HTTP keepalive connections to the nodes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setKeepaliveByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setKeepaliveByLocation"/>
         <documentation>
            Set whether each of the named pools should maintain HTTP keepalive connections to the nodes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setKeepaliveNonIdempotent">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setKeepaliveNonIdempotent"/>
         <documentation>
            Set whether each of the named pools should maintain HTTP keepalive connections to the nodes for non-idempotent requests.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setKeepaliveNonIdempotentByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setKeepaliveNonIdempotentByLocation"/>
         <documentation>
            Set whether each of the named pools should maintain HTTP keepalive connections to the nodes for non-idempotent requests. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLoadBalancingAlgorithm">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setLoadBalancingAlgorithm"/>
         <documentation>
            Set the load balancing algorithms that each of the named pools uses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLoadBalancingAlgorithmByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setLoadBalancingAlgorithmByLocation"/>
         <documentation>
            Set the load balancing algorithms that each of the named pools uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxConnectTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setMaxConnectTime"/>
         <documentation>
            Set the time that each of the named pools should wait for a connection to establish to a node before trying another node, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxConnectTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setMaxConnectTimeByLocation"/>
         <documentation>
            Set the time that each of the named pools should wait for a connection to establish to a node before trying another node, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxConnectionAttempts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setMaxConnectionAttempts"/>
         <documentation>
            Set the number of times that each of the named pools can try to connect to any of its nodes before sending an error response.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxConnectionAttemptsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setMaxConnectionAttemptsByLocation"/>
         <documentation>
            Set the number of times that each of the named pools can try to connect to any of its nodes before sending an error response. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxConnectionsPernode">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setMaxConnectionsPernode"/>
         <documentation>
            Set is the maximum number of conncurrent connections allowed to each node in the pool per machine.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxConnectionsPernodeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setMaxConnectionsPernodeByLocation"/>
         <documentation>
            Set is the maximum number of conncurrent connections allowed to each node in the pool per machine. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxIdleConnectionsPerNode">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setMaxIdleConnectionsPerNode"/>
         <documentation>
            Set the maximum numbers of unused HTTP keepalive connections that each of the named pools should maintain to an individual node.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxIdleConnectionsPerNodeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setMaxIdleConnectionsPerNodeByLocation"/>
         <documentation>
            Set the maximum numbers of unused HTTP keepalive connections that each of the named pools should maintain to an individual node. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxKeepalivesPerNode">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setMaxKeepalivesPerNode"/>
         <documentation>
            setMaxKeepalivesPerNode is deprecated, please use setMaxIdleConnectionsPerNode instead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxKeepalivesPerNodeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setMaxKeepalivesPerNodeByLocation"/>
         <documentation>
            setMaxKeepalivesPerNode is deprecated, please use setMaxIdleConnectionsPerNode instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxQueueSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setMaxQueueSize"/>
         <documentation>
            Set is the maximum number of connections that can be queued due to connection limits.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxQueueSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setMaxQueueSizeByLocation"/>
         <documentation>
            Set is the maximum number of connections that can be queued due to connection limits. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxReplyTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setMaxReplyTime"/>
         <documentation>
            Set the time that each of the named pools should wait for a response from a node before either discarding the request or trying another node, in seconds (retryable requests only).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxReplyTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setMaxReplyTimeByLocation"/>
         <documentation>
            Set the time that each of the named pools should wait for a response from a node before either discarding the request or trying another node, in seconds (retryable requests only). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxTimedOutConnectionAttempts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setMaxTimedOutConnectionAttempts"/>
         <documentation>
            Set the number of times that each of the named pools can try to connect and time out waiting for a response, by exceeding max_reply_time, to any of its nodes before sending an error response.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxTimedOutConnectionAttemptsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setMaxTimedOutConnectionAttemptsByLocation"/>
         <documentation>
            Set the number of times that each of the named pools can try to connect and time out waiting for a response, by exceeding max_reply_time, to any of its nodes before sending an error response. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMonitors">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setMonitors"/>
         <documentation>
            Set the list of all monitors.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMonitorsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setMonitorsByLocation"/>
         <documentation>
            Set the list of all monitors. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNodeConnClose">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setNodeConnClose"/>
         <documentation>
            Set whether all connections that have been sent to a node are closed when that node is marked as dead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNodeConnCloseByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setNodeConnCloseByLocation"/>
         <documentation>
            Set whether all connections that have been sent to a node are closed when that node is marked as dead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNodeConnectionAttempts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setNodeConnectionAttempts"/>
         <documentation>
            Set the number of times your traffic manager should try and connect to a node before registering it as failed when passive monitoring is enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNodeConnectionAttemptsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setNodeConnectionAttemptsByLocation"/>
         <documentation>
            Set the number of times your traffic manager should try and connect to a node before registering it as failed when passive monitoring is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNodeFailTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setNodeFailTime"/>
         <documentation>
            Set the length of time a failed node should be isolated for before testing it with new traffic, in seconds
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNodeFailTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setNodeFailTimeByLocation"/>
         <documentation>
            Set the length of time a failed node should be isolated for before testing it with new traffic, in seconds This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNodeUseNagle">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setNodeUseNagle"/>
         <documentation>
            Set whether Nagle's algorithm should be used for TCP connections to the back-end nodes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNodeUseNagleByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setNodeUseNagleByLocation"/>
         <documentation>
            Set whether Nagle's algorithm should be used for TCP connections to the back-end nodes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setNodes"/>
         <documentation>
            Set the lists of nodes for each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setNodesByLocation"/>
         <documentation>
            Set the lists of nodes for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNodesPriorityValue">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setNodesPriorityValue"/>
         <documentation>
            For each of the named pools, set the priority values for the named nodes in each pool.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNodesPriorityValueByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setNodesPriorityValueByLocation"/>
         <documentation>
            For each of the named pools, set the priority values for the named nodes in each pool. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNodesWeightings">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setNodesWeightings"/>
         <documentation>
            For each of the named pools, set the weighting (for the Weighted Round Robin algorithm) for each node in that pool.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNodesWeightingsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setNodesWeightingsByLocation"/>
         <documentation>
            For each of the named pools, set the weighting (for the Weighted Round Robin algorithm) for each node in that pool. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNote">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setNote"/>
         <documentation>
            Set the note for each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setPassiveMonitoring">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setPassiveMonitoring"/>
         <documentation>
            Set whether this pool uses passive monitoring.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setPassiveMonitoringByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setPassiveMonitoringByLocation"/>
         <documentation>
            Set whether this pool uses passive monitoring. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setPersistence">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setPersistence"/>
         <documentation>
            Set the default Session Persistence classes that each of the named pools uses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setPersistenceByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setPersistenceByLocation"/>
         <documentation>
            Set the default Session Persistence classes that each of the named pools uses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setPriorityEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setPriorityEnabled"/>
         <documentation>
            Set whether each of the named pools uses priority lists.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setPriorityEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setPriorityEnabledByLocation"/>
         <documentation>
            Set whether each of the named pools uses priority lists. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setPriorityNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setPriorityNodes"/>
         <documentation>
            Set the minimum number of highest-priority active nodes, for each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setPriorityNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setPriorityNodesByLocation"/>
         <documentation>
            Set the minimum number of highest-priority active nodes, for each of the named pools. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setQueueTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setQueueTimeout"/>
         <documentation>
            Set is the maximum time to keep a connections queued in seconds. A value of 0 will not timeout queued connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setQueueTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setQueueTimeoutByLocation"/>
         <documentation>
            Set is the maximum time to keep a connections queued in seconds. A value of 0 will not timeout queued connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSMTPSendStartTLS">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setSMTPSendStartTLS"/>
         <documentation>
            Set whether each of the named pools should upgrade SMTP connections to SSL using STARTTLS (the alternative is to encrypt the entire connection).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSMTPSendStartTLSByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setSMTPSendStartTLSByLocation"/>
         <documentation>
            Set whether each of the named pools should upgrade SMTP connections to SSL using STARTTLS (the alternative is to encrypt the entire connection). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLClientAuth">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setSSLClientAuth"/>
         <documentation>
            Set whether each of the named pools should use client authentication. If client authentication is enabled and a back-end node asks for a client authentication, a suitable certificate and private key will be used from the SSL Client Certificates catalog.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLClientAuthByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setSSLClientAuthByLocation"/>
         <documentation>
            Set whether each of the named pools should use client authentication. If client authentication is enabled and a back-end node asks for a client authentication, a suitable certificate and private key will be used from the SSL Client Certificates catalog. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLEncrypt">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setSSLEncrypt"/>
         <documentation>
            Set whether each of the named pools should encrypt data to the back-end nodes using SSL.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLEncryptByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setSSLEncryptByLocation"/>
         <documentation>
            Set whether each of the named pools should encrypt data to the back-end nodes using SSL. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLEnhance">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setSSLEnhance"/>
         <documentation>
            Set whether each of the named pools should use SSL protocol enhancements. These enhancements allow Riverbed Web Servers to run multiple SSL sites, and to discover the client's IP address. Only use enable this if, for this pool, you are using Riverbed Web Servers or Stingray Traffic Managers whose virtual servers have the 'ssl_trust_magic' setting enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLEnhanceByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setSSLEnhanceByLocation"/>
         <documentation>
            Set whether each of the named pools should use SSL protocol enhancements. These enhancements allow Riverbed Web Servers to run multiple SSL sites, and to discover the client's IP address. Only use enable this if, for this pool, you are using Riverbed Web Servers or Stingray Traffic Managers whose virtual servers have the 'ssl_trust_magic' setting enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLSendCloseAlerts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setSSLSendCloseAlerts"/>
         <documentation>
            Set whether each of the named pools should send a close alert when they initiate socket disconnections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLSendCloseAlertsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setSSLSendCloseAlertsByLocation"/>
         <documentation>
            Set whether each of the named pools should send a close alert when they initiate socket disconnections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLServerNameExtension">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setSSLServerNameExtension"/>
         <documentation>
            Set if we should send the server_name extension to the back-end node. This setting forces the use of at least TLS 1.0.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLServerNameExtensionByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setSSLServerNameExtensionByLocation"/>
         <documentation>
            Set if we should send the server_name extension to the back-end node. This setting forces the use of at least TLS 1.0. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLStrictVerify">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setSSLStrictVerify"/>
         <documentation>
            Set whether each of the named pools should perform strict certificate validation on SSL certificates from the back-end nodes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLStrictVerifyByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setSSLStrictVerifyByLocation"/>
         <documentation>
            Set whether each of the named pools should perform strict certificate validation on SSL certificates from the back-end nodes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTransparent">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setTransparent"/>
         <documentation>
            Set whether each of the named pools should make connections to the back-ends appear to originate from the source client IP address.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTransparentByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setTransparentByLocation"/>
         <documentation>
            Set whether each of the named pools should make connections to the back-ends appear to originate from the source client IP address. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setUDPAcceptFrom">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setUDPAcceptFrom"/>
         <documentation>
            Set what sets of IP addresses and ports from which we should accept UDP responses.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setUDPAcceptFromByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setUDPAcceptFromByLocation"/>
         <documentation>
            Set what sets of IP addresses and ports from which we should accept UDP responses. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setUDPAcceptFromIPMask">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setUDPAcceptFromIPMask"/>
         <documentation>
            Set the mask to validate the IP of UDP responses with. Only used if UDPAcceptFromIP is set to 'ip_mask'.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setUDPAcceptFromIPMaskByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Pool/setUDPAcceptFromIPMaskByLocation"/>
         <documentation>
            Set the mask to validate the IP of UDP responses with. Only used if UDPAcceptFromIP is set to 'ip_mask'. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Pool/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
   </binding>
   
   <service name="Pool">
      <documentation>
         The Pool interface allows management of Pool objects. Using this interface, you can create, delete and rename pool objects, and manage their configuration.
      </documentation>
      
      <port name="PoolPort" binding="zeusns:PoolBinding">
         <soap:address location="https://admin_server:9090/soap"/>
      </port>
   </service>
   
</definitions>
