<?xml version="1.0" ?>

<!--
    Copyright (c) 2005-2013 Zeus Technology. All rights reserved.

-->

<definitions name="GlobalSettings"
 targetNamespace="http://soap.zeus.com/zxtm/1.0/"
 xmlns:zeusns="http://soap.zeus.com/zxtm/1.0/"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
 xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
 xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
 xmlns="http://schemas.xmlsoap.org/wsdl/">
   
   <types>
      <xsd:schema targetNamespace='http://soap.zeus.com/zxtm/1.0/'
       xmlns='http://www.w3.org/2001/XMLSchema'
       xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/'
       xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/'>
         
         <xsd:simpleType name="GlobalSettings.AdminAllowRehandshake">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="always">
                  <xsd:annotation>
                     <xsd:documentation>Always allow</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="safe">
                  <xsd:annotation>
                     <xsd:documentation>Allow safe re-handshakes</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="rfc5746">
                  <xsd:annotation>
                     <xsd:documentation>Only if client uses RFC 5746 (Secure Renegotiation Extension)</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="never">
                  <xsd:annotation>
                     <xsd:documentation>Never allow</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:simpleType name="GlobalSettings.AdminDiffieHellmanKeyLength">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="dh_1024">
                  <xsd:annotation>
                     <xsd:documentation>1024</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="dh_2048">
                  <xsd:annotation>
                     <xsd:documentation>2048</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="dh_3072">
                  <xsd:annotation>
                     <xsd:documentation>3072</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="dh_4096">
                  <xsd:annotation>
                     <xsd:documentation>4096</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:simpleType name="GlobalSettings.ErrorLevel">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="fatal">
                  <xsd:annotation>
                     <xsd:documentation>ERR_FATAL</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="serious">
                  <xsd:annotation>
                     <xsd:documentation>ERR_SERIOUS</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="warn">
                  <xsd:annotation>
                     <xsd:documentation>ERR_WARN</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="info">
                  <xsd:annotation>
                     <xsd:documentation>ERR_INFO</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:simpleType name="GlobalSettings.FlipperHeartbeatMethod">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="multicast">
                  <xsd:annotation>
                     <xsd:documentation>multicast</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="unicast">
                  <xsd:annotation>
                     <xsd:documentation>unicast</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:complexType name="GlobalSettings.ReturnPathRoute">
           <xsd:annotation>
            <xsd:documentation>This structure contains a return path route, consisting of MAC + IPv4 + IPv6 addresses. At least one IP address is required.</xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="mac" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The MAC address of the router.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="ipv4" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The IPv4 address of the router.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="ipv6" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The IPv6 address of the router.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="GlobalSettings.ReturnPathRouteArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:GlobalSettings.ReturnPathRoute[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:simpleType name="GlobalSettings.SSL3AllowRehandshake">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="always">
                  <xsd:annotation>
                     <xsd:documentation>Always allow</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="safe">
                  <xsd:annotation>
                     <xsd:documentation>Allow safe re-handshakes</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="rfc5746">
                  <xsd:annotation>
                     <xsd:documentation>Only if client uses RFC 5746 (Secure Renegotiation Extension)</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="never">
                  <xsd:annotation>
                     <xsd:documentation>Never allow</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:simpleType name="GlobalSettings.SSL3DiffieHellmanKeyLength">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="dh_1024">
                  <xsd:annotation>
                     <xsd:documentation>1024</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="dh_2048">
                  <xsd:annotation>
                     <xsd:documentation>2048</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="dh_3072">
                  <xsd:annotation>
                     <xsd:documentation>3072</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="dh_4096">
                  <xsd:annotation>
                     <xsd:documentation>4096</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:simpleType name="GlobalSettings.SSLHardwarePKCS11SlotType">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="operator">
                  <xsd:annotation>
                     <xsd:documentation>Operator Card Set</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="softcard">
                  <xsd:annotation>
                     <xsd:documentation>Soft Card</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="module">
                  <xsd:annotation>
                     <xsd:documentation>Local Module</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:simpleType name="GlobalSettings.SSLHardwareType">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="none">
                  <xsd:annotation>
                     <xsd:documentation>None</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="pkcs11">
                  <xsd:annotation>
                     <xsd:documentation>PKCS#11 (e.g. nCipher NetHSM, Sun SCA 6000)</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="cn1000">
                  <xsd:annotation>
                     <xsd:documentation>Cavium Networks CN1000</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="cn2000">
                  <xsd:annotation>
                     <xsd:documentation>Cavium Networks CN2000</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:simpleType name="GlobalSettings.SocketOptimizations">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="auto">
                  <xsd:annotation>
                     <xsd:documentation>auto</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="Yes">
                  <xsd:annotation>
                     <xsd:documentation>Yes</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="No">
                  <xsd:annotation>
                     <xsd:documentation>No</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:simpleType name="GlobalSettings.SsldLibrary">
            <xsd:restriction base="xsd:string">
               <xsd:enumeration value="none">
                  <xsd:annotation>
                     <xsd:documentation>None</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="pkcs11">
                  <xsd:annotation>
                     <xsd:documentation>PKCS#11 (e.g. nCipher NetHSM, Sun SCA 6000)</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="cn1000">
                  <xsd:annotation>
                     <xsd:documentation>Cavium Networks CN1000</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
               <xsd:enumeration value="cn2000">
                  <xsd:annotation>
                     <xsd:documentation>Cavium Networks CN2000</xsd:documentation>
                  </xsd:annotation>
               </xsd:enumeration>
            </xsd:restriction>
         </xsd:simpleType>
         
         <xsd:complexType name="StringArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:string[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="StringArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:StringArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:boolean[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:booleanArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         
         <xsd:complexType name="doubleArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:double[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="intArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:int[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="longArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:long[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedIntArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedInt[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedLongArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedLong[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="DeploymentError">
           <xsd:annotation>
            <xsd:documentation>
              The DeploymentError fault is raised when a configuration
              change causes errors when attempting to apply the configuration
              to a running traffic manager.
         
              It would be raised in cases such as failing to bind to
              a port when enabling a Virtual Server.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidInput">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidInput fault is raised when the input to a function is
              invalid, for example a number was out of range. This fault is also
              raised in cases such as VirtualServer.setPool() where the Pool
              doesn't exist
         
              The details in the fault contain the object, key and value
              that caused the fault. These might be blank if they are not relevant
              to the fault.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidOperation">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidOperation fault is emitted when attempting an operation
              that doesn't make sense or is prohibited, for example deleting
              a built-in monitor, or attempting to rename an object twice in
              the same call. 
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectDoesNotExist">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectDoesNotExist fault is raised when attempting to perform an
             operation on an object (such as Virtual Server) that doesn't exist.
         
             This fault will only be raised if the primary object in the call doesn't
             exist. For example if calling VirtualServer.setPool(), then
             this fault will be raised if the Virtual Server doesn't exist, but if
             the Pool doesn't exist then the "InvalidInput" fault will be raised.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
      </xsd:schema>
   </types>
   
   <message name="addApplianceReturnPathRoutesRequest">
      <part name="value" type="zeusns:GlobalSettings.ReturnPathRouteArray" />
   </message>
   
   <message name="addApplianceReturnPathRoutesResponse"></message>
   
   <message name="addApplianceReturnPathRoutesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="zeusns:GlobalSettings.ReturnPathRouteArray" />
   </message>
   
   <message name="addApplianceReturnPathRoutesByLocationResponse"></message>
   
   <message name="addFlipperFrontendCheckAddressesRequest">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="addFlipperFrontendCheckAddressesResponse"></message>
   
   <message name="addFlipperFrontendCheckAddressesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="addFlipperFrontendCheckAddressesByLocationResponse"></message>
   
   <message name="getASPSessionCacheSizeRequest"></message>
   
   <message name="getASPSessionCacheSizeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getASPSessionCacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getASPSessionCacheSizeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getAcceptingDelayRequest"></message>
   
   <message name="getAcceptingDelayResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getAcceptingDelayByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getAcceptingDelayByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getAdminAllowRehandshakeRequest"></message>
   
   <message name="getAdminAllowRehandshakeResponse">
      <part name="value" type="zeusns:GlobalSettings.AdminAllowRehandshake" />
   </message>
   
   <message name="getAdminDiffieHellmanKeyLengthRequest"></message>
   
   <message name="getAdminDiffieHellmanKeyLengthResponse">
      <part name="value" type="zeusns:GlobalSettings.AdminDiffieHellmanKeyLength" />
   </message>
   
   <message name="getAdminInsertExtraFragmentRequest"></message>
   
   <message name="getAdminInsertExtraFragmentResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getAdminMinRehandshakeIntervalRequest"></message>
   
   <message name="getAdminMinRehandshakeIntervalResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getAdminSSLCiphersRequest"></message>
   
   <message name="getAdminSSLCiphersResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getAdminSSLMaxHandshakeMessageSizeRequest"></message>
   
   <message name="getAdminSSLMaxHandshakeMessageSizeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getAdminSSLPreventTimingSideChannelsRequest"></message>
   
   <message name="getAdminSSLPreventTimingSideChannelsResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getAdminSSLSupportTLS11Request"></message>
   
   <message name="getAdminSSLSupportTLS11Response">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getAdminSupportSSL2Request"></message>
   
   <message name="getAdminSupportSSL2Response">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getAdminSupportSSL3Request"></message>
   
   <message name="getAdminSupportSSL3Response">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getAdminSupportTLS1Request"></message>
   
   <message name="getAdminSupportTLS1Response">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getAlertEmailIntervalRequest"></message>
   
   <message name="getAlertEmailIntervalResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getAlertEmailIntervalByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getAlertEmailIntervalByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getAlertEmailMaxAttemptsRequest"></message>
   
   <message name="getAlertEmailMaxAttemptsResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getAlertEmailMaxAttemptsByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getAlertEmailMaxAttemptsByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getAllowConsecutiveCharsRequest"></message>
   
   <message name="getAllowConsecutiveCharsResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getApplianceReturnPathRoutesRequest"></message>
   
   <message name="getApplianceReturnPathRoutesResponse">
      <part name="value" type="zeusns:GlobalSettings.ReturnPathRouteArray" />
   </message>
   
   <message name="getApplianceReturnPathRoutesByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getApplianceReturnPathRoutesByLocationResponse">
      <part name="value" type="zeusns:GlobalSettings.ReturnPathRouteArray" />
   </message>
   
   <message name="getApplianceReturnPathRoutingEnabledRequest"></message>
   
   <message name="getApplianceReturnPathRoutingEnabledResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getApplianceReturnPathRoutingEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getApplianceReturnPathRoutingEnabledByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getAptimizerMaxOriginalContentBufferSizeRequest"></message>
   
   <message name="getAptimizerMaxOriginalContentBufferSizeResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getAptimizerWatchdogIntervalRequest"></message>
   
   <message name="getAptimizerWatchdogIntervalResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getAptimizerWatchdogLimitRequest"></message>
   
   <message name="getAptimizerWatchdogLimitResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getAutoscalerVerboseRequest"></message>
   
   <message name="getAutoscalerVerboseResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getAutoscalerVerboseByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getAutoscalerVerboseByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getBackendKeepaliveTimeoutRequest"></message>
   
   <message name="getBackendKeepaliveTimeoutResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getBackendKeepaliveTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getBackendKeepaliveTimeoutByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getBandwidthSharingRequest"></message>
   
   <message name="getBandwidthSharingResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getBannerAcceptRequest"></message>
   
   <message name="getBannerAcceptResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getChunkSizeRequest"></message>
   
   <message name="getChunkSizeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getChunkSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getChunkSizeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getClientFirstOptRequest"></message>
   
   <message name="getClientFirstOptResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getClientFirstOptByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getClientFirstOptByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getControlAllowHostsRequest"></message>
   
   <message name="getControlAllowHostsResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getControlAllowHostsByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getControlAllowHostsByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getControlCanUpdateDefaultRequest"></message>
   
   <message name="getControlCanUpdateDefaultResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getDNSCacheExpiryTimeRequest"></message>
   
   <message name="getDNSCacheExpiryTimeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getDNSCacheExpiryTimeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getDNSCacheExpiryTimeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getDNSCacheMaxTTLRequest"></message>
   
   <message name="getDNSCacheMaxTTLResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getDNSCacheMaxTTLByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getDNSCacheMaxTTLByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getDNSCacheMinTTLRequest"></message>
   
   <message name="getDNSCacheMinTTLResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getDNSCacheMinTTLByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getDNSCacheMinTTLByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getDNSCacheNegativeExpiryTimeRequest"></message>
   
   <message name="getDNSCacheNegativeExpiryTimeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getDNSCacheNegativeExpiryTimeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getDNSCacheNegativeExpiryTimeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getDNSCacheSizeRequest"></message>
   
   <message name="getDNSCacheSizeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getDNSCacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getDNSCacheSizeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getDNSTimeoutRequest"></message>
   
   <message name="getDNSTimeoutResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getDNSTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getDNSTimeoutByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getDeadTimeRequest"></message>
   
   <message name="getDeadTimeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getEC2AccessKeyIDRequest"></message>
   
   <message name="getEC2AccessKeyIDResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getEC2AccessKeyIDByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getEC2AccessKeyIDByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getErrorLevelRequest"></message>
   
   <message name="getErrorLevelResponse">
      <part name="value" type="zeusns:GlobalSettings.ErrorLevel" />
   </message>
   
   <message name="getErrorLevelByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getErrorLevelByLocationResponse">
      <part name="value" type="zeusns:GlobalSettings.ErrorLevel" />
   </message>
   
   <message name="getErrorLogFileRequest"></message>
   
   <message name="getErrorLogFileResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getErrorLogFileByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getErrorLogFileByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getFTPDataBindLowRequest"></message>
   
   <message name="getFTPDataBindLowResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getFTPDataBindLowByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getFTPDataBindLowByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getFipsEnabledRequest"></message>
   
   <message name="getFipsEnabledResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getFlipperArpCountRequest"></message>
   
   <message name="getFlipperArpCountResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getFlipperArpCountByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getFlipperArpCountByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getFlipperAutofailbackRequest"></message>
   
   <message name="getFlipperAutofailbackResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getFlipperAutofailbackByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getFlipperAutofailbackByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getFlipperFrontendCheckAddressesRequest"></message>
   
   <message name="getFlipperFrontendCheckAddressesResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getFlipperFrontendCheckAddressesByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getFlipperFrontendCheckAddressesByLocationResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getFlipperHeartbeatMethodRequest"></message>
   
   <message name="getFlipperHeartbeatMethodResponse">
      <part name="value" type="zeusns:GlobalSettings.FlipperHeartbeatMethod" />
   </message>
   
   <message name="getFlipperHeartbeatMethodByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getFlipperHeartbeatMethodByLocationResponse">
      <part name="value" type="zeusns:GlobalSettings.FlipperHeartbeatMethod" />
   </message>
   
   <message name="getFlipperMonitorIntervalRequest"></message>
   
   <message name="getFlipperMonitorIntervalResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getFlipperMonitorIntervalByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getFlipperMonitorIntervalByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getFlipperMonitorTimeoutRequest"></message>
   
   <message name="getFlipperMonitorTimeoutResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getFlipperMonitorTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getFlipperMonitorTimeoutByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getFlipperMulticastAddressRequest"></message>
   
   <message name="getFlipperMulticastAddressResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getFlipperMulticastAddressByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getFlipperMulticastAddressByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getFlipperUnicastPortRequest"></message>
   
   <message name="getFlipperUnicastPortResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getFlipperUnicastPortByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getFlipperUnicastPortByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getFlipperUseBindipRequest"></message>
   
   <message name="getFlipperUseBindipResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getFlipperUseBindipByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getFlipperUseBindipByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getFlipperVerboseRequest"></message>
   
   <message name="getFlipperVerboseResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getFlipperVerboseByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getFlipperVerboseByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getGLBLoadChangeLimitRequest"></message>
   
   <message name="getGLBLoadChangeLimitResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getGLBLoadChangeLimitByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getGLBLoadChangeLimitByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getGLBVerboseRequest"></message>
   
   <message name="getGLBVerboseResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getGLBVerboseByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getGLBVerboseByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getHistoricalTrafficDaysRequest"></message>
   
   <message name="getHistoricalTrafficDaysResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getHistoricalTrafficDaysByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getHistoricalTrafficDaysByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getIPSessionCacheSizeRequest"></message>
   
   <message name="getIPSessionCacheSizeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getIPSessionCacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getIPSessionCacheSizeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getIdleConnectionTimeoutRequest"></message>
   
   <message name="getIdleConnectionTimeoutResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getIdleConnectionTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getIdleConnectionTimeoutByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getJ2EESessionCacheSizeRequest"></message>
   
   <message name="getJ2EESessionCacheSizeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getJ2EESessionCacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getJ2EESessionCacheSizeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getJavaClasspathRequest"></message>
   
   <message name="getJavaClasspathResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getJavaClasspathByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getJavaClasspathByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getJavaCommandRequest"></message>
   
   <message name="getJavaCommandResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getJavaCommandByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getJavaCommandByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getJavaEnabledRequest"></message>
   
   <message name="getJavaEnabledResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getJavaEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getJavaEnabledByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getJavaLibRequest"></message>
   
   <message name="getJavaLibResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getJavaLibByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getJavaLibByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getJavaMaxConnsRequest"></message>
   
   <message name="getJavaMaxConnsResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getJavaMaxConnsByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getJavaMaxConnsByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getJavaSessionAgeRequest"></message>
   
   <message name="getJavaSessionAgeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getJavaSessionAgeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getJavaSessionAgeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getListenQueueSizeRequest"></message>
   
   <message name="getListenQueueSizeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getListenQueueSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getListenQueueSizeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getLogFlushFlushTimeRequest"></message>
   
   <message name="getLogFlushFlushTimeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getLogFlushFlushTimeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getLogFlushFlushTimeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getLogIntervalRequest"></message>
   
   <message name="getLogIntervalResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getLogIntervalByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getLogIntervalByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getLogRateRequest"></message>
   
   <message name="getLogRateResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getLogRateByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getLogRateByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getLogReopenTimeRequest"></message>
   
   <message name="getLogReopenTimeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getLogReopenTimeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getLogReopenTimeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getLoginBannerRequest"></message>
   
   <message name="getLoginBannerResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getLoginDelayRequest"></message>
   
   <message name="getLoginDelayResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMaxAcceptingRequest"></message>
   
   <message name="getMaxAcceptingResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMaxAcceptingByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getMaxAcceptingByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMaxIdleConnectionsRequest"></message>
   
   <message name="getMaxIdleConnectionsResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMaxIdleConnectionsByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getMaxIdleConnectionsByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMaxKeepalivesRequest"></message>
   
   <message name="getMaxKeepalivesResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMaxKeepalivesByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getMaxKeepalivesByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMaxLoginAttemptsRequest"></message>
   
   <message name="getMaxLoginAttemptsResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMaxLoginExternalRequest"></message>
   
   <message name="getMaxLoginExternalResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getMaxLoginSuspensionTimeRequest"></message>
   
   <message name="getMaxLoginSuspensionTimeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMaxRetriesRequest"></message>
   
   <message name="getMaxRetriesResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMaximumFDCountRequest"></message>
   
   <message name="getMaximumFDCountResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMaximumFDCountByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getMaximumFDCountByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMinAlphaCharsRequest"></message>
   
   <message name="getMinAlphaCharsResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMinNumericCharsRequest"></message>
   
   <message name="getMinNumericCharsResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMinPasswordLengthRequest"></message>
   
   <message name="getMinPasswordLengthResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMinSpecialCharsRequest"></message>
   
   <message name="getMinSpecialCharsResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMinUppercaseCharsRequest"></message>
   
   <message name="getMinUppercaseCharsResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMonitorNumNodesRequest"></message>
   
   <message name="getMonitorNumNodesResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMonitorNumNodesByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getMonitorNumNodesByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getMultipleAcceptRequest"></message>
   
   <message name="getMultipleAcceptResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getMultipleAcceptByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getMultipleAcceptByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getNodeConnectionAttemptsRequest"></message>
   
   <message name="getNodeConnectionAttemptsResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getNodeFailTimeRequest"></message>
   
   <message name="getNodeFailTimeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getOCSPCacheSizeRequest"></message>
   
   <message name="getOCSPCacheSizeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getOCSPCacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getOCSPCacheSizeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getPasswordChangesPerDayRequest"></message>
   
   <message name="getPasswordChangesPerDayResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getPasswordReuseAfterRequest"></message>
   
   <message name="getPasswordReuseAfterResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getPostLoginBannerRequest"></message>
   
   <message name="getPostLoginBannerResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getProtectionConncountSizeRequest"></message>
   
   <message name="getProtectionConncountSizeResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getProtectionConncountSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getProtectionConncountSizeByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getRESTAuthTimeoutRequest"></message>
   
   <message name="getRESTAuthTimeoutResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getRESTEnabledRequest"></message>
   
   <message name="getRESTEnabledResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getRESTMaxHTTPHeaderLengthRequest"></message>
   
   <message name="getRESTMaxHTTPHeaderLengthResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getRESTReplicateAbsoluteTimeRequest"></message>
   
   <message name="getRESTReplicateAbsoluteTimeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getRESTReplicateLullTimeRequest"></message>
   
   <message name="getRESTReplicateLullTimeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getRESTReplicateTimeoutRequest"></message>
   
   <message name="getRESTReplicateTimeoutResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getRateClassLimitRequest"></message>
   
   <message name="getRateClassLimitResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getRateClassLimitByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getRateClassLimitByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getRecentConnsRequest"></message>
   
   <message name="getRecentConnsResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getRecentConnsByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getRecentConnsByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getRecentConnsRetainTimeRequest"></message>
   
   <message name="getRecentConnsRetainTimeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getRecentConnsRetainTimeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getRecentConnsRetainTimeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getRecentConnsSnapshotSizeRequest"></message>
   
   <message name="getRecentConnsSnapshotSizeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getRecentConnsSnapshotSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getRecentConnsSnapshotSizeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSLMClassLimitRequest"></message>
   
   <message name="getSLMClassLimitResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSLMClassLimitByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSLMClassLimitByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSNMPUserCountersRequest"></message>
   
   <message name="getSNMPUserCountersResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSNMPUserCountersByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSNMPUserCountersByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSSL3AllowRehandshakeRequest"></message>
   
   <message name="getSSL3AllowRehandshakeResponse">
      <part name="value" type="zeusns:GlobalSettings.SSL3AllowRehandshake" />
   </message>
   
   <message name="getSSL3AllowRehandshakeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSL3AllowRehandshakeByLocationResponse">
      <part name="value" type="zeusns:GlobalSettings.SSL3AllowRehandshake" />
   </message>
   
   <message name="getSSL3CiphersRequest"></message>
   
   <message name="getSSL3CiphersResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getSSL3CiphersByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSL3CiphersByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getSSL3DiffieHellmanKeyLengthRequest"></message>
   
   <message name="getSSL3DiffieHellmanKeyLengthResponse">
      <part name="value" type="zeusns:GlobalSettings.SSL3DiffieHellmanKeyLength" />
   </message>
   
   <message name="getSSL3DiffieHellmanKeyLengthByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSL3DiffieHellmanKeyLengthByLocationResponse">
      <part name="value" type="zeusns:GlobalSettings.SSL3DiffieHellmanKeyLength" />
   </message>
   
   <message name="getSSL3MinRehandshakeIntervalRequest"></message>
   
   <message name="getSSL3MinRehandshakeIntervalResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSSLCRLMemSizeRequest"></message>
   
   <message name="getSSLCRLMemSizeResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getSSLCRLMemSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLCRLMemSizeByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getSSLDFailureCountRequest"></message>
   
   <message name="getSSLDFailureCountResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSSLDFailureCountByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLDFailureCountByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSSLDPKCS11LibRequest"></message>
   
   <message name="getSSLDPKCS11LibResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getSSLDPKCS11LibByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLDPKCS11LibByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getSSLHardwareAcceleratorRequest"></message>
   
   <message name="getSSLHardwareAcceleratorResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getSSLHardwareAcceleratorByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLHardwareAcceleratorByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getSSLHardwareFailureCountRequest"></message>
   
   <message name="getSSLHardwareFailureCountResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSSLHardwareFailureCountByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLHardwareFailureCountByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSSLHardwarePKCS11LibRequest"></message>
   
   <message name="getSSLHardwarePKCS11LibResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getSSLHardwarePKCS11LibByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLHardwarePKCS11LibByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getSSLHardwarePKCS11SlotLabelRequest"></message>
   
   <message name="getSSLHardwarePKCS11SlotLabelResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getSSLHardwarePKCS11SlotLabelByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLHardwarePKCS11SlotLabelByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getSSLHardwarePKCS11SlotTypeRequest"></message>
   
   <message name="getSSLHardwarePKCS11SlotTypeResponse">
      <part name="value" type="zeusns:GlobalSettings.SSLHardwarePKCS11SlotType" />
   </message>
   
   <message name="getSSLHardwarePKCS11SlotTypeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLHardwarePKCS11SlotTypeByLocationResponse">
      <part name="value" type="zeusns:GlobalSettings.SSLHardwarePKCS11SlotType" />
   </message>
   
   <message name="getSSLHardwareTypeRequest"></message>
   
   <message name="getSSLHardwareTypeResponse">
      <part name="value" type="zeusns:GlobalSettings.SSLHardwareType" />
   </message>
   
   <message name="getSSLHardwareTypeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLHardwareTypeByLocationResponse">
      <part name="value" type="zeusns:GlobalSettings.SSLHardwareType" />
   </message>
   
   <message name="getSSLInsertExtraFragmentRequest"></message>
   
   <message name="getSSLInsertExtraFragmentResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getSSLInsertExtraFragmentByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLInsertExtraFragmentByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getSSLMaxHandshakeMessageSizeRequest"></message>
   
   <message name="getSSLMaxHandshakeMessageSizeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSSLMaxHandshakeMessageSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLMaxHandshakeMessageSizeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSSLOCSPStaplingDefaultRefreshIntervalRequest"></message>
   
   <message name="getSSLOCSPStaplingDefaultRefreshIntervalResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSSLOCSPStaplingDefaultRefreshIntervalByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLOCSPStaplingDefaultRefreshIntervalByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSSLOCSPStaplingMemSizeRequest"></message>
   
   <message name="getSSLOCSPStaplingMemSizeResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getSSLOCSPStaplingMemSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLOCSPStaplingMemSizeByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getSSLPreventTimingSideChannelsRequest"></message>
   
   <message name="getSSLPreventTimingSideChannelsResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getSSLPreventTimingSideChannelsByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLPreventTimingSideChannelsByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getSSLSessionCacheSizeRequest"></message>
   
   <message name="getSSLSessionCacheSizeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSSLSessionCacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLSessionCacheSizeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSSLSessionIDCacheExpiryTimeRequest"></message>
   
   <message name="getSSLSessionIDCacheExpiryTimeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSSLSessionIDCacheExpiryTimeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLSessionIDCacheExpiryTimeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSSLSessionIDCacheSizeRequest"></message>
   
   <message name="getSSLSessionIDCacheSizeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSSLSessionIDCacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLSessionIDCacheSizeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSSLSupportSSL2Request"></message>
   
   <message name="getSSLSupportSSL2Response">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getSSLSupportSSL2ByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLSupportSSL2ByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getSSLSupportSSL3Request"></message>
   
   <message name="getSSLSupportSSL3Response">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getSSLSupportSSL3ByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLSupportSSL3ByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getSSLSupportTLS1Request"></message>
   
   <message name="getSSLSupportTLS1Response">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getSSLSupportTLS11Request"></message>
   
   <message name="getSSLSupportTLS11Response">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getSSLSupportTLS11ByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLSupportTLS11ByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getSSLSupportTLS1ByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSSLSupportTLS1ByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getSharedPoolSizeRequest"></message>
   
   <message name="getSharedPoolSizeResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getSharedPoolSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSharedPoolSizeByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getSoapIdleMinutesRequest"></message>
   
   <message name="getSoapIdleMinutesResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSoapIdleMinutesByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSoapIdleMinutesByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSocketOptimizationsRequest"></message>
   
   <message name="getSocketOptimizationsResponse">
      <part name="value" type="zeusns:GlobalSettings.SocketOptimizations" />
   </message>
   
   <message name="getSocketOptimizationsByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSocketOptimizationsByLocationResponse">
      <part name="value" type="zeusns:GlobalSettings.SocketOptimizations" />
   </message>
   
   <message name="getSsldAccelRequest"></message>
   
   <message name="getSsldAccelResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getSsldAccelByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSsldAccelByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getSsldLibraryRequest"></message>
   
   <message name="getSsldLibraryResponse">
      <part name="value" type="zeusns:GlobalSettings.SsldLibrary" />
   </message>
   
   <message name="getSsldLibraryByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSsldLibraryByLocationResponse">
      <part name="value" type="zeusns:GlobalSettings.SsldLibrary" />
   </message>
   
   <message name="getStateSyncTimeRequest"></message>
   
   <message name="getStateSyncTimeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getStateSyncTimeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getStateSyncTimeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getStateSyncTimeoutRequest"></message>
   
   <message name="getStateSyncTimeoutResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getStateSyncTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getStateSyncTimeoutByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSystemReadBufferSizeRequest"></message>
   
   <message name="getSystemReadBufferSizeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSystemReadBufferSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSystemReadBufferSizeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSystemWriteBufferSizeRequest"></message>
   
   <message name="getSystemWriteBufferSizeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getSystemWriteBufferSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getSystemWriteBufferSizeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getTrackUnknownUsersRequest"></message>
   
   <message name="getTrackUnknownUsersResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getTrafficIPGroupLimitRequest"></message>
   
   <message name="getTrafficIPGroupLimitResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getTrafficIPGroupLimitByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getTrafficIPGroupLimitByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getTrafficScriptMemoryWarningRequest"></message>
   
   <message name="getTrafficScriptMemoryWarningResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getTrafficScriptMemoryWarningByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getTrafficScriptMemoryWarningByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getTrafficscriptArrayElementsRequest"></message>
   
   <message name="getTrafficscriptArrayElementsResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getTrafficscriptArrayElementsByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getTrafficscriptArrayElementsByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getTrafficscriptDataLocalSizeRequest"></message>
   
   <message name="getTrafficscriptDataLocalSizeResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getTrafficscriptDataLocalSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getTrafficscriptDataLocalSizeByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getTrafficscriptDataSizeRequest"></message>
   
   <message name="getTrafficscriptDataSizeResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getTrafficscriptDataSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getTrafficscriptDataSizeByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getTrafficscriptMaxInstrRequest"></message>
   
   <message name="getTrafficscriptMaxInstrResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getTrafficscriptMaxInstrByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getTrafficscriptMaxInstrByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getTrafficscriptRegexCacheSizeRequest"></message>
   
   <message name="getTrafficscriptRegexCacheSizeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getTrafficscriptRegexCacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getTrafficscriptRegexCacheSizeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getTrafficscriptRegexMatchLimitRequest"></message>
   
   <message name="getTrafficscriptRegexMatchLimitResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getTrafficscriptRegexMatchLimitByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getTrafficscriptRegexMatchLimitByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getTrafficscriptRegexMatchWarnPercRequest"></message>
   
   <message name="getTrafficscriptRegexMatchWarnPercResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getTrafficscriptRegexMatchWarnPercByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getTrafficscriptRegexMatchWarnPercByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getTrafficscriptVariablePoolUseRequest"></message>
   
   <message name="getTrafficscriptVariablePoolUseResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getTrafficscriptVariablePoolUseByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getTrafficscriptVariablePoolUseByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getUipageBannerRequest"></message>
   
   <message name="getUipageBannerResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getUniversalSessionCacheSizeRequest"></message>
   
   <message name="getUniversalSessionCacheSizeResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getUniversalSessionCacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getUniversalSessionCacheSizeByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getWebcacheAvgPathLengthRequest"></message>
   
   <message name="getWebcacheAvgPathLengthResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getWebcacheAvgPathLengthByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getWebcacheAvgPathLengthByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getWebcacheDiskRequest"></message>
   
   <message name="getWebcacheDiskResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getWebcacheDiskByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getWebcacheDiskByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getWebcacheDiskDirRequest"></message>
   
   <message name="getWebcacheDiskDirResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getWebcacheDiskDirByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getWebcacheDiskDirByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getWebcacheMaxFileNumRequest"></message>
   
   <message name="getWebcacheMaxFileNumResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getWebcacheMaxFileNumByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getWebcacheMaxFileNumByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getWebcacheMaxFileSizeRequest"></message>
   
   <message name="getWebcacheMaxFileSizeResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getWebcacheMaxFileSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getWebcacheMaxFileSizeByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getWebcacheMaxPathLengthRequest"></message>
   
   <message name="getWebcacheMaxPathLengthResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getWebcacheMaxPathLengthByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getWebcacheMaxPathLengthByLocationResponse">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="getWebcacheNormalizeQueryRequest"></message>
   
   <message name="getWebcacheNormalizeQueryResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getWebcacheNormalizeQueryByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getWebcacheNormalizeQueryByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getWebcacheSizeRequest"></message>
   
   <message name="getWebcacheSizeResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getWebcacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getWebcacheSizeByLocationResponse">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="getWebcacheVerboseRequest"></message>
   
   <message name="getWebcacheVerboseResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="getWebcacheVerboseByLocationRequest">
      <part name="location" type="xsd:string" />
   </message>
   
   <message name="getWebcacheVerboseByLocationResponse">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="removeApplianceReturnPathRoutesRequest">
      <part name="value" type="zeusns:GlobalSettings.ReturnPathRouteArray" />
   </message>
   
   <message name="removeApplianceReturnPathRoutesResponse"></message>
   
   <message name="removeApplianceReturnPathRoutesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="zeusns:GlobalSettings.ReturnPathRouteArray" />
   </message>
   
   <message name="removeApplianceReturnPathRoutesByLocationResponse"></message>
   
   <message name="removeFlipperFrontendCheckAddressesRequest">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="removeFlipperFrontendCheckAddressesResponse"></message>
   
   <message name="removeFlipperFrontendCheckAddressesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="removeFlipperFrontendCheckAddressesByLocationResponse"></message>
   
   <message name="setASPSessionCacheSizeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setASPSessionCacheSizeResponse"></message>
   
   <message name="setASPSessionCacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setASPSessionCacheSizeByLocationResponse"></message>
   
   <message name="setAcceptingDelayRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setAcceptingDelayResponse"></message>
   
   <message name="setAcceptingDelayByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setAcceptingDelayByLocationResponse"></message>
   
   <message name="setAdminAllowRehandshakeRequest">
      <part name="value" type="zeusns:GlobalSettings.AdminAllowRehandshake" />
   </message>
   
   <message name="setAdminAllowRehandshakeResponse"></message>
   
   <message name="setAdminDiffieHellmanKeyLengthRequest">
      <part name="value" type="zeusns:GlobalSettings.AdminDiffieHellmanKeyLength" />
   </message>
   
   <message name="setAdminDiffieHellmanKeyLengthResponse"></message>
   
   <message name="setAdminInsertExtraFragmentRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setAdminInsertExtraFragmentResponse"></message>
   
   <message name="setAdminMinRehandshakeIntervalRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setAdminMinRehandshakeIntervalResponse"></message>
   
   <message name="setAdminSSLCiphersRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setAdminSSLCiphersResponse"></message>
   
   <message name="setAdminSSLMaxHandshakeMessageSizeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setAdminSSLMaxHandshakeMessageSizeResponse"></message>
   
   <message name="setAdminSSLPreventTimingSideChannelsRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setAdminSSLPreventTimingSideChannelsResponse"></message>
   
   <message name="setAdminSSLSupportTLS11Request">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setAdminSSLSupportTLS11Response"></message>
   
   <message name="setAdminSupportSSL2Request">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setAdminSupportSSL2Response"></message>
   
   <message name="setAdminSupportSSL3Request">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setAdminSupportSSL3Response"></message>
   
   <message name="setAdminSupportTLS1Request">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setAdminSupportTLS1Response"></message>
   
   <message name="setAlertEmailIntervalRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setAlertEmailIntervalResponse"></message>
   
   <message name="setAlertEmailIntervalByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setAlertEmailIntervalByLocationResponse"></message>
   
   <message name="setAlertEmailMaxAttemptsRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setAlertEmailMaxAttemptsResponse"></message>
   
   <message name="setAlertEmailMaxAttemptsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setAlertEmailMaxAttemptsByLocationResponse"></message>
   
   <message name="setAllowConsecutiveCharsRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setAllowConsecutiveCharsResponse"></message>
   
   <message name="setApplianceReturnPathRoutesRequest">
      <part name="value" type="zeusns:GlobalSettings.ReturnPathRouteArray" />
   </message>
   
   <message name="setApplianceReturnPathRoutesResponse"></message>
   
   <message name="setApplianceReturnPathRoutesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="zeusns:GlobalSettings.ReturnPathRouteArray" />
   </message>
   
   <message name="setApplianceReturnPathRoutesByLocationResponse"></message>
   
   <message name="setApplianceReturnPathRoutingEnabledRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setApplianceReturnPathRoutingEnabledResponse"></message>
   
   <message name="setApplianceReturnPathRoutingEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setApplianceReturnPathRoutingEnabledByLocationResponse"></message>
   
   <message name="setAptimizerMaxOriginalContentBufferSizeRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setAptimizerMaxOriginalContentBufferSizeResponse"></message>
   
   <message name="setAptimizerWatchdogIntervalRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setAptimizerWatchdogIntervalResponse"></message>
   
   <message name="setAptimizerWatchdogLimitRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setAptimizerWatchdogLimitResponse"></message>
   
   <message name="setAutoscalerVerboseRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setAutoscalerVerboseResponse"></message>
   
   <message name="setAutoscalerVerboseByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setAutoscalerVerboseByLocationResponse"></message>
   
   <message name="setBackendKeepaliveTimeoutRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setBackendKeepaliveTimeoutResponse"></message>
   
   <message name="setBackendKeepaliveTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setBackendKeepaliveTimeoutByLocationResponse"></message>
   
   <message name="setBandwidthSharingRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setBandwidthSharingResponse"></message>
   
   <message name="setBannerAcceptRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setBannerAcceptResponse"></message>
   
   <message name="setBootloaderPasswordRequest">
      <part name="password" type="xsd:string" />
   </message>
   
   <message name="setBootloaderPasswordResponse"></message>
   
   <message name="setChunkSizeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setChunkSizeResponse"></message>
   
   <message name="setChunkSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setChunkSizeByLocationResponse"></message>
   
   <message name="setClientFirstOptRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setClientFirstOptResponse"></message>
   
   <message name="setClientFirstOptByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setClientFirstOptByLocationResponse"></message>
   
   <message name="setControlAllowHostsRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setControlAllowHostsResponse"></message>
   
   <message name="setControlAllowHostsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setControlAllowHostsByLocationResponse"></message>
   
   <message name="setControlCanUpdateDefaultRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setControlCanUpdateDefaultResponse"></message>
   
   <message name="setDNSCacheExpiryTimeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setDNSCacheExpiryTimeResponse"></message>
   
   <message name="setDNSCacheExpiryTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setDNSCacheExpiryTimeByLocationResponse"></message>
   
   <message name="setDNSCacheMaxTTLRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setDNSCacheMaxTTLResponse"></message>
   
   <message name="setDNSCacheMaxTTLByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setDNSCacheMaxTTLByLocationResponse"></message>
   
   <message name="setDNSCacheMinTTLRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setDNSCacheMinTTLResponse"></message>
   
   <message name="setDNSCacheMinTTLByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setDNSCacheMinTTLByLocationResponse"></message>
   
   <message name="setDNSCacheNegativeExpiryTimeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setDNSCacheNegativeExpiryTimeResponse"></message>
   
   <message name="setDNSCacheNegativeExpiryTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setDNSCacheNegativeExpiryTimeByLocationResponse"></message>
   
   <message name="setDNSCacheSizeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setDNSCacheSizeResponse"></message>
   
   <message name="setDNSCacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setDNSCacheSizeByLocationResponse"></message>
   
   <message name="setDNSTimeoutRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setDNSTimeoutResponse"></message>
   
   <message name="setDNSTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setDNSTimeoutByLocationResponse"></message>
   
   <message name="setDeadTimeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setDeadTimeResponse"></message>
   
   <message name="setEC2AccessKeyIDRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setEC2AccessKeyIDResponse"></message>
   
   <message name="setEC2AccessKeyIDByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setEC2AccessKeyIDByLocationResponse"></message>
   
   <message name="setEC2SecretAccessKeyRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setEC2SecretAccessKeyResponse"></message>
   
   <message name="setEC2SecretAccessKeyByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setEC2SecretAccessKeyByLocationResponse"></message>
   
   <message name="setErrorLevelRequest">
      <part name="value" type="zeusns:GlobalSettings.ErrorLevel" />
   </message>
   
   <message name="setErrorLevelResponse"></message>
   
   <message name="setErrorLevelByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="zeusns:GlobalSettings.ErrorLevel" />
   </message>
   
   <message name="setErrorLevelByLocationResponse"></message>
   
   <message name="setErrorLogFileRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setErrorLogFileResponse"></message>
   
   <message name="setErrorLogFileByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setErrorLogFileByLocationResponse"></message>
   
   <message name="setFTPDataBindLowRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setFTPDataBindLowResponse"></message>
   
   <message name="setFTPDataBindLowByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setFTPDataBindLowByLocationResponse"></message>
   
   <message name="setFipsEnabledRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setFipsEnabledResponse"></message>
   
   <message name="setFlipperArpCountRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setFlipperArpCountResponse"></message>
   
   <message name="setFlipperArpCountByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setFlipperArpCountByLocationResponse"></message>
   
   <message name="setFlipperAutofailbackRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setFlipperAutofailbackResponse"></message>
   
   <message name="setFlipperAutofailbackByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setFlipperAutofailbackByLocationResponse"></message>
   
   <message name="setFlipperFrontendCheckAddressesRequest">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setFlipperFrontendCheckAddressesResponse"></message>
   
   <message name="setFlipperFrontendCheckAddressesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setFlipperFrontendCheckAddressesByLocationResponse"></message>
   
   <message name="setFlipperHeartbeatMethodRequest">
      <part name="value" type="zeusns:GlobalSettings.FlipperHeartbeatMethod" />
   </message>
   
   <message name="setFlipperHeartbeatMethodResponse"></message>
   
   <message name="setFlipperHeartbeatMethodByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="zeusns:GlobalSettings.FlipperHeartbeatMethod" />
   </message>
   
   <message name="setFlipperHeartbeatMethodByLocationResponse"></message>
   
   <message name="setFlipperMonitorIntervalRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setFlipperMonitorIntervalResponse"></message>
   
   <message name="setFlipperMonitorIntervalByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setFlipperMonitorIntervalByLocationResponse"></message>
   
   <message name="setFlipperMonitorTimeoutRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setFlipperMonitorTimeoutResponse"></message>
   
   <message name="setFlipperMonitorTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setFlipperMonitorTimeoutByLocationResponse"></message>
   
   <message name="setFlipperMulticastAddressRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setFlipperMulticastAddressResponse"></message>
   
   <message name="setFlipperMulticastAddressByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setFlipperMulticastAddressByLocationResponse"></message>
   
   <message name="setFlipperUnicastPortRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setFlipperUnicastPortResponse"></message>
   
   <message name="setFlipperUnicastPortByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setFlipperUnicastPortByLocationResponse"></message>
   
   <message name="setFlipperUseBindipRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setFlipperUseBindipResponse"></message>
   
   <message name="setFlipperUseBindipByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setFlipperUseBindipByLocationResponse"></message>
   
   <message name="setFlipperVerboseRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setFlipperVerboseResponse"></message>
   
   <message name="setFlipperVerboseByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setFlipperVerboseByLocationResponse"></message>
   
   <message name="setGLBLoadChangeLimitRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setGLBLoadChangeLimitResponse"></message>
   
   <message name="setGLBLoadChangeLimitByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setGLBLoadChangeLimitByLocationResponse"></message>
   
   <message name="setGLBVerboseRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setGLBVerboseResponse"></message>
   
   <message name="setGLBVerboseByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setGLBVerboseByLocationResponse"></message>
   
   <message name="setHistoricalTrafficDaysRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setHistoricalTrafficDaysResponse"></message>
   
   <message name="setHistoricalTrafficDaysByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setHistoricalTrafficDaysByLocationResponse"></message>
   
   <message name="setIPSessionCacheSizeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setIPSessionCacheSizeResponse"></message>
   
   <message name="setIPSessionCacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setIPSessionCacheSizeByLocationResponse"></message>
   
   <message name="setIdleConnectionTimeoutRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setIdleConnectionTimeoutResponse"></message>
   
   <message name="setIdleConnectionTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setIdleConnectionTimeoutByLocationResponse"></message>
   
   <message name="setJ2EESessionCacheSizeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setJ2EESessionCacheSizeResponse"></message>
   
   <message name="setJ2EESessionCacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setJ2EESessionCacheSizeByLocationResponse"></message>
   
   <message name="setJavaClasspathRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setJavaClasspathResponse"></message>
   
   <message name="setJavaClasspathByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setJavaClasspathByLocationResponse"></message>
   
   <message name="setJavaCommandRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setJavaCommandResponse"></message>
   
   <message name="setJavaCommandByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setJavaCommandByLocationResponse"></message>
   
   <message name="setJavaEnabledRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setJavaEnabledResponse"></message>
   
   <message name="setJavaEnabledByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setJavaEnabledByLocationResponse"></message>
   
   <message name="setJavaLibRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setJavaLibResponse"></message>
   
   <message name="setJavaLibByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setJavaLibByLocationResponse"></message>
   
   <message name="setJavaMaxConnsRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setJavaMaxConnsResponse"></message>
   
   <message name="setJavaMaxConnsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setJavaMaxConnsByLocationResponse"></message>
   
   <message name="setJavaSessionAgeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setJavaSessionAgeResponse"></message>
   
   <message name="setJavaSessionAgeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setJavaSessionAgeByLocationResponse"></message>
   
   <message name="setListenQueueSizeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setListenQueueSizeResponse"></message>
   
   <message name="setListenQueueSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setListenQueueSizeByLocationResponse"></message>
   
   <message name="setLogFlushFlushTimeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setLogFlushFlushTimeResponse"></message>
   
   <message name="setLogFlushFlushTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setLogFlushFlushTimeByLocationResponse"></message>
   
   <message name="setLogIntervalRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setLogIntervalResponse"></message>
   
   <message name="setLogIntervalByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setLogIntervalByLocationResponse"></message>
   
   <message name="setLogRateRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setLogRateResponse"></message>
   
   <message name="setLogRateByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setLogRateByLocationResponse"></message>
   
   <message name="setLogReopenTimeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setLogReopenTimeResponse"></message>
   
   <message name="setLogReopenTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setLogReopenTimeByLocationResponse"></message>
   
   <message name="setLoginBannerRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setLoginBannerResponse"></message>
   
   <message name="setLoginDelayRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setLoginDelayResponse"></message>
   
   <message name="setMaxAcceptingRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setMaxAcceptingResponse"></message>
   
   <message name="setMaxAcceptingByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setMaxAcceptingByLocationResponse"></message>
   
   <message name="setMaxIdleConnectionsRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setMaxIdleConnectionsResponse"></message>
   
   <message name="setMaxIdleConnectionsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setMaxIdleConnectionsByLocationResponse"></message>
   
   <message name="setMaxKeepalivesRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setMaxKeepalivesResponse"></message>
   
   <message name="setMaxKeepalivesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setMaxKeepalivesByLocationResponse"></message>
   
   <message name="setMaxLoginAttemptsRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setMaxLoginAttemptsResponse"></message>
   
   <message name="setMaxLoginExternalRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setMaxLoginExternalResponse"></message>
   
   <message name="setMaxLoginSuspensionTimeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setMaxLoginSuspensionTimeResponse"></message>
   
   <message name="setMaxRetriesRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setMaxRetriesResponse"></message>
   
   <message name="setMaximumFDCountRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setMaximumFDCountResponse"></message>
   
   <message name="setMaximumFDCountByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setMaximumFDCountByLocationResponse"></message>
   
   <message name="setMinAlphaCharsRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setMinAlphaCharsResponse"></message>
   
   <message name="setMinNumericCharsRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setMinNumericCharsResponse"></message>
   
   <message name="setMinPasswordLengthRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setMinPasswordLengthResponse"></message>
   
   <message name="setMinSpecialCharsRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setMinSpecialCharsResponse"></message>
   
   <message name="setMinUppercaseCharsRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setMinUppercaseCharsResponse"></message>
   
   <message name="setMonitorNumNodesRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setMonitorNumNodesResponse"></message>
   
   <message name="setMonitorNumNodesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setMonitorNumNodesByLocationResponse"></message>
   
   <message name="setMultipleAcceptRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setMultipleAcceptResponse"></message>
   
   <message name="setMultipleAcceptByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setMultipleAcceptByLocationResponse"></message>
   
   <message name="setNodeConnectionAttemptsRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setNodeConnectionAttemptsResponse"></message>
   
   <message name="setNodeFailTimeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setNodeFailTimeResponse"></message>
   
   <message name="setOCSPCacheSizeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setOCSPCacheSizeResponse"></message>
   
   <message name="setOCSPCacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setOCSPCacheSizeByLocationResponse"></message>
   
   <message name="setPasswordChangesPerDayRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setPasswordChangesPerDayResponse"></message>
   
   <message name="setPasswordReuseAfterRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setPasswordReuseAfterResponse"></message>
   
   <message name="setPostLoginBannerRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setPostLoginBannerResponse"></message>
   
   <message name="setProtectionConncountSizeRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setProtectionConncountSizeResponse"></message>
   
   <message name="setProtectionConncountSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setProtectionConncountSizeByLocationResponse"></message>
   
   <message name="setRESTAuthTimeoutRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setRESTAuthTimeoutResponse"></message>
   
   <message name="setRESTEnabledRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setRESTEnabledResponse"></message>
   
   <message name="setRESTMaxHTTPHeaderLengthRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setRESTMaxHTTPHeaderLengthResponse"></message>
   
   <message name="setRESTReplicateAbsoluteTimeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setRESTReplicateAbsoluteTimeResponse"></message>
   
   <message name="setRESTReplicateLullTimeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setRESTReplicateLullTimeResponse"></message>
   
   <message name="setRESTReplicateTimeoutRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setRESTReplicateTimeoutResponse"></message>
   
   <message name="setRateClassLimitRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setRateClassLimitResponse"></message>
   
   <message name="setRateClassLimitByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setRateClassLimitByLocationResponse"></message>
   
   <message name="setRecentConnsRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setRecentConnsResponse"></message>
   
   <message name="setRecentConnsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setRecentConnsByLocationResponse"></message>
   
   <message name="setRecentConnsRetainTimeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setRecentConnsRetainTimeResponse"></message>
   
   <message name="setRecentConnsRetainTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setRecentConnsRetainTimeByLocationResponse"></message>
   
   <message name="setRecentConnsSnapshotSizeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setRecentConnsSnapshotSizeResponse"></message>
   
   <message name="setRecentConnsSnapshotSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setRecentConnsSnapshotSizeByLocationResponse"></message>
   
   <message name="setSLMClassLimitRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSLMClassLimitResponse"></message>
   
   <message name="setSLMClassLimitByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSLMClassLimitByLocationResponse"></message>
   
   <message name="setSNMPUserCountersRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSNMPUserCountersResponse"></message>
   
   <message name="setSNMPUserCountersByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSNMPUserCountersByLocationResponse"></message>
   
   <message name="setSSL3AllowRehandshakeRequest">
      <part name="value" type="zeusns:GlobalSettings.SSL3AllowRehandshake" />
   </message>
   
   <message name="setSSL3AllowRehandshakeResponse"></message>
   
   <message name="setSSL3AllowRehandshakeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="zeusns:GlobalSettings.SSL3AllowRehandshake" />
   </message>
   
   <message name="setSSL3AllowRehandshakeByLocationResponse"></message>
   
   <message name="setSSL3CiphersRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setSSL3CiphersResponse"></message>
   
   <message name="setSSL3CiphersByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setSSL3CiphersByLocationResponse"></message>
   
   <message name="setSSL3DiffieHellmanKeyLengthRequest">
      <part name="value" type="zeusns:GlobalSettings.SSL3DiffieHellmanKeyLength" />
   </message>
   
   <message name="setSSL3DiffieHellmanKeyLengthResponse"></message>
   
   <message name="setSSL3DiffieHellmanKeyLengthByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="zeusns:GlobalSettings.SSL3DiffieHellmanKeyLength" />
   </message>
   
   <message name="setSSL3DiffieHellmanKeyLengthByLocationResponse"></message>
   
   <message name="setSSL3MinRehandshakeIntervalRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSSL3MinRehandshakeIntervalResponse"></message>
   
   <message name="setSSLCRLMemSizeRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setSSLCRLMemSizeResponse"></message>
   
   <message name="setSSLCRLMemSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setSSLCRLMemSizeByLocationResponse"></message>
   
   <message name="setSSLDFailureCountRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSSLDFailureCountResponse"></message>
   
   <message name="setSSLDFailureCountByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSSLDFailureCountByLocationResponse"></message>
   
   <message name="setSSLDPKCS11LibRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setSSLDPKCS11LibResponse"></message>
   
   <message name="setSSLDPKCS11LibByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setSSLDPKCS11LibByLocationResponse"></message>
   
   <message name="setSSLDPKCS11UserPINRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setSSLDPKCS11UserPINResponse"></message>
   
   <message name="setSSLDPKCS11UserPINByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setSSLDPKCS11UserPINByLocationResponse"></message>
   
   <message name="setSSLHardwareAcceleratorRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setSSLHardwareAcceleratorResponse"></message>
   
   <message name="setSSLHardwareAcceleratorByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setSSLHardwareAcceleratorByLocationResponse"></message>
   
   <message name="setSSLHardwareFailureCountRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSSLHardwareFailureCountResponse"></message>
   
   <message name="setSSLHardwareFailureCountByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSSLHardwareFailureCountByLocationResponse"></message>
   
   <message name="setSSLHardwarePKCS11LibRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setSSLHardwarePKCS11LibResponse"></message>
   
   <message name="setSSLHardwarePKCS11LibByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setSSLHardwarePKCS11LibByLocationResponse"></message>
   
   <message name="setSSLHardwarePKCS11SlotLabelRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setSSLHardwarePKCS11SlotLabelResponse"></message>
   
   <message name="setSSLHardwarePKCS11SlotLabelByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setSSLHardwarePKCS11SlotLabelByLocationResponse"></message>
   
   <message name="setSSLHardwarePKCS11SlotTypeRequest">
      <part name="value" type="zeusns:GlobalSettings.SSLHardwarePKCS11SlotType" />
   </message>
   
   <message name="setSSLHardwarePKCS11SlotTypeResponse"></message>
   
   <message name="setSSLHardwarePKCS11SlotTypeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="zeusns:GlobalSettings.SSLHardwarePKCS11SlotType" />
   </message>
   
   <message name="setSSLHardwarePKCS11SlotTypeByLocationResponse"></message>
   
   <message name="setSSLHardwarePKCS11UserPINRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setSSLHardwarePKCS11UserPINResponse"></message>
   
   <message name="setSSLHardwarePKCS11UserPINByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setSSLHardwarePKCS11UserPINByLocationResponse"></message>
   
   <message name="setSSLHardwareTypeRequest">
      <part name="value" type="zeusns:GlobalSettings.SSLHardwareType" />
   </message>
   
   <message name="setSSLHardwareTypeResponse"></message>
   
   <message name="setSSLHardwareTypeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="zeusns:GlobalSettings.SSLHardwareType" />
   </message>
   
   <message name="setSSLHardwareTypeByLocationResponse"></message>
   
   <message name="setSSLInsertExtraFragmentRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setSSLInsertExtraFragmentResponse"></message>
   
   <message name="setSSLInsertExtraFragmentByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setSSLInsertExtraFragmentByLocationResponse"></message>
   
   <message name="setSSLMaxHandshakeMessageSizeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSSLMaxHandshakeMessageSizeResponse"></message>
   
   <message name="setSSLMaxHandshakeMessageSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSSLMaxHandshakeMessageSizeByLocationResponse"></message>
   
   <message name="setSSLOCSPStaplingDefaultRefreshIntervalRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSSLOCSPStaplingDefaultRefreshIntervalResponse"></message>
   
   <message name="setSSLOCSPStaplingDefaultRefreshIntervalByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSSLOCSPStaplingDefaultRefreshIntervalByLocationResponse"></message>
   
   <message name="setSSLOCSPStaplingMemSizeRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setSSLOCSPStaplingMemSizeResponse"></message>
   
   <message name="setSSLOCSPStaplingMemSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setSSLOCSPStaplingMemSizeByLocationResponse"></message>
   
   <message name="setSSLPreventTimingSideChannelsRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setSSLPreventTimingSideChannelsResponse"></message>
   
   <message name="setSSLPreventTimingSideChannelsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setSSLPreventTimingSideChannelsByLocationResponse"></message>
   
   <message name="setSSLSessionCacheSizeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSSLSessionCacheSizeResponse"></message>
   
   <message name="setSSLSessionCacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSSLSessionCacheSizeByLocationResponse"></message>
   
   <message name="setSSLSessionIDCacheExpiryTimeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSSLSessionIDCacheExpiryTimeResponse"></message>
   
   <message name="setSSLSessionIDCacheExpiryTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSSLSessionIDCacheExpiryTimeByLocationResponse"></message>
   
   <message name="setSSLSessionIDCacheSizeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSSLSessionIDCacheSizeResponse"></message>
   
   <message name="setSSLSessionIDCacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSSLSessionIDCacheSizeByLocationResponse"></message>
   
   <message name="setSSLSupportSSL2Request">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setSSLSupportSSL2Response"></message>
   
   <message name="setSSLSupportSSL2ByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setSSLSupportSSL2ByLocationResponse"></message>
   
   <message name="setSSLSupportSSL3Request">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setSSLSupportSSL3Response"></message>
   
   <message name="setSSLSupportSSL3ByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setSSLSupportSSL3ByLocationResponse"></message>
   
   <message name="setSSLSupportTLS1Request">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setSSLSupportTLS1Response"></message>
   
   <message name="setSSLSupportTLS11Request">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setSSLSupportTLS11Response"></message>
   
   <message name="setSSLSupportTLS11ByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setSSLSupportTLS11ByLocationResponse"></message>
   
   <message name="setSSLSupportTLS1ByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setSSLSupportTLS1ByLocationResponse"></message>
   
   <message name="setSharedPoolSizeRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setSharedPoolSizeResponse"></message>
   
   <message name="setSharedPoolSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setSharedPoolSizeByLocationResponse"></message>
   
   <message name="setSoapIdleMinutesRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSoapIdleMinutesResponse"></message>
   
   <message name="setSoapIdleMinutesByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSoapIdleMinutesByLocationResponse"></message>
   
   <message name="setSocketOptimizationsRequest">
      <part name="value" type="zeusns:GlobalSettings.SocketOptimizations" />
   </message>
   
   <message name="setSocketOptimizationsResponse"></message>
   
   <message name="setSocketOptimizationsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="zeusns:GlobalSettings.SocketOptimizations" />
   </message>
   
   <message name="setSocketOptimizationsByLocationResponse"></message>
   
   <message name="setSsldAccelRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setSsldAccelResponse"></message>
   
   <message name="setSsldAccelByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setSsldAccelByLocationResponse"></message>
   
   <message name="setSsldLibraryRequest">
      <part name="value" type="zeusns:GlobalSettings.SsldLibrary" />
   </message>
   
   <message name="setSsldLibraryResponse"></message>
   
   <message name="setSsldLibraryByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="zeusns:GlobalSettings.SsldLibrary" />
   </message>
   
   <message name="setSsldLibraryByLocationResponse"></message>
   
   <message name="setStateSyncTimeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setStateSyncTimeResponse"></message>
   
   <message name="setStateSyncTimeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setStateSyncTimeByLocationResponse"></message>
   
   <message name="setStateSyncTimeoutRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setStateSyncTimeoutResponse"></message>
   
   <message name="setStateSyncTimeoutByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setStateSyncTimeoutByLocationResponse"></message>
   
   <message name="setSystemReadBufferSizeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSystemReadBufferSizeResponse"></message>
   
   <message name="setSystemReadBufferSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSystemReadBufferSizeByLocationResponse"></message>
   
   <message name="setSystemWriteBufferSizeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSystemWriteBufferSizeResponse"></message>
   
   <message name="setSystemWriteBufferSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setSystemWriteBufferSizeByLocationResponse"></message>
   
   <message name="setTrackUnknownUsersRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setTrackUnknownUsersResponse"></message>
   
   <message name="setTrafficIPGroupLimitRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setTrafficIPGroupLimitResponse"></message>
   
   <message name="setTrafficIPGroupLimitByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setTrafficIPGroupLimitByLocationResponse"></message>
   
   <message name="setTrafficScriptMemoryWarningRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setTrafficScriptMemoryWarningResponse"></message>
   
   <message name="setTrafficScriptMemoryWarningByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setTrafficScriptMemoryWarningByLocationResponse"></message>
   
   <message name="setTrafficscriptArrayElementsRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setTrafficscriptArrayElementsResponse"></message>
   
   <message name="setTrafficscriptArrayElementsByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setTrafficscriptArrayElementsByLocationResponse"></message>
   
   <message name="setTrafficscriptDataLocalSizeRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setTrafficscriptDataLocalSizeResponse"></message>
   
   <message name="setTrafficscriptDataLocalSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setTrafficscriptDataLocalSizeByLocationResponse"></message>
   
   <message name="setTrafficscriptDataSizeRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setTrafficscriptDataSizeResponse"></message>
   
   <message name="setTrafficscriptDataSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setTrafficscriptDataSizeByLocationResponse"></message>
   
   <message name="setTrafficscriptMaxInstrRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setTrafficscriptMaxInstrResponse"></message>
   
   <message name="setTrafficscriptMaxInstrByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setTrafficscriptMaxInstrByLocationResponse"></message>
   
   <message name="setTrafficscriptRegexCacheSizeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setTrafficscriptRegexCacheSizeResponse"></message>
   
   <message name="setTrafficscriptRegexCacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setTrafficscriptRegexCacheSizeByLocationResponse"></message>
   
   <message name="setTrafficscriptRegexMatchLimitRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setTrafficscriptRegexMatchLimitResponse"></message>
   
   <message name="setTrafficscriptRegexMatchLimitByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setTrafficscriptRegexMatchLimitByLocationResponse"></message>
   
   <message name="setTrafficscriptRegexMatchWarnPercRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setTrafficscriptRegexMatchWarnPercResponse"></message>
   
   <message name="setTrafficscriptRegexMatchWarnPercByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setTrafficscriptRegexMatchWarnPercByLocationResponse"></message>
   
   <message name="setTrafficscriptVariablePoolUseRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setTrafficscriptVariablePoolUseResponse"></message>
   
   <message name="setTrafficscriptVariablePoolUseByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setTrafficscriptVariablePoolUseByLocationResponse"></message>
   
   <message name="setUipageBannerRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setUipageBannerResponse"></message>
   
   <message name="setUniversalSessionCacheSizeRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setUniversalSessionCacheSizeResponse"></message>
   
   <message name="setUniversalSessionCacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setUniversalSessionCacheSizeByLocationResponse"></message>
   
   <message name="setWebcacheAvgPathLengthRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setWebcacheAvgPathLengthResponse"></message>
   
   <message name="setWebcacheAvgPathLengthByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setWebcacheAvgPathLengthByLocationResponse"></message>
   
   <message name="setWebcacheDiskRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setWebcacheDiskResponse"></message>
   
   <message name="setWebcacheDiskByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setWebcacheDiskByLocationResponse"></message>
   
   <message name="setWebcacheDiskDirRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setWebcacheDiskDirResponse"></message>
   
   <message name="setWebcacheDiskDirByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setWebcacheDiskDirByLocationResponse"></message>
   
   <message name="setWebcacheMaxFileNumRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setWebcacheMaxFileNumResponse"></message>
   
   <message name="setWebcacheMaxFileNumByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setWebcacheMaxFileNumByLocationResponse"></message>
   
   <message name="setWebcacheMaxFileSizeRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setWebcacheMaxFileSizeResponse"></message>
   
   <message name="setWebcacheMaxFileSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setWebcacheMaxFileSizeByLocationResponse"></message>
   
   <message name="setWebcacheMaxPathLengthRequest">
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setWebcacheMaxPathLengthResponse"></message>
   
   <message name="setWebcacheMaxPathLengthByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:unsignedInt" />
   </message>
   
   <message name="setWebcacheMaxPathLengthByLocationResponse"></message>
   
   <message name="setWebcacheNormalizeQueryRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setWebcacheNormalizeQueryResponse"></message>
   
   <message name="setWebcacheNormalizeQueryByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setWebcacheNormalizeQueryByLocationResponse"></message>
   
   <message name="setWebcacheSizeRequest">
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setWebcacheSizeResponse"></message>
   
   <message name="setWebcacheSizeByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:string" />
   </message>
   
   <message name="setWebcacheSizeByLocationResponse"></message>
   
   <message name="setWebcacheVerboseRequest">
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setWebcacheVerboseResponse"></message>
   
   <message name="setWebcacheVerboseByLocationRequest">
      <part name="location" type="xsd:string" />
      <part name="value" type="xsd:boolean" />
   </message>
   
   <message name="setWebcacheVerboseByLocationResponse"></message>
   
   <message name="DeploymentError">
      <part name="parameters" type="zeusns:DeploymentError" />
   </message>
   
   <message name="InvalidInput">
      <part name="parameters" type="zeusns:InvalidInput" />
   </message>
   
   <message name="InvalidOperation">
      <part name="parameters" type="zeusns:InvalidOperation" />
   </message>
   
   <message name="ObjectDoesNotExist">
      <part name="parameters" type="zeusns:ObjectDoesNotExist" />
   </message>
   
   <portType name="GlobalSettingsPort">
      <operation name="addApplianceReturnPathRoutes">
         <documentation>
            Add a set of return path routes (MAC/IP mappings) to the configuration.
         </documentation>
         
         <input message="zeusns:addApplianceReturnPathRoutesRequest"/>
         <output message="zeusns:addApplianceReturnPathRoutesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addApplianceReturnPathRoutesByLocation">
         <documentation>
            Add a set of return path routes (MAC/IP mappings) to the configuration. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:addApplianceReturnPathRoutesByLocationRequest"/>
         <output message="zeusns:addApplianceReturnPathRoutesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="addFlipperFrontendCheckAddresses">
         <documentation>
            Add new IP addresses to the list that should be used to check front-end connectivity
         </documentation>
         
         <input message="zeusns:addFlipperFrontendCheckAddressesRequest"/>
         <output message="zeusns:addFlipperFrontendCheckAddressesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addFlipperFrontendCheckAddressesByLocation">
         <documentation>
            Add new IP addresses to the list that should be used to check front-end connectivity This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:addFlipperFrontendCheckAddressesByLocationRequest"/>
         <output message="zeusns:addFlipperFrontendCheckAddressesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getASPSessionCacheSize">
         <documentation>
            Get the maximum number of entries in the ASP session cache.
         </documentation>
         
         <input message="zeusns:getASPSessionCacheSizeRequest"/>
         <output message="zeusns:getASPSessionCacheSizeResponse"/>
      </operation>
      
      <operation name="getASPSessionCacheSizeByLocation">
         <documentation>
            Get the maximum number of entries in the ASP session cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getASPSessionCacheSizeByLocationRequest"/>
         <output message="zeusns:getASPSessionCacheSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAcceptingDelay">
         <documentation>
            Get how often each traffic manager child process checks whether it should be accepting new connections.
         </documentation>
         
         <input message="zeusns:getAcceptingDelayRequest"/>
         <output message="zeusns:getAcceptingDelayResponse"/>
      </operation>
      
      <operation name="getAcceptingDelayByLocation">
         <documentation>
            Get how often each traffic manager child process checks whether it should be accepting new connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAcceptingDelayByLocationRequest"/>
         <output message="zeusns:getAcceptingDelayByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAdminAllowRehandshake">
         <documentation>
            Get whether SSL / TLS re-handshakes are supported.
         </documentation>
         
         <input message="zeusns:getAdminAllowRehandshakeRequest"/>
         <output message="zeusns:getAdminAllowRehandshakeResponse"/>
      </operation>
      
      <operation name="getAdminDiffieHellmanKeyLength">
         <documentation>
            Get the number of bits to use for Diffie-Hellman keys
         </documentation>
         
         <input message="zeusns:getAdminDiffieHellmanKeyLengthRequest"/>
         <output message="zeusns:getAdminDiffieHellmanKeyLengthResponse"/>
      </operation>
      
      <operation name="getAdminInsertExtraFragment">
         <documentation>
            Get whether admin server SSL3 and TLS1 use one byte fragments
         </documentation>
         
         <input message="zeusns:getAdminInsertExtraFragmentRequest"/>
         <output message="zeusns:getAdminInsertExtraFragmentResponse"/>
      </operation>
      
      <operation name="getAdminMinRehandshakeInterval">
         <documentation>
            Get the minimum time interval (in milliseconds) between handshakes on a single SSL3/TLS connection.
         </documentation>
         
         <input message="zeusns:getAdminMinRehandshakeIntervalRequest"/>
         <output message="zeusns:getAdminMinRehandshakeIntervalResponse"/>
      </operation>
      
      <operation name="getAdminSSLCiphers">
         <documentation>
            Get the list of configured SSL ciphers for admin server and internal connections (available ciphers can be displayed using the command $ZEUSHOME/zxtm/bin/zeus.zxtm -s).
         </documentation>
         
         <input message="zeusns:getAdminSSLCiphersRequest"/>
         <output message="zeusns:getAdminSSLCiphersResponse"/>
      </operation>
      
      <operation name="getAdminSSLMaxHandshakeMessageSize">
         <documentation>
            Get the maximum acceptable size (in bytes) a SSL handshake message is permitted to be for admin and internal connections.
         </documentation>
         
         <input message="zeusns:getAdminSSLMaxHandshakeMessageSizeRequest"/>
         <output message="zeusns:getAdminSSLMaxHandshakeMessageSizeResponse"/>
      </operation>
      
      <operation name="getAdminSSLPreventTimingSideChannels">
         <documentation>
            Get whether SSL3 and TLS used by the admin server and internal connections will take performance degrading steps to prevent exposing timing side-channels.
         </documentation>
         
         <input message="zeusns:getAdminSSLPreventTimingSideChannelsRequest"/>
         <output message="zeusns:getAdminSSLPreventTimingSideChannelsResponse"/>
      </operation>
      
      <operation name="getAdminSSLSupportTLS11">
         <documentation>
            Get whether TLSv1.1 support is enabled for admin server and internal connections.
         </documentation>
         
         <input message="zeusns:getAdminSSLSupportTLS11Request"/>
         <output message="zeusns:getAdminSSLSupportTLS11Response"/>
      </operation>
      
      <operation name="getAdminSupportSSL2">
         <documentation>
            Get whether SSLv2 support is enabled for admin server and internal connections.
         </documentation>
         
         <input message="zeusns:getAdminSupportSSL2Request"/>
         <output message="zeusns:getAdminSupportSSL2Response"/>
      </operation>
      
      <operation name="getAdminSupportSSL3">
         <documentation>
            Get whether SSLv3 support is enabled for admin server and internal connections.
         </documentation>
         
         <input message="zeusns:getAdminSupportSSL3Request"/>
         <output message="zeusns:getAdminSupportSSL3Response"/>
      </operation>
      
      <operation name="getAdminSupportTLS1">
         <documentation>
            Get whether TLSv1 support is enabled for admin server and internal connections.
         </documentation>
         
         <input message="zeusns:getAdminSupportTLS1Request"/>
         <output message="zeusns:getAdminSupportTLS1Response"/>
      </operation>
      
      <operation name="getAlertEmailInterval">
         <documentation>
            Get the length of time between alert emails, in seconds. Several alert messages will be stored up and sent in one email.
         </documentation>
         
         <input message="zeusns:getAlertEmailIntervalRequest"/>
         <output message="zeusns:getAlertEmailIntervalResponse"/>
      </operation>
      
      <operation name="getAlertEmailIntervalByLocation">
         <documentation>
            Get the length of time between alert emails, in seconds. Several alert messages will be stored up and sent in one email. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAlertEmailIntervalByLocationRequest"/>
         <output message="zeusns:getAlertEmailIntervalByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAlertEmailMaxAttempts">
         <documentation>
            Get the number of times to attempt sending an email before giving up.
         </documentation>
         
         <input message="zeusns:getAlertEmailMaxAttemptsRequest"/>
         <output message="zeusns:getAlertEmailMaxAttemptsResponse"/>
      </operation>
      
      <operation name="getAlertEmailMaxAttemptsByLocation">
         <documentation>
            Get the number of times to attempt sending an email before giving up. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAlertEmailMaxAttemptsByLocationRequest"/>
         <output message="zeusns:getAlertEmailMaxAttemptsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAllowConsecutiveChars">
         <documentation>
            Get whether the same character can appear consecutively in passwords.
         </documentation>
         
         <input message="zeusns:getAllowConsecutiveCharsRequest"/>
         <output message="zeusns:getAllowConsecutiveCharsResponse"/>
      </operation>
      
      <operation name="getApplianceReturnPathRoutes">
         <documentation>
            Get the set of return path routes (MAC/IP mappings) in the configuration.
         </documentation>
         
         <input message="zeusns:getApplianceReturnPathRoutesRequest"/>
         <output message="zeusns:getApplianceReturnPathRoutesResponse"/>
      </operation>
      
      <operation name="getApplianceReturnPathRoutesByLocation">
         <documentation>
            Get the set of return path routes (MAC/IP mappings) in the configuration. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getApplianceReturnPathRoutesByLocationRequest"/>
         <output message="zeusns:getApplianceReturnPathRoutesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getApplianceReturnPathRoutingEnabled">
         <documentation>
            Get whether return path routing is enabled
         </documentation>
         
         <input message="zeusns:getApplianceReturnPathRoutingEnabledRequest"/>
         <output message="zeusns:getApplianceReturnPathRoutingEnabledResponse"/>
      </operation>
      
      <operation name="getApplianceReturnPathRoutingEnabledByLocation">
         <documentation>
            Get whether return path routing is enabled This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getApplianceReturnPathRoutingEnabledByLocationRequest"/>
         <output message="zeusns:getApplianceReturnPathRoutingEnabledByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAptimizerMaxOriginalContentBufferSize">
         <documentation>
            Get the maximum size of original content buffer for content sent to Aptimize.
         </documentation>
         
         <input message="zeusns:getAptimizerMaxOriginalContentBufferSizeRequest"/>
         <output message="zeusns:getAptimizerMaxOriginalContentBufferSizeResponse"/>
      </operation>
      
      <operation name="getAptimizerWatchdogInterval">
         <documentation>
            Get How long (in seconds) the Aptimizer watchdog mechanism should keep count of crashes for.
         </documentation>
         
         <input message="zeusns:getAptimizerWatchdogIntervalRequest"/>
         <output message="zeusns:getAptimizerWatchdogIntervalResponse"/>
      </operation>
      
      <operation name="getAptimizerWatchdogLimit">
         <documentation>
            Get the maximum number of times the Aptimizer sub-process will be restarted.
         </documentation>
         
         <input message="zeusns:getAptimizerWatchdogLimitRequest"/>
         <output message="zeusns:getAptimizerWatchdogLimitResponse"/>
      </operation>
      
      <operation name="getAutoscalerVerbose">
         <documentation>
            Get detailed logging of autoscaler status and actions
         </documentation>
         
         <input message="zeusns:getAutoscalerVerboseRequest"/>
         <output message="zeusns:getAutoscalerVerboseResponse"/>
      </operation>
      
      <operation name="getAutoscalerVerboseByLocation">
         <documentation>
            Get detailed logging of autoscaler status and actions This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getAutoscalerVerboseByLocationRequest"/>
         <output message="zeusns:getAutoscalerVerboseByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getBackendKeepaliveTimeout">
         <documentation>
            getBackendKeepaliveTimeout is deprecated, please use getIdleConnectionTimeout instead.
         </documentation>
         
         <input message="zeusns:getBackendKeepaliveTimeoutRequest"/>
         <output message="zeusns:getBackendKeepaliveTimeoutResponse"/>
      </operation>
      
      <operation name="getBackendKeepaliveTimeoutByLocation">
         <documentation>
            getBackendKeepaliveTimeout is deprecated, please use getIdleConnectionTimeout instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getBackendKeepaliveTimeoutByLocationRequest"/>
         <output message="zeusns:getBackendKeepaliveTimeoutByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getBandwidthSharing">
         <documentation>
            This method is now obsolete and is replaced by Catalog.Bandwidth.getSharing.
         </documentation>
         
         <input message="zeusns:getBandwidthSharingRequest"/>
         <output message="zeusns:getBandwidthSharingResponse"/>
      </operation>
      
      <operation name="getBannerAccept">
         <documentation>
            Get whether or not users must explicitly agree to the displayed login_banner text before logging in to the Admin Server.
         </documentation>
         
         <input message="zeusns:getBannerAcceptRequest"/>
         <output message="zeusns:getBannerAcceptResponse"/>
      </operation>
      
      <operation name="getChunkSize">
         <documentation>
            Get the default chunk size for reading and writing data, in bytes.
         </documentation>
         
         <input message="zeusns:getChunkSizeRequest"/>
         <output message="zeusns:getChunkSizeResponse"/>
      </operation>
      
      <operation name="getChunkSizeByLocation">
         <documentation>
            Get the default chunk size for reading and writing data, in bytes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getChunkSizeByLocationRequest"/>
         <output message="zeusns:getChunkSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getClientFirstOpt">
         <documentation>
            Get whether client-first network socket optimisations should be used.
         </documentation>
         
         <input message="zeusns:getClientFirstOptRequest"/>
         <output message="zeusns:getClientFirstOptResponse"/>
      </operation>
      
      <operation name="getClientFirstOptByLocation">
         <documentation>
            Get whether client-first network socket optimisations should be used. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getClientFirstOptByLocationRequest"/>
         <output message="zeusns:getClientFirstOptByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getControlAllowHosts">
         <documentation>
            Get the hosts that are allowed to contact the internal administration port on each traffic manager.
         </documentation>
         
         <input message="zeusns:getControlAllowHostsRequest"/>
         <output message="zeusns:getControlAllowHostsResponse"/>
      </operation>
      
      <operation name="getControlAllowHostsByLocation">
         <documentation>
            Get the hosts that are allowed to contact the internal administration port on each traffic manager. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getControlAllowHostsByLocationRequest"/>
         <output message="zeusns:getControlAllowHostsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getControlCanUpdateDefault">
         <documentation>
            Get the value of the control!canupdate key for new cluster members.
         </documentation>
         
         <input message="zeusns:getControlCanUpdateDefaultRequest"/>
         <output message="zeusns:getControlCanUpdateDefaultResponse"/>
      </operation>
      
      <operation name="getDNSCacheExpiryTime">
         <documentation>
            This method should be replaced by getDNSCacheMaxTTL/getDNSCacheMinTTL.
         </documentation>
         
         <input message="zeusns:getDNSCacheExpiryTimeRequest"/>
         <output message="zeusns:getDNSCacheExpiryTimeResponse"/>
      </operation>
      
      <operation name="getDNSCacheExpiryTimeByLocation">
         <documentation>
            This method should be replaced by getDNSCacheMaxTTL/getDNSCacheMinTTL. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getDNSCacheExpiryTimeByLocationRequest"/>
         <output message="zeusns:getDNSCacheExpiryTimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getDNSCacheMaxTTL">
         <documentation>
            Get the maximum time entries are stored in the DNS cache for, in seconds.
         </documentation>
         
         <input message="zeusns:getDNSCacheMaxTTLRequest"/>
         <output message="zeusns:getDNSCacheMaxTTLResponse"/>
      </operation>
      
      <operation name="getDNSCacheMaxTTLByLocation">
         <documentation>
            Get the maximum time entries are stored in the DNS cache for, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getDNSCacheMaxTTLByLocationRequest"/>
         <output message="zeusns:getDNSCacheMaxTTLByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getDNSCacheMinTTL">
         <documentation>
            Get the minimum time entries are stored in the DNS cache for, in seconds.
         </documentation>
         
         <input message="zeusns:getDNSCacheMinTTLRequest"/>
         <output message="zeusns:getDNSCacheMinTTLResponse"/>
      </operation>
      
      <operation name="getDNSCacheMinTTLByLocation">
         <documentation>
            Get the minimum time entries are stored in the DNS cache for, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getDNSCacheMinTTLByLocationRequest"/>
         <output message="zeusns:getDNSCacheMinTTLByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getDNSCacheNegativeExpiryTime">
         <documentation>
            Get the time failed lookups are stored in the DNS cache for, in seconds.
         </documentation>
         
         <input message="zeusns:getDNSCacheNegativeExpiryTimeRequest"/>
         <output message="zeusns:getDNSCacheNegativeExpiryTimeResponse"/>
      </operation>
      
      <operation name="getDNSCacheNegativeExpiryTimeByLocation">
         <documentation>
            Get the time failed lookups are stored in the DNS cache for, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getDNSCacheNegativeExpiryTimeByLocationRequest"/>
         <output message="zeusns:getDNSCacheNegativeExpiryTimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getDNSCacheSize">
         <documentation>
            Get the maximum number of entries in the DNS cache.
         </documentation>
         
         <input message="zeusns:getDNSCacheSizeRequest"/>
         <output message="zeusns:getDNSCacheSizeResponse"/>
      </operation>
      
      <operation name="getDNSCacheSizeByLocation">
         <documentation>
            Get the maximum number of entries in the DNS cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getDNSCacheSizeByLocationRequest"/>
         <output message="zeusns:getDNSCacheSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getDNSTimeout">
         <documentation>
            Get the timeout for receiving a response from a DNS Server, in seconds.
         </documentation>
         
         <input message="zeusns:getDNSTimeoutRequest"/>
         <output message="zeusns:getDNSTimeoutResponse"/>
      </operation>
      
      <operation name="getDNSTimeoutByLocation">
         <documentation>
            Get the timeout for receiving a response from a DNS Server, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getDNSTimeoutByLocationRequest"/>
         <output message="zeusns:getDNSTimeoutByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getDeadTime">
         <documentation>
            This method is now obsolete and is replaced by Pool.getNodeFailTime.
         </documentation>
         
         <input message="zeusns:getDeadTimeRequest"/>
         <output message="zeusns:getDeadTimeResponse"/>
      </operation>
      
      <operation name="getEC2AccessKeyID">
         <documentation>
            Get the Access Key ID used for interacting with the EC2 API.
         </documentation>
         
         <input message="zeusns:getEC2AccessKeyIDRequest"/>
         <output message="zeusns:getEC2AccessKeyIDResponse"/>
      </operation>
      
      <operation name="getEC2AccessKeyIDByLocation">
         <documentation>
            Get the Access Key ID used for interacting with the EC2 API. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getEC2AccessKeyIDByLocationRequest"/>
         <output message="zeusns:getEC2AccessKeyIDByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getErrorLevel">
         <documentation>
            Get the minimum severity of events that should be logged to disk.
         </documentation>
         
         <input message="zeusns:getErrorLevelRequest"/>
         <output message="zeusns:getErrorLevelResponse"/>
      </operation>
      
      <operation name="getErrorLevelByLocation">
         <documentation>
            Get the minimum severity of events that should be logged to disk. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getErrorLevelByLocationRequest"/>
         <output message="zeusns:getErrorLevelByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getErrorLogFile">
         <documentation>
            Get the filename that errors are logged to.
         </documentation>
         
         <input message="zeusns:getErrorLogFileRequest"/>
         <output message="zeusns:getErrorLogFileResponse"/>
      </operation>
      
      <operation name="getErrorLogFileByLocation">
         <documentation>
            Get the filename that errors are logged to. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getErrorLogFileByLocationRequest"/>
         <output message="zeusns:getErrorLogFileByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFTPDataBindLow">
         <documentation>
            Get whether your traffic manager should permit use of FTP data connection source ports lower than 1024.  If 'No' your traffic manager can completely drop root privileges, if 'Yes' some or all privileges may be retained in order to bind to low ports.
         </documentation>
         
         <input message="zeusns:getFTPDataBindLowRequest"/>
         <output message="zeusns:getFTPDataBindLowResponse"/>
      </operation>
      
      <operation name="getFTPDataBindLowByLocation">
         <documentation>
            Get whether your traffic manager should permit use of FTP data connection source ports lower than 1024.  If 'No' your traffic manager can completely drop root privileges, if 'Yes' some or all privileges may be retained in order to bind to low ports. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getFTPDataBindLowByLocationRequest"/>
         <output message="zeusns:getFTPDataBindLowByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFipsEnabled">
         <documentation>
            Get whether FIPS Mode is enabled.
         </documentation>
         
         <input message="zeusns:getFipsEnabledRequest"/>
         <output message="zeusns:getFipsEnabledResponse"/>
      </operation>
      
      <operation name="getFlipperArpCount">
         <documentation>
            Get the number of ARP packets each traffic manager sends when an IP address is raised.
         </documentation>
         
         <input message="zeusns:getFlipperArpCountRequest"/>
         <output message="zeusns:getFlipperArpCountResponse"/>
      </operation>
      
      <operation name="getFlipperArpCountByLocation">
         <documentation>
            Get the number of ARP packets each traffic manager sends when an IP address is raised. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getFlipperArpCountByLocationRequest"/>
         <output message="zeusns:getFlipperArpCountByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFlipperAutofailback">
         <documentation>
            Get whether Traffic IPs should automatically failback to recovered machines.
         </documentation>
         
         <input message="zeusns:getFlipperAutofailbackRequest"/>
         <output message="zeusns:getFlipperAutofailbackResponse"/>
      </operation>
      
      <operation name="getFlipperAutofailbackByLocation">
         <documentation>
            Get whether Traffic IPs should automatically failback to recovered machines. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getFlipperAutofailbackByLocationRequest"/>
         <output message="zeusns:getFlipperAutofailbackByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFlipperFrontendCheckAddresses">
         <documentation>
            Get the IP addresses that should be used to check front-end connectivity.
         </documentation>
         
         <input message="zeusns:getFlipperFrontendCheckAddressesRequest"/>
         <output message="zeusns:getFlipperFrontendCheckAddressesResponse"/>
      </operation>
      
      <operation name="getFlipperFrontendCheckAddressesByLocation">
         <documentation>
            Get the IP addresses that should be used to check front-end connectivity. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getFlipperFrontendCheckAddressesByLocationRequest"/>
         <output message="zeusns:getFlipperFrontendCheckAddressesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFlipperHeartbeatMethod">
         <documentation>
            Get the method used to exchange cluster heartbeat messages.
         </documentation>
         
         <input message="zeusns:getFlipperHeartbeatMethodRequest"/>
         <output message="zeusns:getFlipperHeartbeatMethodResponse"/>
      </operation>
      
      <operation name="getFlipperHeartbeatMethodByLocation">
         <documentation>
            Get the method used to exchange cluster heartbeat messages. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getFlipperHeartbeatMethodByLocationRequest"/>
         <output message="zeusns:getFlipperHeartbeatMethodByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFlipperMonitorInterval">
         <documentation>
            Get how frequently (in milliseconds) each traffic manager checks and announces its connectivity.
         </documentation>
         
         <input message="zeusns:getFlipperMonitorIntervalRequest"/>
         <output message="zeusns:getFlipperMonitorIntervalResponse"/>
      </operation>
      
      <operation name="getFlipperMonitorIntervalByLocation">
         <documentation>
            Get how frequently (in milliseconds) each traffic manager checks and announces its connectivity. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getFlipperMonitorIntervalByLocationRequest"/>
         <output message="zeusns:getFlipperMonitorIntervalByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFlipperMonitorTimeout">
         <documentation>
            Get how long (in seconds) each traffic manager waits for a response from its connectivity tests or from other traffic managers before registering a failure.
         </documentation>
         
         <input message="zeusns:getFlipperMonitorTimeoutRequest"/>
         <output message="zeusns:getFlipperMonitorTimeoutResponse"/>
      </operation>
      
      <operation name="getFlipperMonitorTimeoutByLocation">
         <documentation>
            Get how long (in seconds) each traffic manager waits for a response from its connectivity tests or from other traffic managers before registering a failure. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getFlipperMonitorTimeoutByLocationRequest"/>
         <output message="zeusns:getFlipperMonitorTimeoutByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFlipperMulticastAddress">
         <documentation>
            Get the multicast address and port used to announce connectivity (e.g. 239.100.1.1:9090).
         </documentation>
         
         <input message="zeusns:getFlipperMulticastAddressRequest"/>
         <output message="zeusns:getFlipperMulticastAddressResponse"/>
      </operation>
      
      <operation name="getFlipperMulticastAddressByLocation">
         <documentation>
            Get the multicast address and port used to announce connectivity (e.g. 239.100.1.1:9090). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getFlipperMulticastAddressByLocationRequest"/>
         <output message="zeusns:getFlipperMulticastAddressByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFlipperUnicastPort">
         <documentation>
            Get the unicast UDP port used to announce connectivity (e.g. 9090)
         </documentation>
         
         <input message="zeusns:getFlipperUnicastPortRequest"/>
         <output message="zeusns:getFlipperUnicastPortResponse"/>
      </operation>
      
      <operation name="getFlipperUnicastPortByLocation">
         <documentation>
            Get the unicast UDP port used to announce connectivity (e.g. 9090) This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getFlipperUnicastPortByLocationRequest"/>
         <output message="zeusns:getFlipperUnicastPortByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFlipperUseBindip">
         <documentation>
            Get whether the heartbeat messages used for fault tolerance are only sent over the management network.
         </documentation>
         
         <input message="zeusns:getFlipperUseBindipRequest"/>
         <output message="zeusns:getFlipperUseBindipResponse"/>
      </operation>
      
      <operation name="getFlipperUseBindipByLocation">
         <documentation>
            Get whether the heartbeat messages used for fault tolerance are only sent over the management network. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getFlipperUseBindipByLocationRequest"/>
         <output message="zeusns:getFlipperUseBindipByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getFlipperVerbose">
         <documentation>
            Get whether the traffic manager should logs all the connectivity tests.
         </documentation>
         
         <input message="zeusns:getFlipperVerboseRequest"/>
         <output message="zeusns:getFlipperVerboseResponse"/>
      </operation>
      
      <operation name="getFlipperVerboseByLocation">
         <documentation>
            Get whether the traffic manager should logs all the connectivity tests. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getFlipperVerboseByLocationRequest"/>
         <output message="zeusns:getFlipperVerboseByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getGLBLoadChangeLimit">
         <documentation>
            Get the maximum change per second to load.
         </documentation>
         
         <input message="zeusns:getGLBLoadChangeLimitRequest"/>
         <output message="zeusns:getGLBLoadChangeLimitResponse"/>
      </operation>
      
      <operation name="getGLBLoadChangeLimitByLocation">
         <documentation>
            Get the maximum change per second to load. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getGLBLoadChangeLimitByLocationRequest"/>
         <output message="zeusns:getGLBLoadChangeLimitByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getGLBVerbose">
         <documentation>
            Get whether GSLB should log all DNS queries
         </documentation>
         
         <input message="zeusns:getGLBVerboseRequest"/>
         <output message="zeusns:getGLBVerboseResponse"/>
      </operation>
      
      <operation name="getGLBVerboseByLocation">
         <documentation>
            Get whether GSLB should log all DNS queries This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getGLBVerboseByLocationRequest"/>
         <output message="zeusns:getGLBVerboseByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getHistoricalTrafficDays">
         <documentation>
            Get the length of time historical traffic information is kept for, in days (0=keep indefinitely).
         </documentation>
         
         <input message="zeusns:getHistoricalTrafficDaysRequest"/>
         <output message="zeusns:getHistoricalTrafficDaysResponse"/>
      </operation>
      
      <operation name="getHistoricalTrafficDaysByLocation">
         <documentation>
            Get the length of time historical traffic information is kept for, in days (0=keep indefinitely). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getHistoricalTrafficDaysByLocationRequest"/>
         <output message="zeusns:getHistoricalTrafficDaysByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getIPSessionCacheSize">
         <documentation>
            Get the maximum number of entries in the IP session cache.
         </documentation>
         
         <input message="zeusns:getIPSessionCacheSizeRequest"/>
         <output message="zeusns:getIPSessionCacheSizeResponse"/>
      </operation>
      
      <operation name="getIPSessionCacheSizeByLocation">
         <documentation>
            Get the maximum number of entries in the IP session cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getIPSessionCacheSizeByLocationRequest"/>
         <output message="zeusns:getIPSessionCacheSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getIdleConnectionTimeout">
         <documentation>
            Get how long unused HTTP keepalive connections should be kept before being discarded, in seconds.
         </documentation>
         
         <input message="zeusns:getIdleConnectionTimeoutRequest"/>
         <output message="zeusns:getIdleConnectionTimeoutResponse"/>
      </operation>
      
      <operation name="getIdleConnectionTimeoutByLocation">
         <documentation>
            Get how long unused HTTP keepalive connections should be kept before being discarded, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getIdleConnectionTimeoutByLocationRequest"/>
         <output message="zeusns:getIdleConnectionTimeoutByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getJ2EESessionCacheSize">
         <documentation>
            Get the maximum number of entries in the J2EE session cache.
         </documentation>
         
         <input message="zeusns:getJ2EESessionCacheSizeRequest"/>
         <output message="zeusns:getJ2EESessionCacheSizeResponse"/>
      </operation>
      
      <operation name="getJ2EESessionCacheSizeByLocation">
         <documentation>
            Get the maximum number of entries in the J2EE session cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getJ2EESessionCacheSizeByLocationRequest"/>
         <output message="zeusns:getJ2EESessionCacheSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getJavaClasspath">
         <documentation>
            Get extra Java CLASSPATH settings required for servlets.
         </documentation>
         
         <input message="zeusns:getJavaClasspathRequest"/>
         <output message="zeusns:getJavaClasspathResponse"/>
      </operation>
      
      <operation name="getJavaClasspathByLocation">
         <documentation>
            Get extra Java CLASSPATH settings required for servlets. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getJavaClasspathByLocationRequest"/>
         <output message="zeusns:getJavaClasspathByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getJavaCommand">
         <documentation>
            Get the command (and arguments) used to start Java.
         </documentation>
         
         <input message="zeusns:getJavaCommandRequest"/>
         <output message="zeusns:getJavaCommandResponse"/>
      </operation>
      
      <operation name="getJavaCommandByLocation">
         <documentation>
            Get the command (and arguments) used to start Java. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getJavaCommandByLocationRequest"/>
         <output message="zeusns:getJavaCommandByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getJavaEnabled">
         <documentation>
            Get whether to enable Java support.
         </documentation>
         
         <input message="zeusns:getJavaEnabledRequest"/>
         <output message="zeusns:getJavaEnabledResponse"/>
      </operation>
      
      <operation name="getJavaEnabledByLocation">
         <documentation>
            Get whether to enable Java support. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getJavaEnabledByLocationRequest"/>
         <output message="zeusns:getJavaEnabledByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getJavaLib">
         <documentation>
            Get the location of the java library directory
         </documentation>
         
         <input message="zeusns:getJavaLibRequest"/>
         <output message="zeusns:getJavaLibResponse"/>
      </operation>
      
      <operation name="getJavaLibByLocation">
         <documentation>
            Get the location of the java library directory This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getJavaLibByLocationRequest"/>
         <output message="zeusns:getJavaLibByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getJavaMaxConns">
         <documentation>
            Get the maximum number of Java threads
         </documentation>
         
         <input message="zeusns:getJavaMaxConnsRequest"/>
         <output message="zeusns:getJavaMaxConnsResponse"/>
      </operation>
      
      <operation name="getJavaMaxConnsByLocation">
         <documentation>
            Get the maximum number of Java threads This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getJavaMaxConnsByLocationRequest"/>
         <output message="zeusns:getJavaMaxConnsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getJavaSessionAge">
         <documentation>
            Get the default maximum age of Java session persistence
         </documentation>
         
         <input message="zeusns:getJavaSessionAgeRequest"/>
         <output message="zeusns:getJavaSessionAgeResponse"/>
      </operation>
      
      <operation name="getJavaSessionAgeByLocation">
         <documentation>
            Get the default maximum age of Java session persistence This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getJavaSessionAgeByLocationRequest"/>
         <output message="zeusns:getJavaSessionAgeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getListenQueueSize">
         <documentation>
            Get the size of the listen queue for managing incoming connections.
         </documentation>
         
         <input message="zeusns:getListenQueueSizeRequest"/>
         <output message="zeusns:getListenQueueSizeResponse"/>
      </operation>
      
      <operation name="getListenQueueSizeByLocation">
         <documentation>
            Get the size of the listen queue for managing incoming connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getListenQueueSizeByLocationRequest"/>
         <output message="zeusns:getListenQueueSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLogFlushFlushTime">
         <documentation>
            Get the length of time to wait before flushing the request log files for each virtual server, in seconds.
         </documentation>
         
         <input message="zeusns:getLogFlushFlushTimeRequest"/>
         <output message="zeusns:getLogFlushFlushTimeResponse"/>
      </operation>
      
      <operation name="getLogFlushFlushTimeByLocation">
         <documentation>
            Get the length of time to wait before flushing the request log files for each virtual server, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getLogFlushFlushTimeByLocationRequest"/>
         <output message="zeusns:getLogFlushFlushTimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLogInterval">
         <documentation>
            Get the length of time between log messages for log intensive features e.g. SLM, in seconds.
         </documentation>
         
         <input message="zeusns:getLogIntervalRequest"/>
         <output message="zeusns:getLogIntervalResponse"/>
      </operation>
      
      <operation name="getLogIntervalByLocation">
         <documentation>
            Get the length of time between log messages for log intensive features e.g. SLM, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getLogIntervalByLocationRequest"/>
         <output message="zeusns:getLogIntervalByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLogRate">
         <documentation>
            Get is the maximum number of connection errors logged per second.
         </documentation>
         
         <input message="zeusns:getLogRateRequest"/>
         <output message="zeusns:getLogRateResponse"/>
      </operation>
      
      <operation name="getLogRateByLocation">
         <documentation>
            Get is the maximum number of connection errors logged per second. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getLogRateByLocationRequest"/>
         <output message="zeusns:getLogRateByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLogReopenTime">
         <documentation>
            Get the length of time to wait before re-opening request log files, to handle log file rotation, in seconds.
         </documentation>
         
         <input message="zeusns:getLogReopenTimeRequest"/>
         <output message="zeusns:getLogReopenTimeResponse"/>
      </operation>
      
      <operation name="getLogReopenTimeByLocation">
         <documentation>
            Get the length of time to wait before re-opening request log files, to handle log file rotation, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getLogReopenTimeByLocationRequest"/>
         <output message="zeusns:getLogReopenTimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLoginBanner">
         <documentation>
            Get the banner text to be shown on the Admin Server login page and before logging in to appliance SSH servers.
         </documentation>
         
         <input message="zeusns:getLoginBannerRequest"/>
         <output message="zeusns:getLoginBannerResponse"/>
      </operation>
      
      <operation name="getLoginDelay">
         <documentation>
            Get the number of seconds before another login attempt can be made after a failed attempt.
         </documentation>
         
         <input message="zeusns:getLoginDelayRequest"/>
         <output message="zeusns:getLoginDelayResponse"/>
      </operation>
      
      <operation name="getMaxAccepting">
         <documentation>
            Get how many traffic manager child processes accept new connections.
         </documentation>
         
         <input message="zeusns:getMaxAcceptingRequest"/>
         <output message="zeusns:getMaxAcceptingResponse"/>
      </operation>
      
      <operation name="getMaxAcceptingByLocation">
         <documentation>
            Get how many traffic manager child processes accept new connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaxAcceptingByLocationRequest"/>
         <output message="zeusns:getMaxAcceptingByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxIdleConnections">
         <documentation>
            Get the maximum number of unused HTTP keepalive connections to all nodes that should maintained for re-use.
         </documentation>
         
         <input message="zeusns:getMaxIdleConnectionsRequest"/>
         <output message="zeusns:getMaxIdleConnectionsResponse"/>
      </operation>
      
      <operation name="getMaxIdleConnectionsByLocation">
         <documentation>
            Get the maximum number of unused HTTP keepalive connections to all nodes that should maintained for re-use. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaxIdleConnectionsByLocationRequest"/>
         <output message="zeusns:getMaxIdleConnectionsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxKeepalives">
         <documentation>
            getMaxKeepalives is deprecated, please use getMaxIdleConnections instead.
         </documentation>
         
         <input message="zeusns:getMaxKeepalivesRequest"/>
         <output message="zeusns:getMaxKeepalivesResponse"/>
      </operation>
      
      <operation name="getMaxKeepalivesByLocation">
         <documentation>
            getMaxKeepalives is deprecated, please use getMaxIdleConnections instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaxKeepalivesByLocationRequest"/>
         <output message="zeusns:getMaxKeepalivesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMaxLoginAttempts">
         <documentation>
            Get the number of sequential failed login attempts that will cause a user account to be suspended.  Setting this to 0 disables this feature.
         </documentation>
         
         <input message="zeusns:getMaxLoginAttemptsRequest"/>
         <output message="zeusns:getMaxLoginAttemptsResponse"/>
      </operation>
      
      <operation name="getMaxLoginExternal">
         <documentation>
            Get whether or not usernames blocked due to the max_login_attempts limit should also be blocked from authentication against external services (such as LDAP and RADIUS).
         </documentation>
         
         <input message="zeusns:getMaxLoginExternalRequest"/>
         <output message="zeusns:getMaxLoginExternalResponse"/>
      </operation>
      
      <operation name="getMaxLoginSuspensionTime">
         <documentation>
            Get number of minutes to suspend users who have exceeded the max_login_attempts limit.
         </documentation>
         
         <input message="zeusns:getMaxLoginSuspensionTimeRequest"/>
         <output message="zeusns:getMaxLoginSuspensionTimeResponse"/>
      </operation>
      
      <operation name="getMaxRetries">
         <documentation>
            This method is now obsolete and is replaced by Pool.getNodeConnectionAttempts.
         </documentation>
         
         <input message="zeusns:getMaxRetriesRequest"/>
         <output message="zeusns:getMaxRetriesResponse"/>
      </operation>
      
      <operation name="getMaximumFDCount">
         <documentation>
            Get the maximum number of file descriptors that your traffic manager will allocate
         </documentation>
         
         <input message="zeusns:getMaximumFDCountRequest"/>
         <output message="zeusns:getMaximumFDCountResponse"/>
      </operation>
      
      <operation name="getMaximumFDCountByLocation">
         <documentation>
            Get the maximum number of file descriptors that your traffic manager will allocate This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMaximumFDCountByLocationRequest"/>
         <output message="zeusns:getMaximumFDCountByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMinAlphaChars">
         <documentation>
            Get the minimum number of alphabetic characters in a password.
         </documentation>
         
         <input message="zeusns:getMinAlphaCharsRequest"/>
         <output message="zeusns:getMinAlphaCharsResponse"/>
      </operation>
      
      <operation name="getMinNumericChars">
         <documentation>
            Get the minimum number of numeric characters in a password.
         </documentation>
         
         <input message="zeusns:getMinNumericCharsRequest"/>
         <output message="zeusns:getMinNumericCharsResponse"/>
      </operation>
      
      <operation name="getMinPasswordLength">
         <documentation>
            Get the minimum number of characters a password must contain.
         </documentation>
         
         <input message="zeusns:getMinPasswordLengthRequest"/>
         <output message="zeusns:getMinPasswordLengthResponse"/>
      </operation>
      
      <operation name="getMinSpecialChars">
         <documentation>
            Get the minimum number of special characters in a password.
         </documentation>
         
         <input message="zeusns:getMinSpecialCharsRequest"/>
         <output message="zeusns:getMinSpecialCharsResponse"/>
      </operation>
      
      <operation name="getMinUppercaseChars">
         <documentation>
            Get the minimum number of uppercase characters in a password.
         </documentation>
         
         <input message="zeusns:getMinUppercaseCharsRequest"/>
         <output message="zeusns:getMinUppercaseCharsResponse"/>
      </operation>
      
      <operation name="getMonitorNumNodes">
         <documentation>
            Get the maximum number of nodes that can be monitored.
         </documentation>
         
         <input message="zeusns:getMonitorNumNodesRequest"/>
         <output message="zeusns:getMonitorNumNodesResponse"/>
      </operation>
      
      <operation name="getMonitorNumNodesByLocation">
         <documentation>
            Get the maximum number of nodes that can be monitored. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMonitorNumNodesByLocationRequest"/>
         <output message="zeusns:getMonitorNumNodesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMultipleAccept">
         <documentation>
            Get whether your traffic manager should try and read multiple new connections each time a new client connects.
         </documentation>
         
         <input message="zeusns:getMultipleAcceptRequest"/>
         <output message="zeusns:getMultipleAcceptResponse"/>
      </operation>
      
      <operation name="getMultipleAcceptByLocation">
         <documentation>
            Get whether your traffic manager should try and read multiple new connections each time a new client connects. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getMultipleAcceptByLocationRequest"/>
         <output message="zeusns:getMultipleAcceptByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNodeConnectionAttempts">
         <documentation>
            This method is now obsolete and is replaced by Pool.getNodeConnectionAttempts.
         </documentation>
         
         <input message="zeusns:getNodeConnectionAttemptsRequest"/>
         <output message="zeusns:getNodeConnectionAttemptsResponse"/>
      </operation>
      
      <operation name="getNodeFailTime">
         <documentation>
            This method is now obsolete and is replaced by Pool.getNodeFailTime.
         </documentation>
         
         <input message="zeusns:getNodeFailTimeRequest"/>
         <output message="zeusns:getNodeFailTimeResponse"/>
      </operation>
      
      <operation name="getOCSPCacheSize">
         <documentation>
            Get the maximum number of cached client certificate OCSP results stored.  This cache is used to speed up OCSP checks against client certificates by caching results.
         </documentation>
         
         <input message="zeusns:getOCSPCacheSizeRequest"/>
         <output message="zeusns:getOCSPCacheSizeResponse"/>
      </operation>
      
      <operation name="getOCSPCacheSizeByLocation">
         <documentation>
            Get the maximum number of cached client certificate OCSP results stored.  This cache is used to speed up OCSP checks against client certificates by caching results. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getOCSPCacheSizeByLocationRequest"/>
         <output message="zeusns:getOCSPCacheSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getPasswordChangesPerDay">
         <documentation>
            Get the maximum number of times a password can be changed every 24 hours.
         </documentation>
         
         <input message="zeusns:getPasswordChangesPerDayRequest"/>
         <output message="zeusns:getPasswordChangesPerDayResponse"/>
      </operation>
      
      <operation name="getPasswordReuseAfter">
         <documentation>
            Get the number of times a password must have been changed before it can be reused.
         </documentation>
         
         <input message="zeusns:getPasswordReuseAfterRequest"/>
         <output message="zeusns:getPasswordReuseAfterResponse"/>
      </operation>
      
      <operation name="getPostLoginBanner">
         <documentation>
            Get the banner text to be displayed on the appliance console after login.
         </documentation>
         
         <input message="zeusns:getPostLoginBannerRequest"/>
         <output message="zeusns:getPostLoginBannerResponse"/>
      </operation>
      
      <operation name="getProtectionConncountSize">
         <documentation>
            Get the amount of shared memory reserved for an inter-process table of combined connection counts used by Service Protection classes (specified as an absolute size, eg 20MB).
         </documentation>
         
         <input message="zeusns:getProtectionConncountSizeRequest"/>
         <output message="zeusns:getProtectionConncountSizeResponse"/>
      </operation>
      
      <operation name="getProtectionConncountSizeByLocation">
         <documentation>
            Get the amount of shared memory reserved for an inter-process table of combined connection counts used by Service Protection classes (specified as an absolute size, eg 20MB). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getProtectionConncountSizeByLocationRequest"/>
         <output message="zeusns:getProtectionConncountSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRESTAuthTimeout">
         <documentation>
            Get REST authentication timeout.
         </documentation>
         
         <input message="zeusns:getRESTAuthTimeoutRequest"/>
         <output message="zeusns:getRESTAuthTimeoutResponse"/>
      </operation>
      
      <operation name="getRESTEnabled">
         <documentation>
            Get whether REST service is enabled.
         </documentation>
         
         <input message="zeusns:getRESTEnabledRequest"/>
         <output message="zeusns:getRESTEnabledResponse"/>
      </operation>
      
      <operation name="getRESTMaxHTTPHeaderLength">
         <documentation>
            Get the maximum allowed length in bytes of a HTTP request's headers.
         </documentation>
         
         <input message="zeusns:getRESTMaxHTTPHeaderLengthRequest"/>
         <output message="zeusns:getRESTMaxHTTPHeaderLengthResponse"/>
      </operation>
      
      <operation name="getRESTReplicateAbsoluteTime">
         <documentation>
            Get Absolute time before configuration replication via REST.
         </documentation>
         
         <input message="zeusns:getRESTReplicateAbsoluteTimeRequest"/>
         <output message="zeusns:getRESTReplicateAbsoluteTimeResponse"/>
      </operation>
      
      <operation name="getRESTReplicateLullTime">
         <documentation>
            Get Lull time for configuration replication via REST.
         </documentation>
         
         <input message="zeusns:getRESTReplicateLullTimeRequest"/>
         <output message="zeusns:getRESTReplicateLullTimeResponse"/>
      </operation>
      
      <operation name="getRESTReplicateTimeout">
         <documentation>
            Get the configuration replication timeout via REST.
         </documentation>
         
         <input message="zeusns:getRESTReplicateTimeoutRequest"/>
         <output message="zeusns:getRESTReplicateTimeoutResponse"/>
      </operation>
      
      <operation name="getRateClassLimit">
         <documentation>
            Get the maximum number of Rate classes allowed.
         </documentation>
         
         <input message="zeusns:getRateClassLimitRequest"/>
         <output message="zeusns:getRateClassLimitResponse"/>
      </operation>
      
      <operation name="getRateClassLimitByLocation">
         <documentation>
            Get the maximum number of Rate classes allowed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getRateClassLimitByLocationRequest"/>
         <output message="zeusns:getRateClassLimitByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRecentConns">
         <documentation>
            Get the details of how many recently closed connections each traffic manager process should save for use with the Connections page.
         </documentation>
         
         <input message="zeusns:getRecentConnsRequest"/>
         <output message="zeusns:getRecentConnsResponse"/>
      </operation>
      
      <operation name="getRecentConnsByLocation">
         <documentation>
            Get the details of how many recently closed connections each traffic manager process should save for use with the Connections page. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getRecentConnsByLocationRequest"/>
         <output message="zeusns:getRecentConnsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRecentConnsRetainTime">
         <documentation>
            Get for how long a snapshot should be retained on the Connections page.
         </documentation>
         
         <input message="zeusns:getRecentConnsRetainTimeRequest"/>
         <output message="zeusns:getRecentConnsRetainTimeResponse"/>
      </operation>
      
      <operation name="getRecentConnsRetainTimeByLocation">
         <documentation>
            Get for how long a snapshot should be retained on the Connections page. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getRecentConnsRetainTimeByLocationRequest"/>
         <output message="zeusns:getRecentConnsRetainTimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRecentConnsSnapshotSize">
         <documentation>
            Get the maximum number of connections each traffic manager process should show for a snapshot on the Connections page.
         </documentation>
         
         <input message="zeusns:getRecentConnsSnapshotSizeRequest"/>
         <output message="zeusns:getRecentConnsSnapshotSizeResponse"/>
      </operation>
      
      <operation name="getRecentConnsSnapshotSizeByLocation">
         <documentation>
            Get the maximum number of connections each traffic manager process should show for a snapshot on the Connections page. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getRecentConnsSnapshotSizeByLocationRequest"/>
         <output message="zeusns:getRecentConnsSnapshotSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSLMClassLimit">
         <documentation>
            Get the maximum number of SLM classes allowed.
         </documentation>
         
         <input message="zeusns:getSLMClassLimitRequest"/>
         <output message="zeusns:getSLMClassLimitResponse"/>
      </operation>
      
      <operation name="getSLMClassLimitByLocation">
         <documentation>
            Get the maximum number of SLM classes allowed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSLMClassLimitByLocationRequest"/>
         <output message="zeusns:getSLMClassLimitByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSNMPUserCounters">
         <documentation>
            Get the number of user defined SNMP counters (this single parameter dictates the numbers of both 32- and 64-bit user counters - there is always the same number of counters of each type).
         </documentation>
         
         <input message="zeusns:getSNMPUserCountersRequest"/>
         <output message="zeusns:getSNMPUserCountersResponse"/>
      </operation>
      
      <operation name="getSNMPUserCountersByLocation">
         <documentation>
            Get the number of user defined SNMP counters (this single parameter dictates the numbers of both 32- and 64-bit user counters - there is always the same number of counters of each type). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSNMPUserCountersByLocationRequest"/>
         <output message="zeusns:getSNMPUserCountersByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSL3AllowRehandshake">
         <documentation>
            Get whether SSL / TLS re-handshakes are supported.
         </documentation>
         
         <input message="zeusns:getSSL3AllowRehandshakeRequest"/>
         <output message="zeusns:getSSL3AllowRehandshakeResponse"/>
      </operation>
      
      <operation name="getSSL3AllowRehandshakeByLocation">
         <documentation>
            Get whether SSL / TLS re-handshakes are supported. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSL3AllowRehandshakeByLocationRequest"/>
         <output message="zeusns:getSSL3AllowRehandshakeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSL3Ciphers">
         <documentation>
            Get the list of configured SSL ciphers (available ciphers can be displayed using the command $ZEUSHOME/zxtm/bin/zeus.zxtm -s).
         </documentation>
         
         <input message="zeusns:getSSL3CiphersRequest"/>
         <output message="zeusns:getSSL3CiphersResponse"/>
      </operation>
      
      <operation name="getSSL3CiphersByLocation">
         <documentation>
            Get the list of configured SSL ciphers (available ciphers can be displayed using the command $ZEUSHOME/zxtm/bin/zeus.zxtm -s). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSL3CiphersByLocationRequest"/>
         <output message="zeusns:getSSL3CiphersByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSL3DiffieHellmanKeyLength">
         <documentation>
            Get the number of bits to use for Diffie-Hellman keys
         </documentation>
         
         <input message="zeusns:getSSL3DiffieHellmanKeyLengthRequest"/>
         <output message="zeusns:getSSL3DiffieHellmanKeyLengthResponse"/>
      </operation>
      
      <operation name="getSSL3DiffieHellmanKeyLengthByLocation">
         <documentation>
            Get the number of bits to use for Diffie-Hellman keys This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSL3DiffieHellmanKeyLengthByLocationRequest"/>
         <output message="zeusns:getSSL3DiffieHellmanKeyLengthByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSL3MinRehandshakeInterval">
         <documentation>
            Get the minimum time interval (in milliseconds) between handshakes on a single SSL3/TLS connection.
         </documentation>
         
         <input message="zeusns:getSSL3MinRehandshakeIntervalRequest"/>
         <output message="zeusns:getSSL3MinRehandshakeIntervalResponse"/>
      </operation>
      
      <operation name="getSSLCRLMemSize">
         <documentation>
            Get the size of the CRL shared memory.
         </documentation>
         
         <input message="zeusns:getSSLCRLMemSizeRequest"/>
         <output message="zeusns:getSSLCRLMemSizeResponse"/>
      </operation>
      
      <operation name="getSSLCRLMemSizeByLocation">
         <documentation>
            Get the size of the CRL shared memory. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLCRLMemSizeByLocationRequest"/>
         <output message="zeusns:getSSLCRLMemSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLDFailureCount">
         <documentation>
            getSSLDFailureCount is deprecated, please use getSSLHardwareFailureCount instead.
         </documentation>
         
         <input message="zeusns:getSSLDFailureCountRequest"/>
         <output message="zeusns:getSSLDFailureCountResponse"/>
      </operation>
      
      <operation name="getSSLDFailureCountByLocation">
         <documentation>
            getSSLDFailureCount is deprecated, please use getSSLHardwareFailureCount instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLDFailureCountByLocationRequest"/>
         <output message="zeusns:getSSLDFailureCountByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLDPKCS11Lib">
         <documentation>
            getSSLDPKCS11Lib is deprecated, please use getSSLHardwarePKCS11Lib instead.
         </documentation>
         
         <input message="zeusns:getSSLDPKCS11LibRequest"/>
         <output message="zeusns:getSSLDPKCS11LibResponse"/>
      </operation>
      
      <operation name="getSSLDPKCS11LibByLocation">
         <documentation>
            getSSLDPKCS11Lib is deprecated, please use getSSLHardwarePKCS11Lib instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLDPKCS11LibByLocationRequest"/>
         <output message="zeusns:getSSLDPKCS11LibByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLHardwareAccelerator">
         <documentation>
            Get whether your traffic manager should always attempt to use SSL hardware.
         </documentation>
         
         <input message="zeusns:getSSLHardwareAcceleratorRequest"/>
         <output message="zeusns:getSSLHardwareAcceleratorResponse"/>
      </operation>
      
      <operation name="getSSLHardwareAcceleratorByLocation">
         <documentation>
            Get whether your traffic manager should always attempt to use SSL hardware. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLHardwareAcceleratorByLocationRequest"/>
         <output message="zeusns:getSSLHardwareAcceleratorByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLHardwareFailureCount">
         <documentation>
            Get the number of consecutive failures from the SSL hardware that will be tolerated before your traffic manager tries to log in again.
         </documentation>
         
         <input message="zeusns:getSSLHardwareFailureCountRequest"/>
         <output message="zeusns:getSSLHardwareFailureCountResponse"/>
      </operation>
      
      <operation name="getSSLHardwareFailureCountByLocation">
         <documentation>
            Get the number of consecutive failures from the SSL hardware that will be tolerated before your traffic manager tries to log in again. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLHardwareFailureCountByLocationRequest"/>
         <output message="zeusns:getSSLHardwareFailureCountByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLHardwarePKCS11Lib">
         <documentation>
            Get the location of the PKCS#11 library supplied by your hardware vendor.
         </documentation>
         
         <input message="zeusns:getSSLHardwarePKCS11LibRequest"/>
         <output message="zeusns:getSSLHardwarePKCS11LibResponse"/>
      </operation>
      
      <operation name="getSSLHardwarePKCS11LibByLocation">
         <documentation>
            Get the location of the PKCS#11 library supplied by your hardware vendor. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLHardwarePKCS11LibByLocationRequest"/>
         <output message="zeusns:getSSLHardwarePKCS11LibByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLHardwarePKCS11SlotLabel">
         <documentation>
            Get the label of the SSL hardware slot to use.
         </documentation>
         
         <input message="zeusns:getSSLHardwarePKCS11SlotLabelRequest"/>
         <output message="zeusns:getSSLHardwarePKCS11SlotLabelResponse"/>
      </operation>
      
      <operation name="getSSLHardwarePKCS11SlotLabelByLocation">
         <documentation>
            Get the label of the SSL hardware slot to use. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLHardwarePKCS11SlotLabelByLocationRequest"/>
         <output message="zeusns:getSSLHardwarePKCS11SlotLabelByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLHardwarePKCS11SlotType">
         <documentation>
            Get the type of PKCS11 slot to use. Only used for PKCS11.
         </documentation>
         
         <input message="zeusns:getSSLHardwarePKCS11SlotTypeRequest"/>
         <output message="zeusns:getSSLHardwarePKCS11SlotTypeResponse"/>
      </operation>
      
      <operation name="getSSLHardwarePKCS11SlotTypeByLocation">
         <documentation>
            Get the type of PKCS11 slot to use. Only used for PKCS11. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLHardwarePKCS11SlotTypeByLocationRequest"/>
         <output message="zeusns:getSSLHardwarePKCS11SlotTypeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLHardwareType">
         <documentation>
            Get the device driver library name.
         </documentation>
         
         <input message="zeusns:getSSLHardwareTypeRequest"/>
         <output message="zeusns:getSSLHardwareTypeResponse"/>
      </operation>
      
      <operation name="getSSLHardwareTypeByLocation">
         <documentation>
            Get the device driver library name. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLHardwareTypeByLocationRequest"/>
         <output message="zeusns:getSSLHardwareTypeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLInsertExtraFragment">
         <documentation>
            Get whether SSL3 and TLS1 use one byte fragments
         </documentation>
         
         <input message="zeusns:getSSLInsertExtraFragmentRequest"/>
         <output message="zeusns:getSSLInsertExtraFragmentResponse"/>
      </operation>
      
      <operation name="getSSLInsertExtraFragmentByLocation">
         <documentation>
            Get whether SSL3 and TLS1 use one byte fragments This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLInsertExtraFragmentByLocationRequest"/>
         <output message="zeusns:getSSLInsertExtraFragmentByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLMaxHandshakeMessageSize">
         <documentation>
            Get the maximum acceptable size (in bytes) a SSL handshake message is permitted to be.
         </documentation>
         
         <input message="zeusns:getSSLMaxHandshakeMessageSizeRequest"/>
         <output message="zeusns:getSSLMaxHandshakeMessageSizeResponse"/>
      </operation>
      
      <operation name="getSSLMaxHandshakeMessageSizeByLocation">
         <documentation>
            Get the maximum acceptable size (in bytes) a SSL handshake message is permitted to be. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLMaxHandshakeMessageSizeByLocationRequest"/>
         <output message="zeusns:getSSLMaxHandshakeMessageSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLOCSPStaplingDefaultRefreshInterval">
         <documentation>
            Get how long to wait before refreshing requests on behalf of the store of certificate status responses used by OCSP stapling, if we don't have an up-to-date OCSP response.
         </documentation>
         
         <input message="zeusns:getSSLOCSPStaplingDefaultRefreshIntervalRequest"/>
         <output message="zeusns:getSSLOCSPStaplingDefaultRefreshIntervalResponse"/>
      </operation>
      
      <operation name="getSSLOCSPStaplingDefaultRefreshIntervalByLocation">
         <documentation>
            Get how long to wait before refreshing requests on behalf of the store of certificate status responses used by OCSP stapling, if we don't have an up-to-date OCSP response. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLOCSPStaplingDefaultRefreshIntervalByLocationRequest"/>
         <output message="zeusns:getSSLOCSPStaplingDefaultRefreshIntervalByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLOCSPStaplingMemSize">
         <documentation>
            Get the size of the OCSP stapling response shared memory.
         </documentation>
         
         <input message="zeusns:getSSLOCSPStaplingMemSizeRequest"/>
         <output message="zeusns:getSSLOCSPStaplingMemSizeResponse"/>
      </operation>
      
      <operation name="getSSLOCSPStaplingMemSizeByLocation">
         <documentation>
            Get the size of the OCSP stapling response shared memory. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLOCSPStaplingMemSizeByLocationRequest"/>
         <output message="zeusns:getSSLOCSPStaplingMemSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLPreventTimingSideChannels">
         <documentation>
            Get whether SSL3 and TLS will take performance degrading steps to prevent exposing timing side-channels.
         </documentation>
         
         <input message="zeusns:getSSLPreventTimingSideChannelsRequest"/>
         <output message="zeusns:getSSLPreventTimingSideChannelsResponse"/>
      </operation>
      
      <operation name="getSSLPreventTimingSideChannelsByLocation">
         <documentation>
            Get whether SSL3 and TLS will take performance degrading steps to prevent exposing timing side-channels. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLPreventTimingSideChannelsByLocationRequest"/>
         <output message="zeusns:getSSLPreventTimingSideChannelsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLSessionCacheSize">
         <documentation>
            Get the maximum number of entries in the SSL session cache. This is used to provide persistence based on SSL session IDs.
         </documentation>
         
         <input message="zeusns:getSSLSessionCacheSizeRequest"/>
         <output message="zeusns:getSSLSessionCacheSizeResponse"/>
      </operation>
      
      <operation name="getSSLSessionCacheSizeByLocation">
         <documentation>
            Get the maximum number of entries in the SSL session cache. This is used to provide persistence based on SSL session IDs. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLSessionCacheSizeByLocationRequest"/>
         <output message="zeusns:getSSLSessionCacheSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLSessionIDCacheExpiryTime">
         <documentation>
            Get the length of time that SSL session IDs are stored, in seconds.
         </documentation>
         
         <input message="zeusns:getSSLSessionIDCacheExpiryTimeRequest"/>
         <output message="zeusns:getSSLSessionIDCacheExpiryTimeResponse"/>
      </operation>
      
      <operation name="getSSLSessionIDCacheExpiryTimeByLocation">
         <documentation>
            Get the length of time that SSL session IDs are stored, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLSessionIDCacheExpiryTimeByLocationRequest"/>
         <output message="zeusns:getSSLSessionIDCacheExpiryTimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLSessionIDCacheSize">
         <documentation>
            Get the number of entries in the SSL session ID cache.
         </documentation>
         
         <input message="zeusns:getSSLSessionIDCacheSizeRequest"/>
         <output message="zeusns:getSSLSessionIDCacheSizeResponse"/>
      </operation>
      
      <operation name="getSSLSessionIDCacheSizeByLocation">
         <documentation>
            Get the number of entries in the SSL session ID cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLSessionIDCacheSizeByLocationRequest"/>
         <output message="zeusns:getSSLSessionIDCacheSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLSupportSSL2">
         <documentation>
            Get whether SSLv2 support is enabled.
         </documentation>
         
         <input message="zeusns:getSSLSupportSSL2Request"/>
         <output message="zeusns:getSSLSupportSSL2Response"/>
      </operation>
      
      <operation name="getSSLSupportSSL2ByLocation">
         <documentation>
            Get whether SSLv2 support is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLSupportSSL2ByLocationRequest"/>
         <output message="zeusns:getSSLSupportSSL2ByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLSupportSSL3">
         <documentation>
            Get whether SSLv3 support is enabled.
         </documentation>
         
         <input message="zeusns:getSSLSupportSSL3Request"/>
         <output message="zeusns:getSSLSupportSSL3Response"/>
      </operation>
      
      <operation name="getSSLSupportSSL3ByLocation">
         <documentation>
            Get whether SSLv3 support is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLSupportSSL3ByLocationRequest"/>
         <output message="zeusns:getSSLSupportSSL3ByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLSupportTLS1">
         <documentation>
            Get whether TLSv1 support is enabled.
         </documentation>
         
         <input message="zeusns:getSSLSupportTLS1Request"/>
         <output message="zeusns:getSSLSupportTLS1Response"/>
      </operation>
      
      <operation name="getSSLSupportTLS11">
         <documentation>
            Get whether TLSv1.1 support is enabled.
         </documentation>
         
         <input message="zeusns:getSSLSupportTLS11Request"/>
         <output message="zeusns:getSSLSupportTLS11Response"/>
      </operation>
      
      <operation name="getSSLSupportTLS11ByLocation">
         <documentation>
            Get whether TLSv1.1 support is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLSupportTLS11ByLocationRequest"/>
         <output message="zeusns:getSSLSupportTLS11ByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSSLSupportTLS1ByLocation">
         <documentation>
            Get whether TLSv1 support is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSSLSupportTLS1ByLocationRequest"/>
         <output message="zeusns:getSSLSupportTLS1ByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSharedPoolSize">
         <documentation>
            Get is the size of shared memory pool to be used for shared storage across worker processes.
         </documentation>
         
         <input message="zeusns:getSharedPoolSizeRequest"/>
         <output message="zeusns:getSharedPoolSizeResponse"/>
      </operation>
      
      <operation name="getSharedPoolSizeByLocation">
         <documentation>
            Get is the size of shared memory pool to be used for shared storage across worker processes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSharedPoolSizeByLocationRequest"/>
         <output message="zeusns:getSharedPoolSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSoapIdleMinutes">
         <documentation>
            Get the number of minutes the SOAP server remain idle before exiting
         </documentation>
         
         <input message="zeusns:getSoapIdleMinutesRequest"/>
         <output message="zeusns:getSoapIdleMinutesResponse"/>
      </operation>
      
      <operation name="getSoapIdleMinutesByLocation">
         <documentation>
            Get the number of minutes the SOAP server remain idle before exiting This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSoapIdleMinutesByLocationRequest"/>
         <output message="zeusns:getSoapIdleMinutesByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSocketOptimizations">
         <documentation>
            Get whether potential network socket optimisations should be used.
         </documentation>
         
         <input message="zeusns:getSocketOptimizationsRequest"/>
         <output message="zeusns:getSocketOptimizationsResponse"/>
      </operation>
      
      <operation name="getSocketOptimizationsByLocation">
         <documentation>
            Get whether potential network socket optimisations should be used. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSocketOptimizationsByLocationRequest"/>
         <output message="zeusns:getSocketOptimizationsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSsldAccel">
         <documentation>
            getSsldAccel is deprecated, please use getSSLHardwareAccelerator instead.
         </documentation>
         
         <input message="zeusns:getSsldAccelRequest"/>
         <output message="zeusns:getSsldAccelResponse"/>
      </operation>
      
      <operation name="getSsldAccelByLocation">
         <documentation>
            getSsldAccel is deprecated, please use getSSLHardwareAccelerator instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSsldAccelByLocationRequest"/>
         <output message="zeusns:getSsldAccelByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSsldLibrary">
         <documentation>
            getSsldLibrary is deprecated, please use getSSLHardwareType instead.
         </documentation>
         
         <input message="zeusns:getSsldLibraryRequest"/>
         <output message="zeusns:getSsldLibraryResponse"/>
      </operation>
      
      <operation name="getSsldLibraryByLocation">
         <documentation>
            getSsldLibrary is deprecated, please use getSSLHardwareType instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSsldLibraryByLocationRequest"/>
         <output message="zeusns:getSsldLibraryByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getStateSyncTime">
         <documentation>
            Get how often the cache state is propagated to other traffic managers in the cluster, in seconds.
         </documentation>
         
         <input message="zeusns:getStateSyncTimeRequest"/>
         <output message="zeusns:getStateSyncTimeResponse"/>
      </operation>
      
      <operation name="getStateSyncTimeByLocation">
         <documentation>
            Get how often the cache state is propagated to other traffic managers in the cluster, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getStateSyncTimeByLocationRequest"/>
         <output message="zeusns:getStateSyncTimeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getStateSyncTimeout">
         <documentation>
            Get the timeout for state propagation between cluster members, in seconds
         </documentation>
         
         <input message="zeusns:getStateSyncTimeoutRequest"/>
         <output message="zeusns:getStateSyncTimeoutResponse"/>
      </operation>
      
      <operation name="getStateSyncTimeoutByLocation">
         <documentation>
            Get the timeout for state propagation between cluster members, in seconds This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getStateSyncTimeoutByLocationRequest"/>
         <output message="zeusns:getStateSyncTimeoutByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSystemReadBufferSize">
         <documentation>
            Get the size of the operating system's read buffer, in bytes (0 means use the system default).
         </documentation>
         
         <input message="zeusns:getSystemReadBufferSizeRequest"/>
         <output message="zeusns:getSystemReadBufferSizeResponse"/>
      </operation>
      
      <operation name="getSystemReadBufferSizeByLocation">
         <documentation>
            Get the size of the operating system's read buffer, in bytes (0 means use the system default). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSystemReadBufferSizeByLocationRequest"/>
         <output message="zeusns:getSystemReadBufferSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSystemWriteBufferSize">
         <documentation>
            Get the size of the operating system's write buffer, in bytes (0 means use the system default).
         </documentation>
         
         <input message="zeusns:getSystemWriteBufferSizeRequest"/>
         <output message="zeusns:getSystemWriteBufferSizeResponse"/>
      </operation>
      
      <operation name="getSystemWriteBufferSizeByLocation">
         <documentation>
            Get the size of the operating system's write buffer, in bytes (0 means use the system default). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getSystemWriteBufferSizeByLocationRequest"/>
         <output message="zeusns:getSystemWriteBufferSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getTrackUnknownUsers">
         <documentation>
            Get whether to remember past login attempts from usernames that are not known to exist (should be No for an Admin Server accessible from the public Internet).
         </documentation>
         
         <input message="zeusns:getTrackUnknownUsersRequest"/>
         <output message="zeusns:getTrackUnknownUsersResponse"/>
      </operation>
      
      <operation name="getTrafficIPGroupLimit">
         <documentation>
            Get the maximum number of Traffic IP Groups allowed.
         </documentation>
         
         <input message="zeusns:getTrafficIPGroupLimitRequest"/>
         <output message="zeusns:getTrafficIPGroupLimitResponse"/>
      </operation>
      
      <operation name="getTrafficIPGroupLimitByLocation">
         <documentation>
            Get the maximum number of Traffic IP Groups allowed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getTrafficIPGroupLimitByLocationRequest"/>
         <output message="zeusns:getTrafficIPGroupLimitByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getTrafficScriptMemoryWarning">
         <documentation>
            Get the amount of buffered network data a TrafficScript rule can buffer before a warning is logged, in bytes.
         </documentation>
         
         <input message="zeusns:getTrafficScriptMemoryWarningRequest"/>
         <output message="zeusns:getTrafficScriptMemoryWarningResponse"/>
      </operation>
      
      <operation name="getTrafficScriptMemoryWarningByLocation">
         <documentation>
            Get the amount of buffered network data a TrafficScript rule can buffer before a warning is logged, in bytes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getTrafficScriptMemoryWarningByLocationRequest"/>
         <output message="zeusns:getTrafficScriptMemoryWarningByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getTrafficscriptArrayElements">
         <documentation>
            Get the number of array elements that can be stored before additional memory is allocated.
         </documentation>
         
         <input message="zeusns:getTrafficscriptArrayElementsRequest"/>
         <output message="zeusns:getTrafficscriptArrayElementsResponse"/>
      </operation>
      
      <operation name="getTrafficscriptArrayElementsByLocation">
         <documentation>
            Get the number of array elements that can be stored before additional memory is allocated. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getTrafficscriptArrayElementsByLocationRequest"/>
         <output message="zeusns:getTrafficscriptArrayElementsByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getTrafficscriptDataLocalSize">
         <documentation>
            Get the maximum size of the TrafficScript local data pool (specified as a percentage of system RAM, e.g. '5%', or an absolute size, e.g. 200MB)
         </documentation>
         
         <input message="zeusns:getTrafficscriptDataLocalSizeRequest"/>
         <output message="zeusns:getTrafficscriptDataLocalSizeResponse"/>
      </operation>
      
      <operation name="getTrafficscriptDataLocalSizeByLocation">
         <documentation>
            Get the maximum size of the TrafficScript local data pool (specified as a percentage of system RAM, e.g. '5%', or an absolute size, e.g. 200MB) This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getTrafficscriptDataLocalSizeByLocationRequest"/>
         <output message="zeusns:getTrafficscriptDataLocalSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getTrafficscriptDataSize">
         <documentation>
            Get the maximum size of the TrafficScript shared data pool (specified as a percentage of system RAM, e.g. '5%', or an absolute size, e.g. 200MB)
         </documentation>
         
         <input message="zeusns:getTrafficscriptDataSizeRequest"/>
         <output message="zeusns:getTrafficscriptDataSizeResponse"/>
      </operation>
      
      <operation name="getTrafficscriptDataSizeByLocation">
         <documentation>
            Get the maximum size of the TrafficScript shared data pool (specified as a percentage of system RAM, e.g. '5%', or an absolute size, e.g. 200MB) This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getTrafficscriptDataSizeByLocationRequest"/>
         <output message="zeusns:getTrafficscriptDataSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getTrafficscriptMaxInstr">
         <documentation>
            Get the maximum number of instructions a TrafficScript rule will run before being aborted.
         </documentation>
         
         <input message="zeusns:getTrafficscriptMaxInstrRequest"/>
         <output message="zeusns:getTrafficscriptMaxInstrResponse"/>
      </operation>
      
      <operation name="getTrafficscriptMaxInstrByLocation">
         <documentation>
            Get the maximum number of instructions a TrafficScript rule will run before being aborted. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getTrafficscriptMaxInstrByLocationRequest"/>
         <output message="zeusns:getTrafficscriptMaxInstrByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getTrafficscriptRegexCacheSize">
         <documentation>
            Get the number of regular expressions to cache
         </documentation>
         
         <input message="zeusns:getTrafficscriptRegexCacheSizeRequest"/>
         <output message="zeusns:getTrafficscriptRegexCacheSizeResponse"/>
      </operation>
      
      <operation name="getTrafficscriptRegexCacheSizeByLocation">
         <documentation>
            Get the number of regular expressions to cache This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getTrafficscriptRegexCacheSizeByLocationRequest"/>
         <output message="zeusns:getTrafficscriptRegexCacheSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getTrafficscriptRegexMatchLimit">
         <documentation>
            Get the maximum number of ways TrafficScript will attempt to match a regular expression at each position in the subject string, before it aborts the rule and reports a TrafficScript error.
         </documentation>
         
         <input message="zeusns:getTrafficscriptRegexMatchLimitRequest"/>
         <output message="zeusns:getTrafficscriptRegexMatchLimitResponse"/>
      </operation>
      
      <operation name="getTrafficscriptRegexMatchLimitByLocation">
         <documentation>
            Get the maximum number of ways TrafficScript will attempt to match a regular expression at each position in the subject string, before it aborts the rule and reports a TrafficScript error. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getTrafficscriptRegexMatchLimitByLocationRequest"/>
         <output message="zeusns:getTrafficscriptRegexMatchLimitByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getTrafficscriptRegexMatchWarnPerc">
         <documentation>
            Get the percentage of trafficscript!regex_match_limit at which TrafficScript reports a performance warning.
         </documentation>
         
         <input message="zeusns:getTrafficscriptRegexMatchWarnPercRequest"/>
         <output message="zeusns:getTrafficscriptRegexMatchWarnPercResponse"/>
      </operation>
      
      <operation name="getTrafficscriptRegexMatchWarnPercByLocation">
         <documentation>
            Get the percentage of trafficscript!regex_match_limit at which TrafficScript reports a performance warning. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getTrafficscriptRegexMatchWarnPercByLocationRequest"/>
         <output message="zeusns:getTrafficscriptRegexMatchWarnPercByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getTrafficscriptVariablePoolUse">
         <documentation>
            Get whether the 'pool.use' and 'pool.select' TrafficScript functions accept variables as well as literal strings.
         </documentation>
         
         <input message="zeusns:getTrafficscriptVariablePoolUseRequest"/>
         <output message="zeusns:getTrafficscriptVariablePoolUseResponse"/>
      </operation>
      
      <operation name="getTrafficscriptVariablePoolUseByLocation">
         <documentation>
            Get whether the 'pool.use' and 'pool.select' TrafficScript functions accept variables as well as literal strings. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getTrafficscriptVariablePoolUseByLocationRequest"/>
         <output message="zeusns:getTrafficscriptVariablePoolUseByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getUipageBanner">
         <documentation>
            Get the banner text to be displayed on all Admin Server pages.
         </documentation>
         
         <input message="zeusns:getUipageBannerRequest"/>
         <output message="zeusns:getUipageBannerResponse"/>
      </operation>
      
      <operation name="getUniversalSessionCacheSize">
         <documentation>
            Get the maximum number of entries in the universal session cache.
         </documentation>
         
         <input message="zeusns:getUniversalSessionCacheSizeRequest"/>
         <output message="zeusns:getUniversalSessionCacheSizeResponse"/>
      </operation>
      
      <operation name="getUniversalSessionCacheSizeByLocation">
         <documentation>
            Get the maximum number of entries in the universal session cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getUniversalSessionCacheSizeByLocationRequest"/>
         <output message="zeusns:getUniversalSessionCacheSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWebcacheAvgPathLength">
         <documentation>
            Get the estimated average length of the path for resources to be cached
         </documentation>
         
         <input message="zeusns:getWebcacheAvgPathLengthRequest"/>
         <output message="zeusns:getWebcacheAvgPathLengthResponse"/>
      </operation>
      
      <operation name="getWebcacheAvgPathLengthByLocation">
         <documentation>
            Get the estimated average length of the path for resources to be cached This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getWebcacheAvgPathLengthByLocationRequest"/>
         <output message="zeusns:getWebcacheAvgPathLengthByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWebcacheDisk">
         <documentation>
            Get whether the webcache is stored on disk
         </documentation>
         
         <input message="zeusns:getWebcacheDiskRequest"/>
         <output message="zeusns:getWebcacheDiskResponse"/>
      </operation>
      
      <operation name="getWebcacheDiskByLocation">
         <documentation>
            Get whether the webcache is stored on disk This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getWebcacheDiskByLocationRequest"/>
         <output message="zeusns:getWebcacheDiskByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWebcacheDiskDir">
         <documentation>
            Get the disk cache location
         </documentation>
         
         <input message="zeusns:getWebcacheDiskDirRequest"/>
         <output message="zeusns:getWebcacheDiskDirResponse"/>
      </operation>
      
      <operation name="getWebcacheDiskDirByLocation">
         <documentation>
            Get the disk cache location This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getWebcacheDiskDirByLocationRequest"/>
         <output message="zeusns:getWebcacheDiskDirByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWebcacheMaxFileNum">
         <documentation>
            Get the maximum number of files that can be stored in the web cache
         </documentation>
         
         <input message="zeusns:getWebcacheMaxFileNumRequest"/>
         <output message="zeusns:getWebcacheMaxFileNumResponse"/>
      </operation>
      
      <operation name="getWebcacheMaxFileNumByLocation">
         <documentation>
            Get the maximum number of files that can be stored in the web cache This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getWebcacheMaxFileNumByLocationRequest"/>
         <output message="zeusns:getWebcacheMaxFileNumByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWebcacheMaxFileSize">
         <documentation>
            Get the largest size of a cacheable object, relative to the total cache size, e.g. '2%', or as an absolute size in kB (default), MB or GB, e.g. '20MB'.
         </documentation>
         
         <input message="zeusns:getWebcacheMaxFileSizeRequest"/>
         <output message="zeusns:getWebcacheMaxFileSizeResponse"/>
      </operation>
      
      <operation name="getWebcacheMaxFileSizeByLocation">
         <documentation>
            Get the largest size of a cacheable object, relative to the total cache size, e.g. '2%', or as an absolute size in kB (default), MB or GB, e.g. '20MB'. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getWebcacheMaxFileSizeByLocationRequest"/>
         <output message="zeusns:getWebcacheMaxFileSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWebcacheMaxPathLength">
         <documentation>
            Get the maximum length of the path for the resource being cached
         </documentation>
         
         <input message="zeusns:getWebcacheMaxPathLengthRequest"/>
         <output message="zeusns:getWebcacheMaxPathLengthResponse"/>
      </operation>
      
      <operation name="getWebcacheMaxPathLengthByLocation">
         <documentation>
            Get the maximum length of the path for the resource being cached This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getWebcacheMaxPathLengthByLocationRequest"/>
         <output message="zeusns:getWebcacheMaxPathLengthByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWebcacheNormalizeQuery">
         <documentation>
            Get whether the assignment sub-strings in the parameter string are put into alphabetical order.
         </documentation>
         
         <input message="zeusns:getWebcacheNormalizeQueryRequest"/>
         <output message="zeusns:getWebcacheNormalizeQueryResponse"/>
      </operation>
      
      <operation name="getWebcacheNormalizeQueryByLocation">
         <documentation>
            Get whether the assignment sub-strings in the parameter string are put into alphabetical order. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getWebcacheNormalizeQueryByLocationRequest"/>
         <output message="zeusns:getWebcacheNormalizeQueryByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWebcacheSize">
         <documentation>
            Get the maximum size of the HTTP web page cache, (specified as a percentage of system RAM, e.g. '20%', or an absolute size, e.g. 200MB)
         </documentation>
         
         <input message="zeusns:getWebcacheSizeRequest"/>
         <output message="zeusns:getWebcacheSizeResponse"/>
      </operation>
      
      <operation name="getWebcacheSizeByLocation">
         <documentation>
            Get the maximum size of the HTTP web page cache, (specified as a percentage of system RAM, e.g. '20%', or an absolute size, e.g. 200MB) This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getWebcacheSizeByLocationRequest"/>
         <output message="zeusns:getWebcacheSizeByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getWebcacheVerbose">
         <documentation>
            Get whether an X-Cache-Info header to show cacheability should be added.
         </documentation>
         
         <input message="zeusns:getWebcacheVerboseRequest"/>
         <output message="zeusns:getWebcacheVerboseResponse"/>
      </operation>
      
      <operation name="getWebcacheVerboseByLocation">
         <documentation>
            Get whether an X-Cache-Info header to show cacheability should be added. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:getWebcacheVerboseByLocationRequest"/>
         <output message="zeusns:getWebcacheVerboseByLocationResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="removeApplianceReturnPathRoutes">
         <documentation>
            Remove a set of return path routes (MAC/IP mappings) from the configuration.
         </documentation>
         
         <input message="zeusns:removeApplianceReturnPathRoutesRequest"/>
         <output message="zeusns:removeApplianceReturnPathRoutesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeApplianceReturnPathRoutesByLocation">
         <documentation>
            Remove a set of return path routes (MAC/IP mappings) from the configuration. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:removeApplianceReturnPathRoutesByLocationRequest"/>
         <output message="zeusns:removeApplianceReturnPathRoutesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="removeFlipperFrontendCheckAddresses">
         <documentation>
            Remove IP addresses from the list that should be used to check front-end connectivity
         </documentation>
         
         <input message="zeusns:removeFlipperFrontendCheckAddressesRequest"/>
         <output message="zeusns:removeFlipperFrontendCheckAddressesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeFlipperFrontendCheckAddressesByLocation">
         <documentation>
            Remove IP addresses from the list that should be used to check front-end connectivity This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:removeFlipperFrontendCheckAddressesByLocationRequest"/>
         <output message="zeusns:removeFlipperFrontendCheckAddressesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setASPSessionCacheSize">
         <documentation>
            Set the maximum number of entries in the ASP session cache.
         </documentation>
         
         <input message="zeusns:setASPSessionCacheSizeRequest"/>
         <output message="zeusns:setASPSessionCacheSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setASPSessionCacheSizeByLocation">
         <documentation>
            Set the maximum number of entries in the ASP session cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setASPSessionCacheSizeByLocationRequest"/>
         <output message="zeusns:setASPSessionCacheSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setAcceptingDelay">
         <documentation>
            Set how often each traffic manager child process checks whether it should be accepting new connections.
         </documentation>
         
         <input message="zeusns:setAcceptingDelayRequest"/>
         <output message="zeusns:setAcceptingDelayResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAcceptingDelayByLocation">
         <documentation>
            Set how often each traffic manager child process checks whether it should be accepting new connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAcceptingDelayByLocationRequest"/>
         <output message="zeusns:setAcceptingDelayByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setAdminAllowRehandshake">
         <documentation>
            Set whether SSL / TLS re-handshakes are supported.
         </documentation>
         
         <input message="zeusns:setAdminAllowRehandshakeRequest"/>
         <output message="zeusns:setAdminAllowRehandshakeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAdminDiffieHellmanKeyLength">
         <documentation>
            Set the number of bits to use for Diffie-Hellman keys
         </documentation>
         
         <input message="zeusns:setAdminDiffieHellmanKeyLengthRequest"/>
         <output message="zeusns:setAdminDiffieHellmanKeyLengthResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAdminInsertExtraFragment">
         <documentation>
            Set whether admin server SSL3 and TLS1 use one byte fragments
         </documentation>
         
         <input message="zeusns:setAdminInsertExtraFragmentRequest"/>
         <output message="zeusns:setAdminInsertExtraFragmentResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAdminMinRehandshakeInterval">
         <documentation>
            Set the minimum time interval (in milliseconds) between handshakes on a single SSL3/TLS connection.
         </documentation>
         
         <input message="zeusns:setAdminMinRehandshakeIntervalRequest"/>
         <output message="zeusns:setAdminMinRehandshakeIntervalResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAdminSSLCiphers">
         <documentation>
            Set the list of configured SSL ciphers for admin server and internal connections (available ciphers can be displayed using the command $ZEUSHOME/zxtm/bin/zeus.zxtm -s).
         </documentation>
         
         <input message="zeusns:setAdminSSLCiphersRequest"/>
         <output message="zeusns:setAdminSSLCiphersResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAdminSSLMaxHandshakeMessageSize">
         <documentation>
            Set the maximum acceptable size (in bytes) a SSL handshake message is permitted to be for admin and internal connections.
         </documentation>
         
         <input message="zeusns:setAdminSSLMaxHandshakeMessageSizeRequest"/>
         <output message="zeusns:setAdminSSLMaxHandshakeMessageSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAdminSSLPreventTimingSideChannels">
         <documentation>
            Set whether SSL3 and TLS used by the admin server and internal connections will take performance degrading steps to prevent exposing timing side-channels.
         </documentation>
         
         <input message="zeusns:setAdminSSLPreventTimingSideChannelsRequest"/>
         <output message="zeusns:setAdminSSLPreventTimingSideChannelsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAdminSSLSupportTLS11">
         <documentation>
            Set whether TLSv1.1 support is enabled for admin server and internal connections.
         </documentation>
         
         <input message="zeusns:setAdminSSLSupportTLS11Request"/>
         <output message="zeusns:setAdminSSLSupportTLS11Response"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAdminSupportSSL2">
         <documentation>
            Set whether SSLv2 support is enabled for admin server and internal connections.
         </documentation>
         
         <input message="zeusns:setAdminSupportSSL2Request"/>
         <output message="zeusns:setAdminSupportSSL2Response"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAdminSupportSSL3">
         <documentation>
            Set whether SSLv3 support is enabled for admin server and internal connections.
         </documentation>
         
         <input message="zeusns:setAdminSupportSSL3Request"/>
         <output message="zeusns:setAdminSupportSSL3Response"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAdminSupportTLS1">
         <documentation>
            Set whether TLSv1 support is enabled for admin server and internal connections.
         </documentation>
         
         <input message="zeusns:setAdminSupportTLS1Request"/>
         <output message="zeusns:setAdminSupportTLS1Response"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAlertEmailInterval">
         <documentation>
            Set the length of time between alert emails, in seconds. Several alert messages will be stored up and sent in one email.
         </documentation>
         
         <input message="zeusns:setAlertEmailIntervalRequest"/>
         <output message="zeusns:setAlertEmailIntervalResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAlertEmailIntervalByLocation">
         <documentation>
            Set the length of time between alert emails, in seconds. Several alert messages will be stored up and sent in one email. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAlertEmailIntervalByLocationRequest"/>
         <output message="zeusns:setAlertEmailIntervalByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setAlertEmailMaxAttempts">
         <documentation>
            Set the number of times to attempt sending an email before giving up.
         </documentation>
         
         <input message="zeusns:setAlertEmailMaxAttemptsRequest"/>
         <output message="zeusns:setAlertEmailMaxAttemptsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAlertEmailMaxAttemptsByLocation">
         <documentation>
            Set the number of times to attempt sending an email before giving up. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAlertEmailMaxAttemptsByLocationRequest"/>
         <output message="zeusns:setAlertEmailMaxAttemptsByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setAllowConsecutiveChars">
         <documentation>
            Set whether the same character can appear consecutively in passwords.
         </documentation>
         
         <input message="zeusns:setAllowConsecutiveCharsRequest"/>
         <output message="zeusns:setAllowConsecutiveCharsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setApplianceReturnPathRoutes">
         <documentation>
            Replace the configuration with the specified set of return path routes (MAC/IP mappings).
         </documentation>
         
         <input message="zeusns:setApplianceReturnPathRoutesRequest"/>
         <output message="zeusns:setApplianceReturnPathRoutesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setApplianceReturnPathRoutesByLocation">
         <documentation>
            Replace the configuration with the specified set of return path routes (MAC/IP mappings). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setApplianceReturnPathRoutesByLocationRequest"/>
         <output message="zeusns:setApplianceReturnPathRoutesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setApplianceReturnPathRoutingEnabled">
         <documentation>
            Set whether return path routing is enabled
         </documentation>
         
         <input message="zeusns:setApplianceReturnPathRoutingEnabledRequest"/>
         <output message="zeusns:setApplianceReturnPathRoutingEnabledResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setApplianceReturnPathRoutingEnabledByLocation">
         <documentation>
            Set whether return path routing is enabled This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setApplianceReturnPathRoutingEnabledByLocationRequest"/>
         <output message="zeusns:setApplianceReturnPathRoutingEnabledByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setAptimizerMaxOriginalContentBufferSize">
         <documentation>
            Set the maximum size of original content buffer for content sent to Aptimize.
         </documentation>
         
         <input message="zeusns:setAptimizerMaxOriginalContentBufferSizeRequest"/>
         <output message="zeusns:setAptimizerMaxOriginalContentBufferSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAptimizerWatchdogInterval">
         <documentation>
            Set How long (in seconds) the Aptimizer watchdog mechanism should keep count of crashes for.
         </documentation>
         
         <input message="zeusns:setAptimizerWatchdogIntervalRequest"/>
         <output message="zeusns:setAptimizerWatchdogIntervalResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAptimizerWatchdogLimit">
         <documentation>
            Set the maximum number of times the Aptimizer sub-process will be restarted.
         </documentation>
         
         <input message="zeusns:setAptimizerWatchdogLimitRequest"/>
         <output message="zeusns:setAptimizerWatchdogLimitResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscalerVerbose">
         <documentation>
            Set detailed logging of autoscaler status and actions
         </documentation>
         
         <input message="zeusns:setAutoscalerVerboseRequest"/>
         <output message="zeusns:setAutoscalerVerboseResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setAutoscalerVerboseByLocation">
         <documentation>
            Set detailed logging of autoscaler status and actions This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setAutoscalerVerboseByLocationRequest"/>
         <output message="zeusns:setAutoscalerVerboseByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setBackendKeepaliveTimeout">
         <documentation>
            setBackendKeepaliveTimeout is deprecated, please use setIdleConnectionTimeout instead.
         </documentation>
         
         <input message="zeusns:setBackendKeepaliveTimeoutRequest"/>
         <output message="zeusns:setBackendKeepaliveTimeoutResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setBackendKeepaliveTimeoutByLocation">
         <documentation>
            setBackendKeepaliveTimeout is deprecated, please use setIdleConnectionTimeout instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setBackendKeepaliveTimeoutByLocationRequest"/>
         <output message="zeusns:setBackendKeepaliveTimeoutByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setBandwidthSharing">
         <documentation>
            This method is now obsolete and is replaced by Catalog.Bandwidth.setSharing.
         </documentation>
         
         <input message="zeusns:setBandwidthSharingRequest"/>
         <output message="zeusns:setBandwidthSharingResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setBannerAccept">
         <documentation>
            Set whether or not users must explicitly agree to the displayed login_banner text before logging in to the Admin Server.
         </documentation>
         
         <input message="zeusns:setBannerAcceptRequest"/>
         <output message="zeusns:setBannerAcceptResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setBootloaderPassword">
         <documentation>
            Set the lists of nodes for each of the named pools.
         </documentation>
         
         <input message="zeusns:setBootloaderPasswordRequest"/>
         <output message="zeusns:setBootloaderPasswordResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setChunkSize">
         <documentation>
            Set the default chunk size for reading and writing data, in bytes.
         </documentation>
         
         <input message="zeusns:setChunkSizeRequest"/>
         <output message="zeusns:setChunkSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setChunkSizeByLocation">
         <documentation>
            Set the default chunk size for reading and writing data, in bytes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setChunkSizeByLocationRequest"/>
         <output message="zeusns:setChunkSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setClientFirstOpt">
         <documentation>
            Set whether client-first network socket optimisations should be used.
         </documentation>
         
         <input message="zeusns:setClientFirstOptRequest"/>
         <output message="zeusns:setClientFirstOptResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setClientFirstOptByLocation">
         <documentation>
            Set whether client-first network socket optimisations should be used. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setClientFirstOptByLocationRequest"/>
         <output message="zeusns:setClientFirstOptByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setControlAllowHosts">
         <documentation>
            Set the hosts that are allowed to contact the internal administration port on each traffic manager.
         </documentation>
         
         <input message="zeusns:setControlAllowHostsRequest"/>
         <output message="zeusns:setControlAllowHostsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setControlAllowHostsByLocation">
         <documentation>
            Set the hosts that are allowed to contact the internal administration port on each traffic manager. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setControlAllowHostsByLocationRequest"/>
         <output message="zeusns:setControlAllowHostsByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setControlCanUpdateDefault">
         <documentation>
            Set the value of the control!canupdate key for new cluster members.
         </documentation>
         
         <input message="zeusns:setControlCanUpdateDefaultRequest"/>
         <output message="zeusns:setControlCanUpdateDefaultResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setDNSCacheExpiryTime">
         <documentation>
            This method should be replaced by setDNSCacheMaxTTL/setDNSCacheMinTTL.
         </documentation>
         
         <input message="zeusns:setDNSCacheExpiryTimeRequest"/>
         <output message="zeusns:setDNSCacheExpiryTimeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setDNSCacheExpiryTimeByLocation">
         <documentation>
            This method should be replaced by setDNSCacheMaxTTL/setDNSCacheMinTTL. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setDNSCacheExpiryTimeByLocationRequest"/>
         <output message="zeusns:setDNSCacheExpiryTimeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setDNSCacheMaxTTL">
         <documentation>
            Set the maximum time entries are stored in the DNS cache for, in seconds.
         </documentation>
         
         <input message="zeusns:setDNSCacheMaxTTLRequest"/>
         <output message="zeusns:setDNSCacheMaxTTLResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setDNSCacheMaxTTLByLocation">
         <documentation>
            Set the maximum time entries are stored in the DNS cache for, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setDNSCacheMaxTTLByLocationRequest"/>
         <output message="zeusns:setDNSCacheMaxTTLByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setDNSCacheMinTTL">
         <documentation>
            Set the minimum time entries are stored in the DNS cache for, in seconds.
         </documentation>
         
         <input message="zeusns:setDNSCacheMinTTLRequest"/>
         <output message="zeusns:setDNSCacheMinTTLResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setDNSCacheMinTTLByLocation">
         <documentation>
            Set the minimum time entries are stored in the DNS cache for, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setDNSCacheMinTTLByLocationRequest"/>
         <output message="zeusns:setDNSCacheMinTTLByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setDNSCacheNegativeExpiryTime">
         <documentation>
            Set the time failed lookups are stored in the DNS cache for, in seconds.
         </documentation>
         
         <input message="zeusns:setDNSCacheNegativeExpiryTimeRequest"/>
         <output message="zeusns:setDNSCacheNegativeExpiryTimeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setDNSCacheNegativeExpiryTimeByLocation">
         <documentation>
            Set the time failed lookups are stored in the DNS cache for, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setDNSCacheNegativeExpiryTimeByLocationRequest"/>
         <output message="zeusns:setDNSCacheNegativeExpiryTimeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setDNSCacheSize">
         <documentation>
            Set the maximum number of entries in the DNS cache.
         </documentation>
         
         <input message="zeusns:setDNSCacheSizeRequest"/>
         <output message="zeusns:setDNSCacheSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setDNSCacheSizeByLocation">
         <documentation>
            Set the maximum number of entries in the DNS cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setDNSCacheSizeByLocationRequest"/>
         <output message="zeusns:setDNSCacheSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setDNSTimeout">
         <documentation>
            Set the timeout for receiving a response from a DNS Server, in seconds.
         </documentation>
         
         <input message="zeusns:setDNSTimeoutRequest"/>
         <output message="zeusns:setDNSTimeoutResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setDNSTimeoutByLocation">
         <documentation>
            Set the timeout for receiving a response from a DNS Server, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setDNSTimeoutByLocationRequest"/>
         <output message="zeusns:setDNSTimeoutByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setDeadTime">
         <documentation>
            This method is now obsolete and is replaced by Pool.setNodeFailTime.
         </documentation>
         
         <input message="zeusns:setDeadTimeRequest"/>
         <output message="zeusns:setDeadTimeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setEC2AccessKeyID">
         <documentation>
            Set the Access Key ID used for interacting with the EC2 API.
         </documentation>
         
         <input message="zeusns:setEC2AccessKeyIDRequest"/>
         <output message="zeusns:setEC2AccessKeyIDResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setEC2AccessKeyIDByLocation">
         <documentation>
            Set the Access Key ID used for interacting with the EC2 API. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setEC2AccessKeyIDByLocationRequest"/>
         <output message="zeusns:setEC2AccessKeyIDByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setEC2SecretAccessKey">
         <documentation>
            Set the Secret Access Key used for interacting with the EC2 API.
         </documentation>
         
         <input message="zeusns:setEC2SecretAccessKeyRequest"/>
         <output message="zeusns:setEC2SecretAccessKeyResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setEC2SecretAccessKeyByLocation">
         <documentation>
            Set the Secret Access Key used for interacting with the EC2 API. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setEC2SecretAccessKeyByLocationRequest"/>
         <output message="zeusns:setEC2SecretAccessKeyByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setErrorLevel">
         <documentation>
            Set the minimum severity of events that should be logged to disk.
         </documentation>
         
         <input message="zeusns:setErrorLevelRequest"/>
         <output message="zeusns:setErrorLevelResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setErrorLevelByLocation">
         <documentation>
            Set the minimum severity of events that should be logged to disk. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setErrorLevelByLocationRequest"/>
         <output message="zeusns:setErrorLevelByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setErrorLogFile">
         <documentation>
            Set the filename that errors are logged to.
         </documentation>
         
         <input message="zeusns:setErrorLogFileRequest"/>
         <output message="zeusns:setErrorLogFileResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setErrorLogFileByLocation">
         <documentation>
            Set the filename that errors are logged to. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setErrorLogFileByLocationRequest"/>
         <output message="zeusns:setErrorLogFileByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setFTPDataBindLow">
         <documentation>
            Set whether your traffic manager should permit use of FTP data connection source ports lower than 1024.  If 'No' your traffic manager can completely drop root privileges, if 'Yes' some or all privileges may be retained in order to bind to low ports.
         </documentation>
         
         <input message="zeusns:setFTPDataBindLowRequest"/>
         <output message="zeusns:setFTPDataBindLowResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFTPDataBindLowByLocation">
         <documentation>
            Set whether your traffic manager should permit use of FTP data connection source ports lower than 1024.  If 'No' your traffic manager can completely drop root privileges, if 'Yes' some or all privileges may be retained in order to bind to low ports. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setFTPDataBindLowByLocationRequest"/>
         <output message="zeusns:setFTPDataBindLowByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setFipsEnabled">
         <documentation>
            Set whether FIPS Mode is enabled.
         </documentation>
         
         <input message="zeusns:setFipsEnabledRequest"/>
         <output message="zeusns:setFipsEnabledResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
      </operation>
      
      <operation name="setFlipperArpCount">
         <documentation>
            Set the number of ARP packets each traffic manager sends when an IP address is raised.
         </documentation>
         
         <input message="zeusns:setFlipperArpCountRequest"/>
         <output message="zeusns:setFlipperArpCountResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFlipperArpCountByLocation">
         <documentation>
            Set the number of ARP packets each traffic manager sends when an IP address is raised. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setFlipperArpCountByLocationRequest"/>
         <output message="zeusns:setFlipperArpCountByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setFlipperAutofailback">
         <documentation>
            Set whether Traffic IPs should automatically failback to recovered machines.
         </documentation>
         
         <input message="zeusns:setFlipperAutofailbackRequest"/>
         <output message="zeusns:setFlipperAutofailbackResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFlipperAutofailbackByLocation">
         <documentation>
            Set whether Traffic IPs should automatically failback to recovered machines. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setFlipperAutofailbackByLocationRequest"/>
         <output message="zeusns:setFlipperAutofailbackByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setFlipperFrontendCheckAddresses">
         <documentation>
            Set the IP addresses that should be used to check front-end connectivity.
         </documentation>
         
         <input message="zeusns:setFlipperFrontendCheckAddressesRequest"/>
         <output message="zeusns:setFlipperFrontendCheckAddressesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFlipperFrontendCheckAddressesByLocation">
         <documentation>
            Set the IP addresses that should be used to check front-end connectivity. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setFlipperFrontendCheckAddressesByLocationRequest"/>
         <output message="zeusns:setFlipperFrontendCheckAddressesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setFlipperHeartbeatMethod">
         <documentation>
            Set the method used to exchange cluster heartbeat messages.
         </documentation>
         
         <input message="zeusns:setFlipperHeartbeatMethodRequest"/>
         <output message="zeusns:setFlipperHeartbeatMethodResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFlipperHeartbeatMethodByLocation">
         <documentation>
            Set the method used to exchange cluster heartbeat messages. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setFlipperHeartbeatMethodByLocationRequest"/>
         <output message="zeusns:setFlipperHeartbeatMethodByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setFlipperMonitorInterval">
         <documentation>
            Set how frequently (in milliseconds) each traffic manager checks and announces its connectivity.
         </documentation>
         
         <input message="zeusns:setFlipperMonitorIntervalRequest"/>
         <output message="zeusns:setFlipperMonitorIntervalResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFlipperMonitorIntervalByLocation">
         <documentation>
            Set how frequently (in milliseconds) each traffic manager checks and announces its connectivity. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setFlipperMonitorIntervalByLocationRequest"/>
         <output message="zeusns:setFlipperMonitorIntervalByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setFlipperMonitorTimeout">
         <documentation>
            Set how long (in seconds) each traffic manager waits for a response from its connectivity tests or from other traffic managers before registering a failure.
         </documentation>
         
         <input message="zeusns:setFlipperMonitorTimeoutRequest"/>
         <output message="zeusns:setFlipperMonitorTimeoutResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFlipperMonitorTimeoutByLocation">
         <documentation>
            Set how long (in seconds) each traffic manager waits for a response from its connectivity tests or from other traffic managers before registering a failure. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setFlipperMonitorTimeoutByLocationRequest"/>
         <output message="zeusns:setFlipperMonitorTimeoutByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setFlipperMulticastAddress">
         <documentation>
            Set the multicast address and port used to announce connectivity (e.g. 239.100.1.1:9090).
         </documentation>
         
         <input message="zeusns:setFlipperMulticastAddressRequest"/>
         <output message="zeusns:setFlipperMulticastAddressResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFlipperMulticastAddressByLocation">
         <documentation>
            Set the multicast address and port used to announce connectivity (e.g. 239.100.1.1:9090). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setFlipperMulticastAddressByLocationRequest"/>
         <output message="zeusns:setFlipperMulticastAddressByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setFlipperUnicastPort">
         <documentation>
            Set the unicast UDP port used to announce connectivity (e.g. 9090)
         </documentation>
         
         <input message="zeusns:setFlipperUnicastPortRequest"/>
         <output message="zeusns:setFlipperUnicastPortResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFlipperUnicastPortByLocation">
         <documentation>
            Set the unicast UDP port used to announce connectivity (e.g. 9090) This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setFlipperUnicastPortByLocationRequest"/>
         <output message="zeusns:setFlipperUnicastPortByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setFlipperUseBindip">
         <documentation>
            Set whether the heartbeat messages used for fault tolerance are only sent over the management network.
         </documentation>
         
         <input message="zeusns:setFlipperUseBindipRequest"/>
         <output message="zeusns:setFlipperUseBindipResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFlipperUseBindipByLocation">
         <documentation>
            Set whether the heartbeat messages used for fault tolerance are only sent over the management network. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setFlipperUseBindipByLocationRequest"/>
         <output message="zeusns:setFlipperUseBindipByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setFlipperVerbose">
         <documentation>
            Set whether the traffic manager should logs all the connectivity tests.
         </documentation>
         
         <input message="zeusns:setFlipperVerboseRequest"/>
         <output message="zeusns:setFlipperVerboseResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setFlipperVerboseByLocation">
         <documentation>
            Set whether the traffic manager should logs all the connectivity tests. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setFlipperVerboseByLocationRequest"/>
         <output message="zeusns:setFlipperVerboseByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setGLBLoadChangeLimit">
         <documentation>
            Set the maximum change per second to load.
         </documentation>
         
         <input message="zeusns:setGLBLoadChangeLimitRequest"/>
         <output message="zeusns:setGLBLoadChangeLimitResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setGLBLoadChangeLimitByLocation">
         <documentation>
            Set the maximum change per second to load. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setGLBLoadChangeLimitByLocationRequest"/>
         <output message="zeusns:setGLBLoadChangeLimitByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setGLBVerbose">
         <documentation>
            Set whether GSLB should log all DNS queries
         </documentation>
         
         <input message="zeusns:setGLBVerboseRequest"/>
         <output message="zeusns:setGLBVerboseResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setGLBVerboseByLocation">
         <documentation>
            Set whether GSLB should log all DNS queries This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setGLBVerboseByLocationRequest"/>
         <output message="zeusns:setGLBVerboseByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setHistoricalTrafficDays">
         <documentation>
            Set the length of time historical traffic information is kept for, in days (0=keep indefinitely).
         </documentation>
         
         <input message="zeusns:setHistoricalTrafficDaysRequest"/>
         <output message="zeusns:setHistoricalTrafficDaysResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setHistoricalTrafficDaysByLocation">
         <documentation>
            Set the length of time historical traffic information is kept for, in days (0=keep indefinitely). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setHistoricalTrafficDaysByLocationRequest"/>
         <output message="zeusns:setHistoricalTrafficDaysByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setIPSessionCacheSize">
         <documentation>
            Set the maximum number of entries in the IP session cache.
         </documentation>
         
         <input message="zeusns:setIPSessionCacheSizeRequest"/>
         <output message="zeusns:setIPSessionCacheSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setIPSessionCacheSizeByLocation">
         <documentation>
            Set the maximum number of entries in the IP session cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setIPSessionCacheSizeByLocationRequest"/>
         <output message="zeusns:setIPSessionCacheSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setIdleConnectionTimeout">
         <documentation>
            Set how long unused HTTP keepalive connections should be kept before being discarded, in seconds.
         </documentation>
         
         <input message="zeusns:setIdleConnectionTimeoutRequest"/>
         <output message="zeusns:setIdleConnectionTimeoutResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setIdleConnectionTimeoutByLocation">
         <documentation>
            Set how long unused HTTP keepalive connections should be kept before being discarded, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setIdleConnectionTimeoutByLocationRequest"/>
         <output message="zeusns:setIdleConnectionTimeoutByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setJ2EESessionCacheSize">
         <documentation>
            Set the maximum number of entries in the J2EE session cache.
         </documentation>
         
         <input message="zeusns:setJ2EESessionCacheSizeRequest"/>
         <output message="zeusns:setJ2EESessionCacheSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setJ2EESessionCacheSizeByLocation">
         <documentation>
            Set the maximum number of entries in the J2EE session cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setJ2EESessionCacheSizeByLocationRequest"/>
         <output message="zeusns:setJ2EESessionCacheSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setJavaClasspath">
         <documentation>
            Set extra Java CLASSPATH settings required for servlets.
         </documentation>
         
         <input message="zeusns:setJavaClasspathRequest"/>
         <output message="zeusns:setJavaClasspathResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setJavaClasspathByLocation">
         <documentation>
            Set extra Java CLASSPATH settings required for servlets. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setJavaClasspathByLocationRequest"/>
         <output message="zeusns:setJavaClasspathByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setJavaCommand">
         <documentation>
            Set the command (and arguments) used to start Java.
         </documentation>
         
         <input message="zeusns:setJavaCommandRequest"/>
         <output message="zeusns:setJavaCommandResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setJavaCommandByLocation">
         <documentation>
            Set the command (and arguments) used to start Java. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setJavaCommandByLocationRequest"/>
         <output message="zeusns:setJavaCommandByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setJavaEnabled">
         <documentation>
            Set whether to enable Java support.
         </documentation>
         
         <input message="zeusns:setJavaEnabledRequest"/>
         <output message="zeusns:setJavaEnabledResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setJavaEnabledByLocation">
         <documentation>
            Set whether to enable Java support. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setJavaEnabledByLocationRequest"/>
         <output message="zeusns:setJavaEnabledByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setJavaLib">
         <documentation>
            Set the location of the java library directory
         </documentation>
         
         <input message="zeusns:setJavaLibRequest"/>
         <output message="zeusns:setJavaLibResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setJavaLibByLocation">
         <documentation>
            Set the location of the java library directory This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setJavaLibByLocationRequest"/>
         <output message="zeusns:setJavaLibByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setJavaMaxConns">
         <documentation>
            Set the maximum number of Java threads
         </documentation>
         
         <input message="zeusns:setJavaMaxConnsRequest"/>
         <output message="zeusns:setJavaMaxConnsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setJavaMaxConnsByLocation">
         <documentation>
            Set the maximum number of Java threads This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setJavaMaxConnsByLocationRequest"/>
         <output message="zeusns:setJavaMaxConnsByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setJavaSessionAge">
         <documentation>
            Set the default maximum age of Java session persistence
         </documentation>
         
         <input message="zeusns:setJavaSessionAgeRequest"/>
         <output message="zeusns:setJavaSessionAgeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setJavaSessionAgeByLocation">
         <documentation>
            Set the default maximum age of Java session persistence This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setJavaSessionAgeByLocationRequest"/>
         <output message="zeusns:setJavaSessionAgeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setListenQueueSize">
         <documentation>
            Set the size of the listen queue for managing incoming connections.
         </documentation>
         
         <input message="zeusns:setListenQueueSizeRequest"/>
         <output message="zeusns:setListenQueueSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setListenQueueSizeByLocation">
         <documentation>
            Set the size of the listen queue for managing incoming connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setListenQueueSizeByLocationRequest"/>
         <output message="zeusns:setListenQueueSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setLogFlushFlushTime">
         <documentation>
            Set the length of time to wait before flushing the request log files for each virtual server, in seconds.
         </documentation>
         
         <input message="zeusns:setLogFlushFlushTimeRequest"/>
         <output message="zeusns:setLogFlushFlushTimeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLogFlushFlushTimeByLocation">
         <documentation>
            Set the length of time to wait before flushing the request log files for each virtual server, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setLogFlushFlushTimeByLocationRequest"/>
         <output message="zeusns:setLogFlushFlushTimeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setLogInterval">
         <documentation>
            Set the length of time between log messages for log intensive features e.g. SLM, in seconds.
         </documentation>
         
         <input message="zeusns:setLogIntervalRequest"/>
         <output message="zeusns:setLogIntervalResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLogIntervalByLocation">
         <documentation>
            Set the length of time between log messages for log intensive features e.g. SLM, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setLogIntervalByLocationRequest"/>
         <output message="zeusns:setLogIntervalByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setLogRate">
         <documentation>
            Set is the maximum number of connection errors logged per second.
         </documentation>
         
         <input message="zeusns:setLogRateRequest"/>
         <output message="zeusns:setLogRateResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLogRateByLocation">
         <documentation>
            Set is the maximum number of connection errors logged per second. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setLogRateByLocationRequest"/>
         <output message="zeusns:setLogRateByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setLogReopenTime">
         <documentation>
            Set the length of time to wait before re-opening request log files, to handle log file rotation, in seconds.
         </documentation>
         
         <input message="zeusns:setLogReopenTimeRequest"/>
         <output message="zeusns:setLogReopenTimeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLogReopenTimeByLocation">
         <documentation>
            Set the length of time to wait before re-opening request log files, to handle log file rotation, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setLogReopenTimeByLocationRequest"/>
         <output message="zeusns:setLogReopenTimeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setLoginBanner">
         <documentation>
            Set the banner text to be shown on the Admin Server login page and before logging in to appliance SSH servers.
         </documentation>
         
         <input message="zeusns:setLoginBannerRequest"/>
         <output message="zeusns:setLoginBannerResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLoginDelay">
         <documentation>
            Set the number of seconds before another login attempt can be made after a failed attempt.
         </documentation>
         
         <input message="zeusns:setLoginDelayRequest"/>
         <output message="zeusns:setLoginDelayResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxAccepting">
         <documentation>
            Set how many traffic manager child processes accept new connections.
         </documentation>
         
         <input message="zeusns:setMaxAcceptingRequest"/>
         <output message="zeusns:setMaxAcceptingResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxAcceptingByLocation">
         <documentation>
            Set how many traffic manager child processes accept new connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaxAcceptingByLocationRequest"/>
         <output message="zeusns:setMaxAcceptingByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setMaxIdleConnections">
         <documentation>
            Set the maximum number of unused HTTP keepalive connections to all nodes that should maintained for re-use.
         </documentation>
         
         <input message="zeusns:setMaxIdleConnectionsRequest"/>
         <output message="zeusns:setMaxIdleConnectionsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxIdleConnectionsByLocation">
         <documentation>
            Set the maximum number of unused HTTP keepalive connections to all nodes that should maintained for re-use. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaxIdleConnectionsByLocationRequest"/>
         <output message="zeusns:setMaxIdleConnectionsByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setMaxKeepalives">
         <documentation>
            setMaxKeepalives is deprecated, please use setMaxIdleConnections instead.
         </documentation>
         
         <input message="zeusns:setMaxKeepalivesRequest"/>
         <output message="zeusns:setMaxKeepalivesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxKeepalivesByLocation">
         <documentation>
            setMaxKeepalives is deprecated, please use setMaxIdleConnections instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaxKeepalivesByLocationRequest"/>
         <output message="zeusns:setMaxKeepalivesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setMaxLoginAttempts">
         <documentation>
            Set the number of sequential failed login attempts that will cause a user account to be suspended.  Setting this to 0 disables this feature.
         </documentation>
         
         <input message="zeusns:setMaxLoginAttemptsRequest"/>
         <output message="zeusns:setMaxLoginAttemptsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxLoginExternal">
         <documentation>
            Set whether or not usernames blocked due to the max_login_attempts limit should also be blocked from authentication against external services (such as LDAP and RADIUS).
         </documentation>
         
         <input message="zeusns:setMaxLoginExternalRequest"/>
         <output message="zeusns:setMaxLoginExternalResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxLoginSuspensionTime">
         <documentation>
            Set number of minutes to suspend users who have exceeded the max_login_attempts limit.
         </documentation>
         
         <input message="zeusns:setMaxLoginSuspensionTimeRequest"/>
         <output message="zeusns:setMaxLoginSuspensionTimeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaxRetries">
         <documentation>
            This method is now obsolete and is replaced by Pool.setNodeConnectionAttempts.
         </documentation>
         
         <input message="zeusns:setMaxRetriesRequest"/>
         <output message="zeusns:setMaxRetriesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaximumFDCount">
         <documentation>
            Set the maximum number of file descriptors that your traffic manager will allocate
         </documentation>
         
         <input message="zeusns:setMaximumFDCountRequest"/>
         <output message="zeusns:setMaximumFDCountResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMaximumFDCountByLocation">
         <documentation>
            Set the maximum number of file descriptors that your traffic manager will allocate This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMaximumFDCountByLocationRequest"/>
         <output message="zeusns:setMaximumFDCountByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setMinAlphaChars">
         <documentation>
            Set the minimum number of alphabetic characters in a password.
         </documentation>
         
         <input message="zeusns:setMinAlphaCharsRequest"/>
         <output message="zeusns:setMinAlphaCharsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMinNumericChars">
         <documentation>
            Set the minimum number of numeric characters in a password.
         </documentation>
         
         <input message="zeusns:setMinNumericCharsRequest"/>
         <output message="zeusns:setMinNumericCharsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMinPasswordLength">
         <documentation>
            Set the minimum number of characters a password must contain.
         </documentation>
         
         <input message="zeusns:setMinPasswordLengthRequest"/>
         <output message="zeusns:setMinPasswordLengthResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMinSpecialChars">
         <documentation>
            Set the minimum number of special characters in a password.
         </documentation>
         
         <input message="zeusns:setMinSpecialCharsRequest"/>
         <output message="zeusns:setMinSpecialCharsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMinUppercaseChars">
         <documentation>
            Set the minimum number of uppercase characters in a password.
         </documentation>
         
         <input message="zeusns:setMinUppercaseCharsRequest"/>
         <output message="zeusns:setMinUppercaseCharsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMonitorNumNodes">
         <documentation>
            Set the maximum number of nodes that can be monitored.
         </documentation>
         
         <input message="zeusns:setMonitorNumNodesRequest"/>
         <output message="zeusns:setMonitorNumNodesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMonitorNumNodesByLocation">
         <documentation>
            Set the maximum number of nodes that can be monitored. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMonitorNumNodesByLocationRequest"/>
         <output message="zeusns:setMonitorNumNodesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setMultipleAccept">
         <documentation>
            Set whether your traffic manager should try and read multiple new connections each time a new client connects.
         </documentation>
         
         <input message="zeusns:setMultipleAcceptRequest"/>
         <output message="zeusns:setMultipleAcceptResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMultipleAcceptByLocation">
         <documentation>
            Set whether your traffic manager should try and read multiple new connections each time a new client connects. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setMultipleAcceptByLocationRequest"/>
         <output message="zeusns:setMultipleAcceptByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setNodeConnectionAttempts">
         <documentation>
            This method is now obsolete and is replaced by Pool.setNodeConnectionAttempts.
         </documentation>
         
         <input message="zeusns:setNodeConnectionAttemptsRequest"/>
         <output message="zeusns:setNodeConnectionAttemptsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNodeFailTime">
         <documentation>
            This method is now obsolete and is replaced by Pool.setNodeFailTime.
         </documentation>
         
         <input message="zeusns:setNodeFailTimeRequest"/>
         <output message="zeusns:setNodeFailTimeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setOCSPCacheSize">
         <documentation>
            Set the maximum number of cached client certificate OCSP results stored.  This cache is used to speed up OCSP checks against client certificates by caching results.
         </documentation>
         
         <input message="zeusns:setOCSPCacheSizeRequest"/>
         <output message="zeusns:setOCSPCacheSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setOCSPCacheSizeByLocation">
         <documentation>
            Set the maximum number of cached client certificate OCSP results stored.  This cache is used to speed up OCSP checks against client certificates by caching results. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setOCSPCacheSizeByLocationRequest"/>
         <output message="zeusns:setOCSPCacheSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setPasswordChangesPerDay">
         <documentation>
            Set the maximum number of times a password can be changed every 24 hours.
         </documentation>
         
         <input message="zeusns:setPasswordChangesPerDayRequest"/>
         <output message="zeusns:setPasswordChangesPerDayResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setPasswordReuseAfter">
         <documentation>
            Set the number of times a password must have been changed before it can be reused.
         </documentation>
         
         <input message="zeusns:setPasswordReuseAfterRequest"/>
         <output message="zeusns:setPasswordReuseAfterResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setPostLoginBanner">
         <documentation>
            Set the banner text to be displayed on the appliance console after login.
         </documentation>
         
         <input message="zeusns:setPostLoginBannerRequest"/>
         <output message="zeusns:setPostLoginBannerResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setProtectionConncountSize">
         <documentation>
            Set the amount of shared memory reserved for an inter-process table of combined connection counts used by Service Protection classes (specified as an absolute size, eg 20MB).
         </documentation>
         
         <input message="zeusns:setProtectionConncountSizeRequest"/>
         <output message="zeusns:setProtectionConncountSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setProtectionConncountSizeByLocation">
         <documentation>
            Set the amount of shared memory reserved for an inter-process table of combined connection counts used by Service Protection classes (specified as an absolute size, eg 20MB). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setProtectionConncountSizeByLocationRequest"/>
         <output message="zeusns:setProtectionConncountSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setRESTAuthTimeout">
         <documentation>
            Set REST authentication timeout.
         </documentation>
         
         <input message="zeusns:setRESTAuthTimeoutRequest"/>
         <output message="zeusns:setRESTAuthTimeoutResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRESTEnabled">
         <documentation>
            Set whether REST service is enabled.
         </documentation>
         
         <input message="zeusns:setRESTEnabledRequest"/>
         <output message="zeusns:setRESTEnabledResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRESTMaxHTTPHeaderLength">
         <documentation>
            Set the maximum allowed length in bytes of a HTTP request's headers.
         </documentation>
         
         <input message="zeusns:setRESTMaxHTTPHeaderLengthRequest"/>
         <output message="zeusns:setRESTMaxHTTPHeaderLengthResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRESTReplicateAbsoluteTime">
         <documentation>
            Set Absolute time before configuration replication via REST.
         </documentation>
         
         <input message="zeusns:setRESTReplicateAbsoluteTimeRequest"/>
         <output message="zeusns:setRESTReplicateAbsoluteTimeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRESTReplicateLullTime">
         <documentation>
            Set Lull time for configuration replication via REST.
         </documentation>
         
         <input message="zeusns:setRESTReplicateLullTimeRequest"/>
         <output message="zeusns:setRESTReplicateLullTimeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRESTReplicateTimeout">
         <documentation>
            Set the configuration replication timeout via REST.
         </documentation>
         
         <input message="zeusns:setRESTReplicateTimeoutRequest"/>
         <output message="zeusns:setRESTReplicateTimeoutResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRateClassLimit">
         <documentation>
            Set the maximum number of Rate classes allowed.
         </documentation>
         
         <input message="zeusns:setRateClassLimitRequest"/>
         <output message="zeusns:setRateClassLimitResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRateClassLimitByLocation">
         <documentation>
            Set the maximum number of Rate classes allowed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setRateClassLimitByLocationRequest"/>
         <output message="zeusns:setRateClassLimitByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setRecentConns">
         <documentation>
            Set the details of how many recently closed connections each traffic manager process should save for use with the Connections page.
         </documentation>
         
         <input message="zeusns:setRecentConnsRequest"/>
         <output message="zeusns:setRecentConnsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRecentConnsByLocation">
         <documentation>
            Set the details of how many recently closed connections each traffic manager process should save for use with the Connections page. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setRecentConnsByLocationRequest"/>
         <output message="zeusns:setRecentConnsByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setRecentConnsRetainTime">
         <documentation>
            Set for how long a snapshot should be retained on the Connections page.
         </documentation>
         
         <input message="zeusns:setRecentConnsRetainTimeRequest"/>
         <output message="zeusns:setRecentConnsRetainTimeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRecentConnsRetainTimeByLocation">
         <documentation>
            Set for how long a snapshot should be retained on the Connections page. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setRecentConnsRetainTimeByLocationRequest"/>
         <output message="zeusns:setRecentConnsRetainTimeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setRecentConnsSnapshotSize">
         <documentation>
            Set the maximum number of connections each traffic manager process should show for a snapshot on the Connections page.
         </documentation>
         
         <input message="zeusns:setRecentConnsSnapshotSizeRequest"/>
         <output message="zeusns:setRecentConnsSnapshotSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRecentConnsSnapshotSizeByLocation">
         <documentation>
            Set the maximum number of connections each traffic manager process should show for a snapshot on the Connections page. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setRecentConnsSnapshotSizeByLocationRequest"/>
         <output message="zeusns:setRecentConnsSnapshotSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSLMClassLimit">
         <documentation>
            Set the maximum number of SLM classes allowed.
         </documentation>
         
         <input message="zeusns:setSLMClassLimitRequest"/>
         <output message="zeusns:setSLMClassLimitResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSLMClassLimitByLocation">
         <documentation>
            Set the maximum number of SLM classes allowed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSLMClassLimitByLocationRequest"/>
         <output message="zeusns:setSLMClassLimitByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSNMPUserCounters">
         <documentation>
            Set the number of user defined SNMP counters (this single parameter dictates the numbers of both 32- and 64-bit user counters - there is always the same number of counters of each type).
         </documentation>
         
         <input message="zeusns:setSNMPUserCountersRequest"/>
         <output message="zeusns:setSNMPUserCountersResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSNMPUserCountersByLocation">
         <documentation>
            Set the number of user defined SNMP counters (this single parameter dictates the numbers of both 32- and 64-bit user counters - there is always the same number of counters of each type). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSNMPUserCountersByLocationRequest"/>
         <output message="zeusns:setSNMPUserCountersByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSL3AllowRehandshake">
         <documentation>
            Set whether SSL / TLS re-handshakes are supported.
         </documentation>
         
         <input message="zeusns:setSSL3AllowRehandshakeRequest"/>
         <output message="zeusns:setSSL3AllowRehandshakeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSL3AllowRehandshakeByLocation">
         <documentation>
            Set whether SSL / TLS re-handshakes are supported. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSL3AllowRehandshakeByLocationRequest"/>
         <output message="zeusns:setSSL3AllowRehandshakeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSL3Ciphers">
         <documentation>
            Set the list of configured SSL ciphers (available ciphers can be displayed using the command $ZEUSHOME/zxtm/bin/zeus.zxtm -s).
         </documentation>
         
         <input message="zeusns:setSSL3CiphersRequest"/>
         <output message="zeusns:setSSL3CiphersResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSL3CiphersByLocation">
         <documentation>
            Set the list of configured SSL ciphers (available ciphers can be displayed using the command $ZEUSHOME/zxtm/bin/zeus.zxtm -s). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSL3CiphersByLocationRequest"/>
         <output message="zeusns:setSSL3CiphersByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSL3DiffieHellmanKeyLength">
         <documentation>
            Set the number of bits to use for Diffie-Hellman keys
         </documentation>
         
         <input message="zeusns:setSSL3DiffieHellmanKeyLengthRequest"/>
         <output message="zeusns:setSSL3DiffieHellmanKeyLengthResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSL3DiffieHellmanKeyLengthByLocation">
         <documentation>
            Set the number of bits to use for Diffie-Hellman keys This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSL3DiffieHellmanKeyLengthByLocationRequest"/>
         <output message="zeusns:setSSL3DiffieHellmanKeyLengthByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSL3MinRehandshakeInterval">
         <documentation>
            Set the minimum time interval (in milliseconds) between handshakes on a single SSL3/TLS connection.
         </documentation>
         
         <input message="zeusns:setSSL3MinRehandshakeIntervalRequest"/>
         <output message="zeusns:setSSL3MinRehandshakeIntervalResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLCRLMemSize">
         <documentation>
            Set the size of the CRL shared memory.
         </documentation>
         
         <input message="zeusns:setSSLCRLMemSizeRequest"/>
         <output message="zeusns:setSSLCRLMemSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLCRLMemSizeByLocation">
         <documentation>
            Set the size of the CRL shared memory. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLCRLMemSizeByLocationRequest"/>
         <output message="zeusns:setSSLCRLMemSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLDFailureCount">
         <documentation>
            setSSLDFailureCount is deprecated, please use setSSLHardwareFailureCount instead.
         </documentation>
         
         <input message="zeusns:setSSLDFailureCountRequest"/>
         <output message="zeusns:setSSLDFailureCountResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLDFailureCountByLocation">
         <documentation>
            setSSLDFailureCount is deprecated, please use setSSLHardwareFailureCount instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLDFailureCountByLocationRequest"/>
         <output message="zeusns:setSSLDFailureCountByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLDPKCS11Lib">
         <documentation>
            setSSLDPKCS11Lib is deprecated, please use setSSLHardwarePKCS11Lib instead.
         </documentation>
         
         <input message="zeusns:setSSLDPKCS11LibRequest"/>
         <output message="zeusns:setSSLDPKCS11LibResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLDPKCS11LibByLocation">
         <documentation>
            setSSLDPKCS11Lib is deprecated, please use setSSLHardwarePKCS11Lib instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLDPKCS11LibByLocationRequest"/>
         <output message="zeusns:setSSLDPKCS11LibByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLDPKCS11UserPIN">
         <documentation>
            setSSLDPKCS11UserPIN is deprecated, please use setSSLHardwarePKCS11UserPIN instead.
         </documentation>
         
         <input message="zeusns:setSSLDPKCS11UserPINRequest"/>
         <output message="zeusns:setSSLDPKCS11UserPINResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLDPKCS11UserPINByLocation">
         <documentation>
            setSSLDPKCS11UserPIN is deprecated, please use setSSLHardwarePKCS11UserPIN instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLDPKCS11UserPINByLocationRequest"/>
         <output message="zeusns:setSSLDPKCS11UserPINByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLHardwareAccelerator">
         <documentation>
            Set whether your traffic manager should always attempt to use SSL hardware.
         </documentation>
         
         <input message="zeusns:setSSLHardwareAcceleratorRequest"/>
         <output message="zeusns:setSSLHardwareAcceleratorResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLHardwareAcceleratorByLocation">
         <documentation>
            Set whether your traffic manager should always attempt to use SSL hardware. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLHardwareAcceleratorByLocationRequest"/>
         <output message="zeusns:setSSLHardwareAcceleratorByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLHardwareFailureCount">
         <documentation>
            Set the number of consecutive failures from the SSL hardware that will be tolerated before your traffic manager tries to log in again.
         </documentation>
         
         <input message="zeusns:setSSLHardwareFailureCountRequest"/>
         <output message="zeusns:setSSLHardwareFailureCountResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLHardwareFailureCountByLocation">
         <documentation>
            Set the number of consecutive failures from the SSL hardware that will be tolerated before your traffic manager tries to log in again. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLHardwareFailureCountByLocationRequest"/>
         <output message="zeusns:setSSLHardwareFailureCountByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLHardwarePKCS11Lib">
         <documentation>
            Set the location of the PKCS#11 library supplied by your hardware vendor.
         </documentation>
         
         <input message="zeusns:setSSLHardwarePKCS11LibRequest"/>
         <output message="zeusns:setSSLHardwarePKCS11LibResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLHardwarePKCS11LibByLocation">
         <documentation>
            Set the location of the PKCS#11 library supplied by your hardware vendor. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLHardwarePKCS11LibByLocationRequest"/>
         <output message="zeusns:setSSLHardwarePKCS11LibByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLHardwarePKCS11SlotLabel">
         <documentation>
            Set the label of the SSL hardware slot to use.
         </documentation>
         
         <input message="zeusns:setSSLHardwarePKCS11SlotLabelRequest"/>
         <output message="zeusns:setSSLHardwarePKCS11SlotLabelResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLHardwarePKCS11SlotLabelByLocation">
         <documentation>
            Set the label of the SSL hardware slot to use. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLHardwarePKCS11SlotLabelByLocationRequest"/>
         <output message="zeusns:setSSLHardwarePKCS11SlotLabelByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLHardwarePKCS11SlotType">
         <documentation>
            Set the type of PKCS11 slot to use. Only used for PKCS11.
         </documentation>
         
         <input message="zeusns:setSSLHardwarePKCS11SlotTypeRequest"/>
         <output message="zeusns:setSSLHardwarePKCS11SlotTypeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLHardwarePKCS11SlotTypeByLocation">
         <documentation>
            Set the type of PKCS11 slot to use. Only used for PKCS11. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLHardwarePKCS11SlotTypeByLocationRequest"/>
         <output message="zeusns:setSSLHardwarePKCS11SlotTypeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLHardwarePKCS11UserPIN">
         <documentation>
            Set the user PIN for the PKCS token (PKCS#11 devices only)
         </documentation>
         
         <input message="zeusns:setSSLHardwarePKCS11UserPINRequest"/>
         <output message="zeusns:setSSLHardwarePKCS11UserPINResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLHardwarePKCS11UserPINByLocation">
         <documentation>
            Set the user PIN for the PKCS token (PKCS#11 devices only) This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLHardwarePKCS11UserPINByLocationRequest"/>
         <output message="zeusns:setSSLHardwarePKCS11UserPINByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLHardwareType">
         <documentation>
            Set the device driver library name.
         </documentation>
         
         <input message="zeusns:setSSLHardwareTypeRequest"/>
         <output message="zeusns:setSSLHardwareTypeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLHardwareTypeByLocation">
         <documentation>
            Set the device driver library name. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLHardwareTypeByLocationRequest"/>
         <output message="zeusns:setSSLHardwareTypeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLInsertExtraFragment">
         <documentation>
            Set whether SSL3 and TLS1 use one byte fragments
         </documentation>
         
         <input message="zeusns:setSSLInsertExtraFragmentRequest"/>
         <output message="zeusns:setSSLInsertExtraFragmentResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLInsertExtraFragmentByLocation">
         <documentation>
            Set whether SSL3 and TLS1 use one byte fragments This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLInsertExtraFragmentByLocationRequest"/>
         <output message="zeusns:setSSLInsertExtraFragmentByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLMaxHandshakeMessageSize">
         <documentation>
            Set the maximum acceptable size (in bytes) a SSL handshake message is permitted to be.
         </documentation>
         
         <input message="zeusns:setSSLMaxHandshakeMessageSizeRequest"/>
         <output message="zeusns:setSSLMaxHandshakeMessageSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLMaxHandshakeMessageSizeByLocation">
         <documentation>
            Set the maximum acceptable size (in bytes) a SSL handshake message is permitted to be. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLMaxHandshakeMessageSizeByLocationRequest"/>
         <output message="zeusns:setSSLMaxHandshakeMessageSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLOCSPStaplingDefaultRefreshInterval">
         <documentation>
            Set how long to wait before refreshing requests on behalf of the store of certificate status responses used by OCSP stapling, if we don't have an up-to-date OCSP response.
         </documentation>
         
         <input message="zeusns:setSSLOCSPStaplingDefaultRefreshIntervalRequest"/>
         <output message="zeusns:setSSLOCSPStaplingDefaultRefreshIntervalResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLOCSPStaplingDefaultRefreshIntervalByLocation">
         <documentation>
            Set how long to wait before refreshing requests on behalf of the store of certificate status responses used by OCSP stapling, if we don't have an up-to-date OCSP response. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLOCSPStaplingDefaultRefreshIntervalByLocationRequest"/>
         <output message="zeusns:setSSLOCSPStaplingDefaultRefreshIntervalByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLOCSPStaplingMemSize">
         <documentation>
            Set the size of the OCSP stapling response shared memory.
         </documentation>
         
         <input message="zeusns:setSSLOCSPStaplingMemSizeRequest"/>
         <output message="zeusns:setSSLOCSPStaplingMemSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLOCSPStaplingMemSizeByLocation">
         <documentation>
            Set the size of the OCSP stapling response shared memory. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLOCSPStaplingMemSizeByLocationRequest"/>
         <output message="zeusns:setSSLOCSPStaplingMemSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLPreventTimingSideChannels">
         <documentation>
            Set whether SSL3 and TLS will take performance degrading steps to prevent exposing timing side-channels.
         </documentation>
         
         <input message="zeusns:setSSLPreventTimingSideChannelsRequest"/>
         <output message="zeusns:setSSLPreventTimingSideChannelsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLPreventTimingSideChannelsByLocation">
         <documentation>
            Set whether SSL3 and TLS will take performance degrading steps to prevent exposing timing side-channels. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLPreventTimingSideChannelsByLocationRequest"/>
         <output message="zeusns:setSSLPreventTimingSideChannelsByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLSessionCacheSize">
         <documentation>
            Set the maximum number of entries in the SSL session cache. This is used to provide persistence based on SSL session IDs.
         </documentation>
         
         <input message="zeusns:setSSLSessionCacheSizeRequest"/>
         <output message="zeusns:setSSLSessionCacheSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLSessionCacheSizeByLocation">
         <documentation>
            Set the maximum number of entries in the SSL session cache. This is used to provide persistence based on SSL session IDs. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLSessionCacheSizeByLocationRequest"/>
         <output message="zeusns:setSSLSessionCacheSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLSessionIDCacheExpiryTime">
         <documentation>
            Set the length of time that SSL session IDs are stored, in seconds.
         </documentation>
         
         <input message="zeusns:setSSLSessionIDCacheExpiryTimeRequest"/>
         <output message="zeusns:setSSLSessionIDCacheExpiryTimeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLSessionIDCacheExpiryTimeByLocation">
         <documentation>
            Set the length of time that SSL session IDs are stored, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLSessionIDCacheExpiryTimeByLocationRequest"/>
         <output message="zeusns:setSSLSessionIDCacheExpiryTimeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLSessionIDCacheSize">
         <documentation>
            Set the number of entries in the SSL session ID cache.
         </documentation>
         
         <input message="zeusns:setSSLSessionIDCacheSizeRequest"/>
         <output message="zeusns:setSSLSessionIDCacheSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLSessionIDCacheSizeByLocation">
         <documentation>
            Set the number of entries in the SSL session ID cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLSessionIDCacheSizeByLocationRequest"/>
         <output message="zeusns:setSSLSessionIDCacheSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLSupportSSL2">
         <documentation>
            Set whether SSLv2 support is enabled.
         </documentation>
         
         <input message="zeusns:setSSLSupportSSL2Request"/>
         <output message="zeusns:setSSLSupportSSL2Response"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLSupportSSL2ByLocation">
         <documentation>
            Set whether SSLv2 support is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLSupportSSL2ByLocationRequest"/>
         <output message="zeusns:setSSLSupportSSL2ByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLSupportSSL3">
         <documentation>
            Set whether SSLv3 support is enabled.
         </documentation>
         
         <input message="zeusns:setSSLSupportSSL3Request"/>
         <output message="zeusns:setSSLSupportSSL3Response"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLSupportSSL3ByLocation">
         <documentation>
            Set whether SSLv3 support is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLSupportSSL3ByLocationRequest"/>
         <output message="zeusns:setSSLSupportSSL3ByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLSupportTLS1">
         <documentation>
            Set whether TLSv1 support is enabled.
         </documentation>
         
         <input message="zeusns:setSSLSupportTLS1Request"/>
         <output message="zeusns:setSSLSupportTLS1Response"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLSupportTLS11">
         <documentation>
            Set whether TLSv1.1 support is enabled.
         </documentation>
         
         <input message="zeusns:setSSLSupportTLS11Request"/>
         <output message="zeusns:setSSLSupportTLS11Response"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSSLSupportTLS11ByLocation">
         <documentation>
            Set whether TLSv1.1 support is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLSupportTLS11ByLocationRequest"/>
         <output message="zeusns:setSSLSupportTLS11ByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSSLSupportTLS1ByLocation">
         <documentation>
            Set whether TLSv1 support is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSSLSupportTLS1ByLocationRequest"/>
         <output message="zeusns:setSSLSupportTLS1ByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSharedPoolSize">
         <documentation>
            Set is the size of shared memory pool to be used for shared storage across worker processes.
         </documentation>
         
         <input message="zeusns:setSharedPoolSizeRequest"/>
         <output message="zeusns:setSharedPoolSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSharedPoolSizeByLocation">
         <documentation>
            Set is the size of shared memory pool to be used for shared storage across worker processes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSharedPoolSizeByLocationRequest"/>
         <output message="zeusns:setSharedPoolSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSoapIdleMinutes">
         <documentation>
            Set the number of minutes the SOAP server remain idle before exiting
         </documentation>
         
         <input message="zeusns:setSoapIdleMinutesRequest"/>
         <output message="zeusns:setSoapIdleMinutesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSoapIdleMinutesByLocation">
         <documentation>
            Set the number of minutes the SOAP server remain idle before exiting This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSoapIdleMinutesByLocationRequest"/>
         <output message="zeusns:setSoapIdleMinutesByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSocketOptimizations">
         <documentation>
            Set whether potential network socket optimisations should be used.
         </documentation>
         
         <input message="zeusns:setSocketOptimizationsRequest"/>
         <output message="zeusns:setSocketOptimizationsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSocketOptimizationsByLocation">
         <documentation>
            Set whether potential network socket optimisations should be used. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSocketOptimizationsByLocationRequest"/>
         <output message="zeusns:setSocketOptimizationsByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSsldAccel">
         <documentation>
            setSsldAccel is deprecated, please use setSSLHardwareAccelerator instead.
         </documentation>
         
         <input message="zeusns:setSsldAccelRequest"/>
         <output message="zeusns:setSsldAccelResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSsldAccelByLocation">
         <documentation>
            setSsldAccel is deprecated, please use setSSLHardwareAccelerator instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSsldAccelByLocationRequest"/>
         <output message="zeusns:setSsldAccelByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSsldLibrary">
         <documentation>
            setSsldLibrary is deprecated, please use setSSLHardwareType instead.
         </documentation>
         
         <input message="zeusns:setSsldLibraryRequest"/>
         <output message="zeusns:setSsldLibraryResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSsldLibraryByLocation">
         <documentation>
            setSsldLibrary is deprecated, please use setSSLHardwareType instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSsldLibraryByLocationRequest"/>
         <output message="zeusns:setSsldLibraryByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setStateSyncTime">
         <documentation>
            Set how often the cache state is propagated to other traffic managers in the cluster, in seconds.
         </documentation>
         
         <input message="zeusns:setStateSyncTimeRequest"/>
         <output message="zeusns:setStateSyncTimeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setStateSyncTimeByLocation">
         <documentation>
            Set how often the cache state is propagated to other traffic managers in the cluster, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setStateSyncTimeByLocationRequest"/>
         <output message="zeusns:setStateSyncTimeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setStateSyncTimeout">
         <documentation>
            Set the timeout for state propagation between cluster members, in seconds
         </documentation>
         
         <input message="zeusns:setStateSyncTimeoutRequest"/>
         <output message="zeusns:setStateSyncTimeoutResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setStateSyncTimeoutByLocation">
         <documentation>
            Set the timeout for state propagation between cluster members, in seconds This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setStateSyncTimeoutByLocationRequest"/>
         <output message="zeusns:setStateSyncTimeoutByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSystemReadBufferSize">
         <documentation>
            Set the size of the operating system's read buffer, in bytes (0 means use the system default).
         </documentation>
         
         <input message="zeusns:setSystemReadBufferSizeRequest"/>
         <output message="zeusns:setSystemReadBufferSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSystemReadBufferSizeByLocation">
         <documentation>
            Set the size of the operating system's read buffer, in bytes (0 means use the system default). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSystemReadBufferSizeByLocationRequest"/>
         <output message="zeusns:setSystemReadBufferSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setSystemWriteBufferSize">
         <documentation>
            Set the size of the operating system's write buffer, in bytes (0 means use the system default).
         </documentation>
         
         <input message="zeusns:setSystemWriteBufferSizeRequest"/>
         <output message="zeusns:setSystemWriteBufferSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSystemWriteBufferSizeByLocation">
         <documentation>
            Set the size of the operating system's write buffer, in bytes (0 means use the system default). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setSystemWriteBufferSizeByLocationRequest"/>
         <output message="zeusns:setSystemWriteBufferSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setTrackUnknownUsers">
         <documentation>
            Set whether to remember past login attempts from usernames that are not known to exist (should be No for an Admin Server accessible from the public Internet).
         </documentation>
         
         <input message="zeusns:setTrackUnknownUsersRequest"/>
         <output message="zeusns:setTrackUnknownUsersResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setTrafficIPGroupLimit">
         <documentation>
            Set the maximum number of Traffic IP Groups allowed.
         </documentation>
         
         <input message="zeusns:setTrafficIPGroupLimitRequest"/>
         <output message="zeusns:setTrafficIPGroupLimitResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setTrafficIPGroupLimitByLocation">
         <documentation>
            Set the maximum number of Traffic IP Groups allowed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setTrafficIPGroupLimitByLocationRequest"/>
         <output message="zeusns:setTrafficIPGroupLimitByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setTrafficScriptMemoryWarning">
         <documentation>
            Set the amount of buffered network data a TrafficScript rule can buffer before a warning is logged, in bytes.
         </documentation>
         
         <input message="zeusns:setTrafficScriptMemoryWarningRequest"/>
         <output message="zeusns:setTrafficScriptMemoryWarningResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setTrafficScriptMemoryWarningByLocation">
         <documentation>
            Set the amount of buffered network data a TrafficScript rule can buffer before a warning is logged, in bytes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setTrafficScriptMemoryWarningByLocationRequest"/>
         <output message="zeusns:setTrafficScriptMemoryWarningByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setTrafficscriptArrayElements">
         <documentation>
            Set the number of array elements that can be stored before additional memory is allocated.
         </documentation>
         
         <input message="zeusns:setTrafficscriptArrayElementsRequest"/>
         <output message="zeusns:setTrafficscriptArrayElementsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setTrafficscriptArrayElementsByLocation">
         <documentation>
            Set the number of array elements that can be stored before additional memory is allocated. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setTrafficscriptArrayElementsByLocationRequest"/>
         <output message="zeusns:setTrafficscriptArrayElementsByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setTrafficscriptDataLocalSize">
         <documentation>
            Set the maximum size of the TrafficScript local data pool (specified as a percentage of system RAM, e.g. '5%', or an absolute size, e.g. 200MB)
         </documentation>
         
         <input message="zeusns:setTrafficscriptDataLocalSizeRequest"/>
         <output message="zeusns:setTrafficscriptDataLocalSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setTrafficscriptDataLocalSizeByLocation">
         <documentation>
            Set the maximum size of the TrafficScript local data pool (specified as a percentage of system RAM, e.g. '5%', or an absolute size, e.g. 200MB) This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setTrafficscriptDataLocalSizeByLocationRequest"/>
         <output message="zeusns:setTrafficscriptDataLocalSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setTrafficscriptDataSize">
         <documentation>
            Set the maximum size of the TrafficScript shared data pool (specified as a percentage of system RAM, e.g. '5%', or an absolute size, e.g. 200MB)
         </documentation>
         
         <input message="zeusns:setTrafficscriptDataSizeRequest"/>
         <output message="zeusns:setTrafficscriptDataSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setTrafficscriptDataSizeByLocation">
         <documentation>
            Set the maximum size of the TrafficScript shared data pool (specified as a percentage of system RAM, e.g. '5%', or an absolute size, e.g. 200MB) This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setTrafficscriptDataSizeByLocationRequest"/>
         <output message="zeusns:setTrafficscriptDataSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setTrafficscriptMaxInstr">
         <documentation>
            Set the maximum number of instructions a TrafficScript rule will run before being aborted.
         </documentation>
         
         <input message="zeusns:setTrafficscriptMaxInstrRequest"/>
         <output message="zeusns:setTrafficscriptMaxInstrResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setTrafficscriptMaxInstrByLocation">
         <documentation>
            Set the maximum number of instructions a TrafficScript rule will run before being aborted. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setTrafficscriptMaxInstrByLocationRequest"/>
         <output message="zeusns:setTrafficscriptMaxInstrByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setTrafficscriptRegexCacheSize">
         <documentation>
            Set the number of regular expressions to cache
         </documentation>
         
         <input message="zeusns:setTrafficscriptRegexCacheSizeRequest"/>
         <output message="zeusns:setTrafficscriptRegexCacheSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setTrafficscriptRegexCacheSizeByLocation">
         <documentation>
            Set the number of regular expressions to cache This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setTrafficscriptRegexCacheSizeByLocationRequest"/>
         <output message="zeusns:setTrafficscriptRegexCacheSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setTrafficscriptRegexMatchLimit">
         <documentation>
            Set the maximum number of ways TrafficScript will attempt to match a regular expression at each position in the subject string, before it aborts the rule and reports a TrafficScript error.
         </documentation>
         
         <input message="zeusns:setTrafficscriptRegexMatchLimitRequest"/>
         <output message="zeusns:setTrafficscriptRegexMatchLimitResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setTrafficscriptRegexMatchLimitByLocation">
         <documentation>
            Set the maximum number of ways TrafficScript will attempt to match a regular expression at each position in the subject string, before it aborts the rule and reports a TrafficScript error. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setTrafficscriptRegexMatchLimitByLocationRequest"/>
         <output message="zeusns:setTrafficscriptRegexMatchLimitByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setTrafficscriptRegexMatchWarnPerc">
         <documentation>
            Set the percentage of trafficscript!regex_match_limit at which TrafficScript reports a performance warning.
         </documentation>
         
         <input message="zeusns:setTrafficscriptRegexMatchWarnPercRequest"/>
         <output message="zeusns:setTrafficscriptRegexMatchWarnPercResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setTrafficscriptRegexMatchWarnPercByLocation">
         <documentation>
            Set the percentage of trafficscript!regex_match_limit at which TrafficScript reports a performance warning. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setTrafficscriptRegexMatchWarnPercByLocationRequest"/>
         <output message="zeusns:setTrafficscriptRegexMatchWarnPercByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setTrafficscriptVariablePoolUse">
         <documentation>
            Set whether the 'pool.use' and 'pool.select' TrafficScript functions accept variables as well as literal strings.
         </documentation>
         
         <input message="zeusns:setTrafficscriptVariablePoolUseRequest"/>
         <output message="zeusns:setTrafficscriptVariablePoolUseResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setTrafficscriptVariablePoolUseByLocation">
         <documentation>
            Set whether the 'pool.use' and 'pool.select' TrafficScript functions accept variables as well as literal strings. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setTrafficscriptVariablePoolUseByLocationRequest"/>
         <output message="zeusns:setTrafficscriptVariablePoolUseByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setUipageBanner">
         <documentation>
            Set the banner text to be displayed on all Admin Server pages.
         </documentation>
         
         <input message="zeusns:setUipageBannerRequest"/>
         <output message="zeusns:setUipageBannerResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setUniversalSessionCacheSize">
         <documentation>
            Set the maximum number of entries in the universal session cache.
         </documentation>
         
         <input message="zeusns:setUniversalSessionCacheSizeRequest"/>
         <output message="zeusns:setUniversalSessionCacheSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setUniversalSessionCacheSizeByLocation">
         <documentation>
            Set the maximum number of entries in the universal session cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setUniversalSessionCacheSizeByLocationRequest"/>
         <output message="zeusns:setUniversalSessionCacheSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setWebcacheAvgPathLength">
         <documentation>
            Set the estimated average length of the path for resources to be cached
         </documentation>
         
         <input message="zeusns:setWebcacheAvgPathLengthRequest"/>
         <output message="zeusns:setWebcacheAvgPathLengthResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheAvgPathLengthByLocation">
         <documentation>
            Set the estimated average length of the path for resources to be cached This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setWebcacheAvgPathLengthByLocationRequest"/>
         <output message="zeusns:setWebcacheAvgPathLengthByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setWebcacheDisk">
         <documentation>
            Set whether the webcache is stored on disk
         </documentation>
         
         <input message="zeusns:setWebcacheDiskRequest"/>
         <output message="zeusns:setWebcacheDiskResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheDiskByLocation">
         <documentation>
            Set whether the webcache is stored on disk This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setWebcacheDiskByLocationRequest"/>
         <output message="zeusns:setWebcacheDiskByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setWebcacheDiskDir">
         <documentation>
            Set the disk cache location
         </documentation>
         
         <input message="zeusns:setWebcacheDiskDirRequest"/>
         <output message="zeusns:setWebcacheDiskDirResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheDiskDirByLocation">
         <documentation>
            Set the disk cache location This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setWebcacheDiskDirByLocationRequest"/>
         <output message="zeusns:setWebcacheDiskDirByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setWebcacheMaxFileNum">
         <documentation>
            Set the maximum number of files that can be stored in the web cache
         </documentation>
         
         <input message="zeusns:setWebcacheMaxFileNumRequest"/>
         <output message="zeusns:setWebcacheMaxFileNumResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheMaxFileNumByLocation">
         <documentation>
            Set the maximum number of files that can be stored in the web cache This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setWebcacheMaxFileNumByLocationRequest"/>
         <output message="zeusns:setWebcacheMaxFileNumByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setWebcacheMaxFileSize">
         <documentation>
            Set the largest size of a cacheable object, relative to the total cache size, e.g. '2%', or as an absolute size in kB (default), MB or GB, e.g. '20MB'.
         </documentation>
         
         <input message="zeusns:setWebcacheMaxFileSizeRequest"/>
         <output message="zeusns:setWebcacheMaxFileSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheMaxFileSizeByLocation">
         <documentation>
            Set the largest size of a cacheable object, relative to the total cache size, e.g. '2%', or as an absolute size in kB (default), MB or GB, e.g. '20MB'. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setWebcacheMaxFileSizeByLocationRequest"/>
         <output message="zeusns:setWebcacheMaxFileSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setWebcacheMaxPathLength">
         <documentation>
            Set the maximum length of the path for the resource being cached
         </documentation>
         
         <input message="zeusns:setWebcacheMaxPathLengthRequest"/>
         <output message="zeusns:setWebcacheMaxPathLengthResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheMaxPathLengthByLocation">
         <documentation>
            Set the maximum length of the path for the resource being cached This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setWebcacheMaxPathLengthByLocationRequest"/>
         <output message="zeusns:setWebcacheMaxPathLengthByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setWebcacheNormalizeQuery">
         <documentation>
            Set whether the assignment sub-strings in the parameter string are put into alphabetical order.
         </documentation>
         
         <input message="zeusns:setWebcacheNormalizeQueryRequest"/>
         <output message="zeusns:setWebcacheNormalizeQueryResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheNormalizeQueryByLocation">
         <documentation>
            Set whether the assignment sub-strings in the parameter string are put into alphabetical order. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setWebcacheNormalizeQueryByLocationRequest"/>
         <output message="zeusns:setWebcacheNormalizeQueryByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setWebcacheSize">
         <documentation>
            Set the maximum size of the HTTP web page cache, (specified as a percentage of system RAM, e.g. '20%', or an absolute size, e.g. 200MB)
         </documentation>
         
         <input message="zeusns:setWebcacheSizeRequest"/>
         <output message="zeusns:setWebcacheSizeResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheSizeByLocation">
         <documentation>
            Set the maximum size of the HTTP web page cache, (specified as a percentage of system RAM, e.g. '20%', or an absolute size, e.g. 200MB) This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setWebcacheSizeByLocationRequest"/>
         <output message="zeusns:setWebcacheSizeByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="setWebcacheVerbose">
         <documentation>
            Set whether an X-Cache-Info header to show cacheability should be added.
         </documentation>
         
         <input message="zeusns:setWebcacheVerboseRequest"/>
         <output message="zeusns:setWebcacheVerboseResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setWebcacheVerboseByLocation">
         <documentation>
            Set whether an X-Cache-Info header to show cacheability should be added. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input message="zeusns:setWebcacheVerboseByLocationRequest"/>
         <output message="zeusns:setWebcacheVerboseByLocationResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
   </portType>
   
   <binding name="GlobalSettingsBinding" type="zeusns:GlobalSettingsPort">
      <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
      <operation name="addApplianceReturnPathRoutes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/addApplianceReturnPathRoutes"/>
         <documentation>
            Add a set of return path routes (MAC/IP mappings) to the configuration.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addApplianceReturnPathRoutesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/addApplianceReturnPathRoutesByLocation"/>
         <documentation>
            Add a set of return path routes (MAC/IP mappings) to the configuration. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addFlipperFrontendCheckAddresses">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/addFlipperFrontendCheckAddresses"/>
         <documentation>
            Add new IP addresses to the list that should be used to check front-end connectivity
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addFlipperFrontendCheckAddressesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/addFlipperFrontendCheckAddressesByLocation"/>
         <documentation>
            Add new IP addresses to the list that should be used to check front-end connectivity This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getASPSessionCacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getASPSessionCacheSize"/>
         <documentation>
            Get the maximum number of entries in the ASP session cache.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getASPSessionCacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getASPSessionCacheSizeByLocation"/>
         <documentation>
            Get the maximum number of entries in the ASP session cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAcceptingDelay">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAcceptingDelay"/>
         <documentation>
            Get how often each traffic manager child process checks whether it should be accepting new connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getAcceptingDelayByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAcceptingDelayByLocation"/>
         <documentation>
            Get how often each traffic manager child process checks whether it should be accepting new connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAdminAllowRehandshake">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAdminAllowRehandshake"/>
         <documentation>
            Get whether SSL / TLS re-handshakes are supported.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getAdminDiffieHellmanKeyLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAdminDiffieHellmanKeyLength"/>
         <documentation>
            Get the number of bits to use for Diffie-Hellman keys
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getAdminInsertExtraFragment">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAdminInsertExtraFragment"/>
         <documentation>
            Get whether admin server SSL3 and TLS1 use one byte fragments
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getAdminMinRehandshakeInterval">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAdminMinRehandshakeInterval"/>
         <documentation>
            Get the minimum time interval (in milliseconds) between handshakes on a single SSL3/TLS connection.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getAdminSSLCiphers">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAdminSSLCiphers"/>
         <documentation>
            Get the list of configured SSL ciphers for admin server and internal connections (available ciphers can be displayed using the command $ZEUSHOME/zxtm/bin/zeus.zxtm -s).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getAdminSSLMaxHandshakeMessageSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAdminSSLMaxHandshakeMessageSize"/>
         <documentation>
            Get the maximum acceptable size (in bytes) a SSL handshake message is permitted to be for admin and internal connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getAdminSSLPreventTimingSideChannels">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAdminSSLPreventTimingSideChannels"/>
         <documentation>
            Get whether SSL3 and TLS used by the admin server and internal connections will take performance degrading steps to prevent exposing timing side-channels.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getAdminSSLSupportTLS11">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAdminSSLSupportTLS11"/>
         <documentation>
            Get whether TLSv1.1 support is enabled for admin server and internal connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getAdminSupportSSL2">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAdminSupportSSL2"/>
         <documentation>
            Get whether SSLv2 support is enabled for admin server and internal connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getAdminSupportSSL3">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAdminSupportSSL3"/>
         <documentation>
            Get whether SSLv3 support is enabled for admin server and internal connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getAdminSupportTLS1">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAdminSupportTLS1"/>
         <documentation>
            Get whether TLSv1 support is enabled for admin server and internal connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getAlertEmailInterval">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAlertEmailInterval"/>
         <documentation>
            Get the length of time between alert emails, in seconds. Several alert messages will be stored up and sent in one email.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getAlertEmailIntervalByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAlertEmailIntervalByLocation"/>
         <documentation>
            Get the length of time between alert emails, in seconds. Several alert messages will be stored up and sent in one email. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAlertEmailMaxAttempts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAlertEmailMaxAttempts"/>
         <documentation>
            Get the number of times to attempt sending an email before giving up.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getAlertEmailMaxAttemptsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAlertEmailMaxAttemptsByLocation"/>
         <documentation>
            Get the number of times to attempt sending an email before giving up. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAllowConsecutiveChars">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAllowConsecutiveChars"/>
         <documentation>
            Get whether the same character can appear consecutively in passwords.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getApplianceReturnPathRoutes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getApplianceReturnPathRoutes"/>
         <documentation>
            Get the set of return path routes (MAC/IP mappings) in the configuration.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getApplianceReturnPathRoutesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getApplianceReturnPathRoutesByLocation"/>
         <documentation>
            Get the set of return path routes (MAC/IP mappings) in the configuration. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getApplianceReturnPathRoutingEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getApplianceReturnPathRoutingEnabled"/>
         <documentation>
            Get whether return path routing is enabled
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getApplianceReturnPathRoutingEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getApplianceReturnPathRoutingEnabledByLocation"/>
         <documentation>
            Get whether return path routing is enabled This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAptimizerMaxOriginalContentBufferSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAptimizerMaxOriginalContentBufferSize"/>
         <documentation>
            Get the maximum size of original content buffer for content sent to Aptimize.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getAptimizerWatchdogInterval">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAptimizerWatchdogInterval"/>
         <documentation>
            Get How long (in seconds) the Aptimizer watchdog mechanism should keep count of crashes for.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getAptimizerWatchdogLimit">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAptimizerWatchdogLimit"/>
         <documentation>
            Get the maximum number of times the Aptimizer sub-process will be restarted.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getAutoscalerVerbose">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAutoscalerVerbose"/>
         <documentation>
            Get detailed logging of autoscaler status and actions
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getAutoscalerVerboseByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getAutoscalerVerboseByLocation"/>
         <documentation>
            Get detailed logging of autoscaler status and actions This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getBackendKeepaliveTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getBackendKeepaliveTimeout"/>
         <documentation>
            getBackendKeepaliveTimeout is deprecated, please use getIdleConnectionTimeout instead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getBackendKeepaliveTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getBackendKeepaliveTimeoutByLocation"/>
         <documentation>
            getBackendKeepaliveTimeout is deprecated, please use getIdleConnectionTimeout instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getBandwidthSharing">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getBandwidthSharing"/>
         <documentation>
            This method is now obsolete and is replaced by Catalog.Bandwidth.getSharing.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getBannerAccept">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getBannerAccept"/>
         <documentation>
            Get whether or not users must explicitly agree to the displayed login_banner text before logging in to the Admin Server.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getChunkSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getChunkSize"/>
         <documentation>
            Get the default chunk size for reading and writing data, in bytes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getChunkSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getChunkSizeByLocation"/>
         <documentation>
            Get the default chunk size for reading and writing data, in bytes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getClientFirstOpt">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getClientFirstOpt"/>
         <documentation>
            Get whether client-first network socket optimisations should be used.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getClientFirstOptByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getClientFirstOptByLocation"/>
         <documentation>
            Get whether client-first network socket optimisations should be used. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getControlAllowHosts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getControlAllowHosts"/>
         <documentation>
            Get the hosts that are allowed to contact the internal administration port on each traffic manager.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getControlAllowHostsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getControlAllowHostsByLocation"/>
         <documentation>
            Get the hosts that are allowed to contact the internal administration port on each traffic manager. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getControlCanUpdateDefault">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getControlCanUpdateDefault"/>
         <documentation>
            Get the value of the control!canupdate key for new cluster members.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getDNSCacheExpiryTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getDNSCacheExpiryTime"/>
         <documentation>
            This method should be replaced by getDNSCacheMaxTTL/getDNSCacheMinTTL.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getDNSCacheExpiryTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getDNSCacheExpiryTimeByLocation"/>
         <documentation>
            This method should be replaced by getDNSCacheMaxTTL/getDNSCacheMinTTL. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getDNSCacheMaxTTL">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getDNSCacheMaxTTL"/>
         <documentation>
            Get the maximum time entries are stored in the DNS cache for, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getDNSCacheMaxTTLByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getDNSCacheMaxTTLByLocation"/>
         <documentation>
            Get the maximum time entries are stored in the DNS cache for, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getDNSCacheMinTTL">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getDNSCacheMinTTL"/>
         <documentation>
            Get the minimum time entries are stored in the DNS cache for, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getDNSCacheMinTTLByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getDNSCacheMinTTLByLocation"/>
         <documentation>
            Get the minimum time entries are stored in the DNS cache for, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getDNSCacheNegativeExpiryTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getDNSCacheNegativeExpiryTime"/>
         <documentation>
            Get the time failed lookups are stored in the DNS cache for, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getDNSCacheNegativeExpiryTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getDNSCacheNegativeExpiryTimeByLocation"/>
         <documentation>
            Get the time failed lookups are stored in the DNS cache for, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getDNSCacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getDNSCacheSize"/>
         <documentation>
            Get the maximum number of entries in the DNS cache.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getDNSCacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getDNSCacheSizeByLocation"/>
         <documentation>
            Get the maximum number of entries in the DNS cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getDNSTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getDNSTimeout"/>
         <documentation>
            Get the timeout for receiving a response from a DNS Server, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getDNSTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getDNSTimeoutByLocation"/>
         <documentation>
            Get the timeout for receiving a response from a DNS Server, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getDeadTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getDeadTime"/>
         <documentation>
            This method is now obsolete and is replaced by Pool.getNodeFailTime.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getEC2AccessKeyID">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getEC2AccessKeyID"/>
         <documentation>
            Get the Access Key ID used for interacting with the EC2 API.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getEC2AccessKeyIDByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getEC2AccessKeyIDByLocation"/>
         <documentation>
            Get the Access Key ID used for interacting with the EC2 API. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getErrorLevel">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getErrorLevel"/>
         <documentation>
            Get the minimum severity of events that should be logged to disk.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getErrorLevelByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getErrorLevelByLocation"/>
         <documentation>
            Get the minimum severity of events that should be logged to disk. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getErrorLogFile">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getErrorLogFile"/>
         <documentation>
            Get the filename that errors are logged to.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getErrorLogFileByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getErrorLogFileByLocation"/>
         <documentation>
            Get the filename that errors are logged to. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFTPDataBindLow">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFTPDataBindLow"/>
         <documentation>
            Get whether your traffic manager should permit use of FTP data connection source ports lower than 1024.  If 'No' your traffic manager can completely drop root privileges, if 'Yes' some or all privileges may be retained in order to bind to low ports.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getFTPDataBindLowByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFTPDataBindLowByLocation"/>
         <documentation>
            Get whether your traffic manager should permit use of FTP data connection source ports lower than 1024.  If 'No' your traffic manager can completely drop root privileges, if 'Yes' some or all privileges may be retained in order to bind to low ports. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFipsEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFipsEnabled"/>
         <documentation>
            Get whether FIPS Mode is enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getFlipperArpCount">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperArpCount"/>
         <documentation>
            Get the number of ARP packets each traffic manager sends when an IP address is raised.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getFlipperArpCountByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperArpCountByLocation"/>
         <documentation>
            Get the number of ARP packets each traffic manager sends when an IP address is raised. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFlipperAutofailback">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperAutofailback"/>
         <documentation>
            Get whether Traffic IPs should automatically failback to recovered machines.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getFlipperAutofailbackByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperAutofailbackByLocation"/>
         <documentation>
            Get whether Traffic IPs should automatically failback to recovered machines. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFlipperFrontendCheckAddresses">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperFrontendCheckAddresses"/>
         <documentation>
            Get the IP addresses that should be used to check front-end connectivity.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getFlipperFrontendCheckAddressesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperFrontendCheckAddressesByLocation"/>
         <documentation>
            Get the IP addresses that should be used to check front-end connectivity. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFlipperHeartbeatMethod">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperHeartbeatMethod"/>
         <documentation>
            Get the method used to exchange cluster heartbeat messages.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getFlipperHeartbeatMethodByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperHeartbeatMethodByLocation"/>
         <documentation>
            Get the method used to exchange cluster heartbeat messages. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFlipperMonitorInterval">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperMonitorInterval"/>
         <documentation>
            Get how frequently (in milliseconds) each traffic manager checks and announces its connectivity.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getFlipperMonitorIntervalByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperMonitorIntervalByLocation"/>
         <documentation>
            Get how frequently (in milliseconds) each traffic manager checks and announces its connectivity. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFlipperMonitorTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperMonitorTimeout"/>
         <documentation>
            Get how long (in seconds) each traffic manager waits for a response from its connectivity tests or from other traffic managers before registering a failure.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getFlipperMonitorTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperMonitorTimeoutByLocation"/>
         <documentation>
            Get how long (in seconds) each traffic manager waits for a response from its connectivity tests or from other traffic managers before registering a failure. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFlipperMulticastAddress">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperMulticastAddress"/>
         <documentation>
            Get the multicast address and port used to announce connectivity (e.g. 239.100.1.1:9090).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getFlipperMulticastAddressByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperMulticastAddressByLocation"/>
         <documentation>
            Get the multicast address and port used to announce connectivity (e.g. 239.100.1.1:9090). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFlipperUnicastPort">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperUnicastPort"/>
         <documentation>
            Get the unicast UDP port used to announce connectivity (e.g. 9090)
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getFlipperUnicastPortByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperUnicastPortByLocation"/>
         <documentation>
            Get the unicast UDP port used to announce connectivity (e.g. 9090) This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFlipperUseBindip">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperUseBindip"/>
         <documentation>
            Get whether the heartbeat messages used for fault tolerance are only sent over the management network.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getFlipperUseBindipByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperUseBindipByLocation"/>
         <documentation>
            Get whether the heartbeat messages used for fault tolerance are only sent over the management network. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getFlipperVerbose">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperVerbose"/>
         <documentation>
            Get whether the traffic manager should logs all the connectivity tests.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getFlipperVerboseByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getFlipperVerboseByLocation"/>
         <documentation>
            Get whether the traffic manager should logs all the connectivity tests. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getGLBLoadChangeLimit">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getGLBLoadChangeLimit"/>
         <documentation>
            Get the maximum change per second to load.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getGLBLoadChangeLimitByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getGLBLoadChangeLimitByLocation"/>
         <documentation>
            Get the maximum change per second to load. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getGLBVerbose">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getGLBVerbose"/>
         <documentation>
            Get whether GSLB should log all DNS queries
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getGLBVerboseByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getGLBVerboseByLocation"/>
         <documentation>
            Get whether GSLB should log all DNS queries This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getHistoricalTrafficDays">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getHistoricalTrafficDays"/>
         <documentation>
            Get the length of time historical traffic information is kept for, in days (0=keep indefinitely).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getHistoricalTrafficDaysByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getHistoricalTrafficDaysByLocation"/>
         <documentation>
            Get the length of time historical traffic information is kept for, in days (0=keep indefinitely). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getIPSessionCacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getIPSessionCacheSize"/>
         <documentation>
            Get the maximum number of entries in the IP session cache.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getIPSessionCacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getIPSessionCacheSizeByLocation"/>
         <documentation>
            Get the maximum number of entries in the IP session cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getIdleConnectionTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getIdleConnectionTimeout"/>
         <documentation>
            Get how long unused HTTP keepalive connections should be kept before being discarded, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getIdleConnectionTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getIdleConnectionTimeoutByLocation"/>
         <documentation>
            Get how long unused HTTP keepalive connections should be kept before being discarded, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getJ2EESessionCacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getJ2EESessionCacheSize"/>
         <documentation>
            Get the maximum number of entries in the J2EE session cache.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getJ2EESessionCacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getJ2EESessionCacheSizeByLocation"/>
         <documentation>
            Get the maximum number of entries in the J2EE session cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getJavaClasspath">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getJavaClasspath"/>
         <documentation>
            Get extra Java CLASSPATH settings required for servlets.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getJavaClasspathByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getJavaClasspathByLocation"/>
         <documentation>
            Get extra Java CLASSPATH settings required for servlets. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getJavaCommand">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getJavaCommand"/>
         <documentation>
            Get the command (and arguments) used to start Java.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getJavaCommandByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getJavaCommandByLocation"/>
         <documentation>
            Get the command (and arguments) used to start Java. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getJavaEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getJavaEnabled"/>
         <documentation>
            Get whether to enable Java support.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getJavaEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getJavaEnabledByLocation"/>
         <documentation>
            Get whether to enable Java support. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getJavaLib">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getJavaLib"/>
         <documentation>
            Get the location of the java library directory
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getJavaLibByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getJavaLibByLocation"/>
         <documentation>
            Get the location of the java library directory This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getJavaMaxConns">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getJavaMaxConns"/>
         <documentation>
            Get the maximum number of Java threads
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getJavaMaxConnsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getJavaMaxConnsByLocation"/>
         <documentation>
            Get the maximum number of Java threads This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getJavaSessionAge">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getJavaSessionAge"/>
         <documentation>
            Get the default maximum age of Java session persistence
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getJavaSessionAgeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getJavaSessionAgeByLocation"/>
         <documentation>
            Get the default maximum age of Java session persistence This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getListenQueueSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getListenQueueSize"/>
         <documentation>
            Get the size of the listen queue for managing incoming connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getListenQueueSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getListenQueueSizeByLocation"/>
         <documentation>
            Get the size of the listen queue for managing incoming connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLogFlushFlushTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getLogFlushFlushTime"/>
         <documentation>
            Get the length of time to wait before flushing the request log files for each virtual server, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getLogFlushFlushTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getLogFlushFlushTimeByLocation"/>
         <documentation>
            Get the length of time to wait before flushing the request log files for each virtual server, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLogInterval">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getLogInterval"/>
         <documentation>
            Get the length of time between log messages for log intensive features e.g. SLM, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getLogIntervalByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getLogIntervalByLocation"/>
         <documentation>
            Get the length of time between log messages for log intensive features e.g. SLM, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLogRate">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getLogRate"/>
         <documentation>
            Get is the maximum number of connection errors logged per second.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getLogRateByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getLogRateByLocation"/>
         <documentation>
            Get is the maximum number of connection errors logged per second. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLogReopenTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getLogReopenTime"/>
         <documentation>
            Get the length of time to wait before re-opening request log files, to handle log file rotation, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getLogReopenTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getLogReopenTimeByLocation"/>
         <documentation>
            Get the length of time to wait before re-opening request log files, to handle log file rotation, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLoginBanner">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getLoginBanner"/>
         <documentation>
            Get the banner text to be shown on the Admin Server login page and before logging in to appliance SSH servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getLoginDelay">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getLoginDelay"/>
         <documentation>
            Get the number of seconds before another login attempt can be made after a failed attempt.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getMaxAccepting">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMaxAccepting"/>
         <documentation>
            Get how many traffic manager child processes accept new connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getMaxAcceptingByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMaxAcceptingByLocation"/>
         <documentation>
            Get how many traffic manager child processes accept new connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxIdleConnections">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMaxIdleConnections"/>
         <documentation>
            Get the maximum number of unused HTTP keepalive connections to all nodes that should maintained for re-use.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getMaxIdleConnectionsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMaxIdleConnectionsByLocation"/>
         <documentation>
            Get the maximum number of unused HTTP keepalive connections to all nodes that should maintained for re-use. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxKeepalives">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMaxKeepalives"/>
         <documentation>
            getMaxKeepalives is deprecated, please use getMaxIdleConnections instead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getMaxKeepalivesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMaxKeepalivesByLocation"/>
         <documentation>
            getMaxKeepalives is deprecated, please use getMaxIdleConnections instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMaxLoginAttempts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMaxLoginAttempts"/>
         <documentation>
            Get the number of sequential failed login attempts that will cause a user account to be suspended.  Setting this to 0 disables this feature.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getMaxLoginExternal">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMaxLoginExternal"/>
         <documentation>
            Get whether or not usernames blocked due to the max_login_attempts limit should also be blocked from authentication against external services (such as LDAP and RADIUS).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getMaxLoginSuspensionTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMaxLoginSuspensionTime"/>
         <documentation>
            Get number of minutes to suspend users who have exceeded the max_login_attempts limit.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getMaxRetries">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMaxRetries"/>
         <documentation>
            This method is now obsolete and is replaced by Pool.getNodeConnectionAttempts.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getMaximumFDCount">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMaximumFDCount"/>
         <documentation>
            Get the maximum number of file descriptors that your traffic manager will allocate
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getMaximumFDCountByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMaximumFDCountByLocation"/>
         <documentation>
            Get the maximum number of file descriptors that your traffic manager will allocate This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMinAlphaChars">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMinAlphaChars"/>
         <documentation>
            Get the minimum number of alphabetic characters in a password.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getMinNumericChars">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMinNumericChars"/>
         <documentation>
            Get the minimum number of numeric characters in a password.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getMinPasswordLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMinPasswordLength"/>
         <documentation>
            Get the minimum number of characters a password must contain.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getMinSpecialChars">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMinSpecialChars"/>
         <documentation>
            Get the minimum number of special characters in a password.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getMinUppercaseChars">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMinUppercaseChars"/>
         <documentation>
            Get the minimum number of uppercase characters in a password.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getMonitorNumNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMonitorNumNodes"/>
         <documentation>
            Get the maximum number of nodes that can be monitored.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getMonitorNumNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMonitorNumNodesByLocation"/>
         <documentation>
            Get the maximum number of nodes that can be monitored. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMultipleAccept">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMultipleAccept"/>
         <documentation>
            Get whether your traffic manager should try and read multiple new connections each time a new client connects.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getMultipleAcceptByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getMultipleAcceptByLocation"/>
         <documentation>
            Get whether your traffic manager should try and read multiple new connections each time a new client connects. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNodeConnectionAttempts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getNodeConnectionAttempts"/>
         <documentation>
            This method is now obsolete and is replaced by Pool.getNodeConnectionAttempts.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getNodeFailTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getNodeFailTime"/>
         <documentation>
            This method is now obsolete and is replaced by Pool.getNodeFailTime.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getOCSPCacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getOCSPCacheSize"/>
         <documentation>
            Get the maximum number of cached client certificate OCSP results stored.  This cache is used to speed up OCSP checks against client certificates by caching results.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getOCSPCacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getOCSPCacheSizeByLocation"/>
         <documentation>
            Get the maximum number of cached client certificate OCSP results stored.  This cache is used to speed up OCSP checks against client certificates by caching results. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getPasswordChangesPerDay">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getPasswordChangesPerDay"/>
         <documentation>
            Get the maximum number of times a password can be changed every 24 hours.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getPasswordReuseAfter">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getPasswordReuseAfter"/>
         <documentation>
            Get the number of times a password must have been changed before it can be reused.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getPostLoginBanner">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getPostLoginBanner"/>
         <documentation>
            Get the banner text to be displayed on the appliance console after login.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getProtectionConncountSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getProtectionConncountSize"/>
         <documentation>
            Get the amount of shared memory reserved for an inter-process table of combined connection counts used by Service Protection classes (specified as an absolute size, eg 20MB).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getProtectionConncountSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getProtectionConncountSizeByLocation"/>
         <documentation>
            Get the amount of shared memory reserved for an inter-process table of combined connection counts used by Service Protection classes (specified as an absolute size, eg 20MB). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRESTAuthTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getRESTAuthTimeout"/>
         <documentation>
            Get REST authentication timeout.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getRESTEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getRESTEnabled"/>
         <documentation>
            Get whether REST service is enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getRESTMaxHTTPHeaderLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getRESTMaxHTTPHeaderLength"/>
         <documentation>
            Get the maximum allowed length in bytes of a HTTP request's headers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getRESTReplicateAbsoluteTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getRESTReplicateAbsoluteTime"/>
         <documentation>
            Get Absolute time before configuration replication via REST.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getRESTReplicateLullTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getRESTReplicateLullTime"/>
         <documentation>
            Get Lull time for configuration replication via REST.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getRESTReplicateTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getRESTReplicateTimeout"/>
         <documentation>
            Get the configuration replication timeout via REST.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getRateClassLimit">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getRateClassLimit"/>
         <documentation>
            Get the maximum number of Rate classes allowed.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getRateClassLimitByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getRateClassLimitByLocation"/>
         <documentation>
            Get the maximum number of Rate classes allowed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRecentConns">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getRecentConns"/>
         <documentation>
            Get the details of how many recently closed connections each traffic manager process should save for use with the Connections page.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getRecentConnsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getRecentConnsByLocation"/>
         <documentation>
            Get the details of how many recently closed connections each traffic manager process should save for use with the Connections page. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRecentConnsRetainTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getRecentConnsRetainTime"/>
         <documentation>
            Get for how long a snapshot should be retained on the Connections page.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getRecentConnsRetainTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getRecentConnsRetainTimeByLocation"/>
         <documentation>
            Get for how long a snapshot should be retained on the Connections page. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRecentConnsSnapshotSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getRecentConnsSnapshotSize"/>
         <documentation>
            Get the maximum number of connections each traffic manager process should show for a snapshot on the Connections page.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getRecentConnsSnapshotSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getRecentConnsSnapshotSizeByLocation"/>
         <documentation>
            Get the maximum number of connections each traffic manager process should show for a snapshot on the Connections page. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSLMClassLimit">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSLMClassLimit"/>
         <documentation>
            Get the maximum number of SLM classes allowed.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSLMClassLimitByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSLMClassLimitByLocation"/>
         <documentation>
            Get the maximum number of SLM classes allowed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSNMPUserCounters">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSNMPUserCounters"/>
         <documentation>
            Get the number of user defined SNMP counters (this single parameter dictates the numbers of both 32- and 64-bit user counters - there is always the same number of counters of each type).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSNMPUserCountersByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSNMPUserCountersByLocation"/>
         <documentation>
            Get the number of user defined SNMP counters (this single parameter dictates the numbers of both 32- and 64-bit user counters - there is always the same number of counters of each type). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSL3AllowRehandshake">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSL3AllowRehandshake"/>
         <documentation>
            Get whether SSL / TLS re-handshakes are supported.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSL3AllowRehandshakeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSL3AllowRehandshakeByLocation"/>
         <documentation>
            Get whether SSL / TLS re-handshakes are supported. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSL3Ciphers">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSL3Ciphers"/>
         <documentation>
            Get the list of configured SSL ciphers (available ciphers can be displayed using the command $ZEUSHOME/zxtm/bin/zeus.zxtm -s).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSL3CiphersByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSL3CiphersByLocation"/>
         <documentation>
            Get the list of configured SSL ciphers (available ciphers can be displayed using the command $ZEUSHOME/zxtm/bin/zeus.zxtm -s). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSL3DiffieHellmanKeyLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSL3DiffieHellmanKeyLength"/>
         <documentation>
            Get the number of bits to use for Diffie-Hellman keys
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSL3DiffieHellmanKeyLengthByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSL3DiffieHellmanKeyLengthByLocation"/>
         <documentation>
            Get the number of bits to use for Diffie-Hellman keys This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSL3MinRehandshakeInterval">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSL3MinRehandshakeInterval"/>
         <documentation>
            Get the minimum time interval (in milliseconds) between handshakes on a single SSL3/TLS connection.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLCRLMemSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLCRLMemSize"/>
         <documentation>
            Get the size of the CRL shared memory.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLCRLMemSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLCRLMemSizeByLocation"/>
         <documentation>
            Get the size of the CRL shared memory. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLDFailureCount">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLDFailureCount"/>
         <documentation>
            getSSLDFailureCount is deprecated, please use getSSLHardwareFailureCount instead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLDFailureCountByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLDFailureCountByLocation"/>
         <documentation>
            getSSLDFailureCount is deprecated, please use getSSLHardwareFailureCount instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLDPKCS11Lib">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLDPKCS11Lib"/>
         <documentation>
            getSSLDPKCS11Lib is deprecated, please use getSSLHardwarePKCS11Lib instead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLDPKCS11LibByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLDPKCS11LibByLocation"/>
         <documentation>
            getSSLDPKCS11Lib is deprecated, please use getSSLHardwarePKCS11Lib instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLHardwareAccelerator">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLHardwareAccelerator"/>
         <documentation>
            Get whether your traffic manager should always attempt to use SSL hardware.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLHardwareAcceleratorByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLHardwareAcceleratorByLocation"/>
         <documentation>
            Get whether your traffic manager should always attempt to use SSL hardware. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLHardwareFailureCount">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLHardwareFailureCount"/>
         <documentation>
            Get the number of consecutive failures from the SSL hardware that will be tolerated before your traffic manager tries to log in again.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLHardwareFailureCountByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLHardwareFailureCountByLocation"/>
         <documentation>
            Get the number of consecutive failures from the SSL hardware that will be tolerated before your traffic manager tries to log in again. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLHardwarePKCS11Lib">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLHardwarePKCS11Lib"/>
         <documentation>
            Get the location of the PKCS#11 library supplied by your hardware vendor.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLHardwarePKCS11LibByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLHardwarePKCS11LibByLocation"/>
         <documentation>
            Get the location of the PKCS#11 library supplied by your hardware vendor. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLHardwarePKCS11SlotLabel">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLHardwarePKCS11SlotLabel"/>
         <documentation>
            Get the label of the SSL hardware slot to use.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLHardwarePKCS11SlotLabelByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLHardwarePKCS11SlotLabelByLocation"/>
         <documentation>
            Get the label of the SSL hardware slot to use. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLHardwarePKCS11SlotType">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLHardwarePKCS11SlotType"/>
         <documentation>
            Get the type of PKCS11 slot to use. Only used for PKCS11.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLHardwarePKCS11SlotTypeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLHardwarePKCS11SlotTypeByLocation"/>
         <documentation>
            Get the type of PKCS11 slot to use. Only used for PKCS11. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLHardwareType">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLHardwareType"/>
         <documentation>
            Get the device driver library name.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLHardwareTypeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLHardwareTypeByLocation"/>
         <documentation>
            Get the device driver library name. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLInsertExtraFragment">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLInsertExtraFragment"/>
         <documentation>
            Get whether SSL3 and TLS1 use one byte fragments
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLInsertExtraFragmentByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLInsertExtraFragmentByLocation"/>
         <documentation>
            Get whether SSL3 and TLS1 use one byte fragments This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLMaxHandshakeMessageSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLMaxHandshakeMessageSize"/>
         <documentation>
            Get the maximum acceptable size (in bytes) a SSL handshake message is permitted to be.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLMaxHandshakeMessageSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLMaxHandshakeMessageSizeByLocation"/>
         <documentation>
            Get the maximum acceptable size (in bytes) a SSL handshake message is permitted to be. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLOCSPStaplingDefaultRefreshInterval">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLOCSPStaplingDefaultRefreshInterval"/>
         <documentation>
            Get how long to wait before refreshing requests on behalf of the store of certificate status responses used by OCSP stapling, if we don't have an up-to-date OCSP response.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLOCSPStaplingDefaultRefreshIntervalByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLOCSPStaplingDefaultRefreshIntervalByLocation"/>
         <documentation>
            Get how long to wait before refreshing requests on behalf of the store of certificate status responses used by OCSP stapling, if we don't have an up-to-date OCSP response. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLOCSPStaplingMemSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLOCSPStaplingMemSize"/>
         <documentation>
            Get the size of the OCSP stapling response shared memory.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLOCSPStaplingMemSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLOCSPStaplingMemSizeByLocation"/>
         <documentation>
            Get the size of the OCSP stapling response shared memory. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLPreventTimingSideChannels">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLPreventTimingSideChannels"/>
         <documentation>
            Get whether SSL3 and TLS will take performance degrading steps to prevent exposing timing side-channels.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLPreventTimingSideChannelsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLPreventTimingSideChannelsByLocation"/>
         <documentation>
            Get whether SSL3 and TLS will take performance degrading steps to prevent exposing timing side-channels. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLSessionCacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLSessionCacheSize"/>
         <documentation>
            Get the maximum number of entries in the SSL session cache. This is used to provide persistence based on SSL session IDs.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLSessionCacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLSessionCacheSizeByLocation"/>
         <documentation>
            Get the maximum number of entries in the SSL session cache. This is used to provide persistence based on SSL session IDs. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLSessionIDCacheExpiryTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLSessionIDCacheExpiryTime"/>
         <documentation>
            Get the length of time that SSL session IDs are stored, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLSessionIDCacheExpiryTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLSessionIDCacheExpiryTimeByLocation"/>
         <documentation>
            Get the length of time that SSL session IDs are stored, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLSessionIDCacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLSessionIDCacheSize"/>
         <documentation>
            Get the number of entries in the SSL session ID cache.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLSessionIDCacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLSessionIDCacheSizeByLocation"/>
         <documentation>
            Get the number of entries in the SSL session ID cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLSupportSSL2">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLSupportSSL2"/>
         <documentation>
            Get whether SSLv2 support is enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLSupportSSL2ByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLSupportSSL2ByLocation"/>
         <documentation>
            Get whether SSLv2 support is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLSupportSSL3">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLSupportSSL3"/>
         <documentation>
            Get whether SSLv3 support is enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLSupportSSL3ByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLSupportSSL3ByLocation"/>
         <documentation>
            Get whether SSLv3 support is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLSupportTLS1">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLSupportTLS1"/>
         <documentation>
            Get whether TLSv1 support is enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLSupportTLS11">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLSupportTLS11"/>
         <documentation>
            Get whether TLSv1.1 support is enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSSLSupportTLS11ByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLSupportTLS11ByLocation"/>
         <documentation>
            Get whether TLSv1.1 support is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSSLSupportTLS1ByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSSLSupportTLS1ByLocation"/>
         <documentation>
            Get whether TLSv1 support is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSharedPoolSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSharedPoolSize"/>
         <documentation>
            Get is the size of shared memory pool to be used for shared storage across worker processes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSharedPoolSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSharedPoolSizeByLocation"/>
         <documentation>
            Get is the size of shared memory pool to be used for shared storage across worker processes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSoapIdleMinutes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSoapIdleMinutes"/>
         <documentation>
            Get the number of minutes the SOAP server remain idle before exiting
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSoapIdleMinutesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSoapIdleMinutesByLocation"/>
         <documentation>
            Get the number of minutes the SOAP server remain idle before exiting This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSocketOptimizations">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSocketOptimizations"/>
         <documentation>
            Get whether potential network socket optimisations should be used.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSocketOptimizationsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSocketOptimizationsByLocation"/>
         <documentation>
            Get whether potential network socket optimisations should be used. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSsldAccel">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSsldAccel"/>
         <documentation>
            getSsldAccel is deprecated, please use getSSLHardwareAccelerator instead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSsldAccelByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSsldAccelByLocation"/>
         <documentation>
            getSsldAccel is deprecated, please use getSSLHardwareAccelerator instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSsldLibrary">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSsldLibrary"/>
         <documentation>
            getSsldLibrary is deprecated, please use getSSLHardwareType instead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSsldLibraryByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSsldLibraryByLocation"/>
         <documentation>
            getSsldLibrary is deprecated, please use getSSLHardwareType instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getStateSyncTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getStateSyncTime"/>
         <documentation>
            Get how often the cache state is propagated to other traffic managers in the cluster, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getStateSyncTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getStateSyncTimeByLocation"/>
         <documentation>
            Get how often the cache state is propagated to other traffic managers in the cluster, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getStateSyncTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getStateSyncTimeout"/>
         <documentation>
            Get the timeout for state propagation between cluster members, in seconds
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getStateSyncTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getStateSyncTimeoutByLocation"/>
         <documentation>
            Get the timeout for state propagation between cluster members, in seconds This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSystemReadBufferSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSystemReadBufferSize"/>
         <documentation>
            Get the size of the operating system's read buffer, in bytes (0 means use the system default).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSystemReadBufferSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSystemReadBufferSizeByLocation"/>
         <documentation>
            Get the size of the operating system's read buffer, in bytes (0 means use the system default). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSystemWriteBufferSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSystemWriteBufferSize"/>
         <documentation>
            Get the size of the operating system's write buffer, in bytes (0 means use the system default).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getSystemWriteBufferSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getSystemWriteBufferSizeByLocation"/>
         <documentation>
            Get the size of the operating system's write buffer, in bytes (0 means use the system default). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getTrackUnknownUsers">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrackUnknownUsers"/>
         <documentation>
            Get whether to remember past login attempts from usernames that are not known to exist (should be No for an Admin Server accessible from the public Internet).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getTrafficIPGroupLimit">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficIPGroupLimit"/>
         <documentation>
            Get the maximum number of Traffic IP Groups allowed.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getTrafficIPGroupLimitByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficIPGroupLimitByLocation"/>
         <documentation>
            Get the maximum number of Traffic IP Groups allowed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getTrafficScriptMemoryWarning">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficScriptMemoryWarning"/>
         <documentation>
            Get the amount of buffered network data a TrafficScript rule can buffer before a warning is logged, in bytes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getTrafficScriptMemoryWarningByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficScriptMemoryWarningByLocation"/>
         <documentation>
            Get the amount of buffered network data a TrafficScript rule can buffer before a warning is logged, in bytes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getTrafficscriptArrayElements">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficscriptArrayElements"/>
         <documentation>
            Get the number of array elements that can be stored before additional memory is allocated.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getTrafficscriptArrayElementsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficscriptArrayElementsByLocation"/>
         <documentation>
            Get the number of array elements that can be stored before additional memory is allocated. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getTrafficscriptDataLocalSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficscriptDataLocalSize"/>
         <documentation>
            Get the maximum size of the TrafficScript local data pool (specified as a percentage of system RAM, e.g. '5%', or an absolute size, e.g. 200MB)
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getTrafficscriptDataLocalSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficscriptDataLocalSizeByLocation"/>
         <documentation>
            Get the maximum size of the TrafficScript local data pool (specified as a percentage of system RAM, e.g. '5%', or an absolute size, e.g. 200MB) This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getTrafficscriptDataSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficscriptDataSize"/>
         <documentation>
            Get the maximum size of the TrafficScript shared data pool (specified as a percentage of system RAM, e.g. '5%', or an absolute size, e.g. 200MB)
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getTrafficscriptDataSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficscriptDataSizeByLocation"/>
         <documentation>
            Get the maximum size of the TrafficScript shared data pool (specified as a percentage of system RAM, e.g. '5%', or an absolute size, e.g. 200MB) This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getTrafficscriptMaxInstr">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficscriptMaxInstr"/>
         <documentation>
            Get the maximum number of instructions a TrafficScript rule will run before being aborted.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getTrafficscriptMaxInstrByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficscriptMaxInstrByLocation"/>
         <documentation>
            Get the maximum number of instructions a TrafficScript rule will run before being aborted. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getTrafficscriptRegexCacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficscriptRegexCacheSize"/>
         <documentation>
            Get the number of regular expressions to cache
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getTrafficscriptRegexCacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficscriptRegexCacheSizeByLocation"/>
         <documentation>
            Get the number of regular expressions to cache This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getTrafficscriptRegexMatchLimit">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficscriptRegexMatchLimit"/>
         <documentation>
            Get the maximum number of ways TrafficScript will attempt to match a regular expression at each position in the subject string, before it aborts the rule and reports a TrafficScript error.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getTrafficscriptRegexMatchLimitByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficscriptRegexMatchLimitByLocation"/>
         <documentation>
            Get the maximum number of ways TrafficScript will attempt to match a regular expression at each position in the subject string, before it aborts the rule and reports a TrafficScript error. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getTrafficscriptRegexMatchWarnPerc">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficscriptRegexMatchWarnPerc"/>
         <documentation>
            Get the percentage of trafficscript!regex_match_limit at which TrafficScript reports a performance warning.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getTrafficscriptRegexMatchWarnPercByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficscriptRegexMatchWarnPercByLocation"/>
         <documentation>
            Get the percentage of trafficscript!regex_match_limit at which TrafficScript reports a performance warning. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getTrafficscriptVariablePoolUse">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficscriptVariablePoolUse"/>
         <documentation>
            Get whether the 'pool.use' and 'pool.select' TrafficScript functions accept variables as well as literal strings.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getTrafficscriptVariablePoolUseByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getTrafficscriptVariablePoolUseByLocation"/>
         <documentation>
            Get whether the 'pool.use' and 'pool.select' TrafficScript functions accept variables as well as literal strings. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getUipageBanner">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getUipageBanner"/>
         <documentation>
            Get the banner text to be displayed on all Admin Server pages.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getUniversalSessionCacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getUniversalSessionCacheSize"/>
         <documentation>
            Get the maximum number of entries in the universal session cache.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getUniversalSessionCacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getUniversalSessionCacheSizeByLocation"/>
         <documentation>
            Get the maximum number of entries in the universal session cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWebcacheAvgPathLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getWebcacheAvgPathLength"/>
         <documentation>
            Get the estimated average length of the path for resources to be cached
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getWebcacheAvgPathLengthByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getWebcacheAvgPathLengthByLocation"/>
         <documentation>
            Get the estimated average length of the path for resources to be cached This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWebcacheDisk">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getWebcacheDisk"/>
         <documentation>
            Get whether the webcache is stored on disk
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getWebcacheDiskByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getWebcacheDiskByLocation"/>
         <documentation>
            Get whether the webcache is stored on disk This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWebcacheDiskDir">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getWebcacheDiskDir"/>
         <documentation>
            Get the disk cache location
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getWebcacheDiskDirByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getWebcacheDiskDirByLocation"/>
         <documentation>
            Get the disk cache location This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWebcacheMaxFileNum">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getWebcacheMaxFileNum"/>
         <documentation>
            Get the maximum number of files that can be stored in the web cache
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getWebcacheMaxFileNumByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getWebcacheMaxFileNumByLocation"/>
         <documentation>
            Get the maximum number of files that can be stored in the web cache This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWebcacheMaxFileSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getWebcacheMaxFileSize"/>
         <documentation>
            Get the largest size of a cacheable object, relative to the total cache size, e.g. '2%', or as an absolute size in kB (default), MB or GB, e.g. '20MB'.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getWebcacheMaxFileSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getWebcacheMaxFileSizeByLocation"/>
         <documentation>
            Get the largest size of a cacheable object, relative to the total cache size, e.g. '2%', or as an absolute size in kB (default), MB or GB, e.g. '20MB'. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWebcacheMaxPathLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getWebcacheMaxPathLength"/>
         <documentation>
            Get the maximum length of the path for the resource being cached
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getWebcacheMaxPathLengthByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getWebcacheMaxPathLengthByLocation"/>
         <documentation>
            Get the maximum length of the path for the resource being cached This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWebcacheNormalizeQuery">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getWebcacheNormalizeQuery"/>
         <documentation>
            Get whether the assignment sub-strings in the parameter string are put into alphabetical order.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getWebcacheNormalizeQueryByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getWebcacheNormalizeQueryByLocation"/>
         <documentation>
            Get whether the assignment sub-strings in the parameter string are put into alphabetical order. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWebcacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getWebcacheSize"/>
         <documentation>
            Get the maximum size of the HTTP web page cache, (specified as a percentage of system RAM, e.g. '20%', or an absolute size, e.g. 200MB)
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getWebcacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getWebcacheSizeByLocation"/>
         <documentation>
            Get the maximum size of the HTTP web page cache, (specified as a percentage of system RAM, e.g. '20%', or an absolute size, e.g. 200MB) This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getWebcacheVerbose">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getWebcacheVerbose"/>
         <documentation>
            Get whether an X-Cache-Info header to show cacheability should be added.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getWebcacheVerboseByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/getWebcacheVerboseByLocation"/>
         <documentation>
            Get whether an X-Cache-Info header to show cacheability should be added. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeApplianceReturnPathRoutes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/removeApplianceReturnPathRoutes"/>
         <documentation>
            Remove a set of return path routes (MAC/IP mappings) from the configuration.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeApplianceReturnPathRoutesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/removeApplianceReturnPathRoutesByLocation"/>
         <documentation>
            Remove a set of return path routes (MAC/IP mappings) from the configuration. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeFlipperFrontendCheckAddresses">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/removeFlipperFrontendCheckAddresses"/>
         <documentation>
            Remove IP addresses from the list that should be used to check front-end connectivity
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeFlipperFrontendCheckAddressesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/removeFlipperFrontendCheckAddressesByLocation"/>
         <documentation>
            Remove IP addresses from the list that should be used to check front-end connectivity This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setASPSessionCacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setASPSessionCacheSize"/>
         <documentation>
            Set the maximum number of entries in the ASP session cache.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setASPSessionCacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setASPSessionCacheSizeByLocation"/>
         <documentation>
            Set the maximum number of entries in the ASP session cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAcceptingDelay">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAcceptingDelay"/>
         <documentation>
            Set how often each traffic manager child process checks whether it should be accepting new connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAcceptingDelayByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAcceptingDelayByLocation"/>
         <documentation>
            Set how often each traffic manager child process checks whether it should be accepting new connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAdminAllowRehandshake">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAdminAllowRehandshake"/>
         <documentation>
            Set whether SSL / TLS re-handshakes are supported.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAdminDiffieHellmanKeyLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAdminDiffieHellmanKeyLength"/>
         <documentation>
            Set the number of bits to use for Diffie-Hellman keys
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAdminInsertExtraFragment">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAdminInsertExtraFragment"/>
         <documentation>
            Set whether admin server SSL3 and TLS1 use one byte fragments
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAdminMinRehandshakeInterval">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAdminMinRehandshakeInterval"/>
         <documentation>
            Set the minimum time interval (in milliseconds) between handshakes on a single SSL3/TLS connection.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAdminSSLCiphers">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAdminSSLCiphers"/>
         <documentation>
            Set the list of configured SSL ciphers for admin server and internal connections (available ciphers can be displayed using the command $ZEUSHOME/zxtm/bin/zeus.zxtm -s).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAdminSSLMaxHandshakeMessageSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAdminSSLMaxHandshakeMessageSize"/>
         <documentation>
            Set the maximum acceptable size (in bytes) a SSL handshake message is permitted to be for admin and internal connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAdminSSLPreventTimingSideChannels">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAdminSSLPreventTimingSideChannels"/>
         <documentation>
            Set whether SSL3 and TLS used by the admin server and internal connections will take performance degrading steps to prevent exposing timing side-channels.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAdminSSLSupportTLS11">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAdminSSLSupportTLS11"/>
         <documentation>
            Set whether TLSv1.1 support is enabled for admin server and internal connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAdminSupportSSL2">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAdminSupportSSL2"/>
         <documentation>
            Set whether SSLv2 support is enabled for admin server and internal connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAdminSupportSSL3">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAdminSupportSSL3"/>
         <documentation>
            Set whether SSLv3 support is enabled for admin server and internal connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAdminSupportTLS1">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAdminSupportTLS1"/>
         <documentation>
            Set whether TLSv1 support is enabled for admin server and internal connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAlertEmailInterval">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAlertEmailInterval"/>
         <documentation>
            Set the length of time between alert emails, in seconds. Several alert messages will be stored up and sent in one email.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAlertEmailIntervalByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAlertEmailIntervalByLocation"/>
         <documentation>
            Set the length of time between alert emails, in seconds. Several alert messages will be stored up and sent in one email. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAlertEmailMaxAttempts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAlertEmailMaxAttempts"/>
         <documentation>
            Set the number of times to attempt sending an email before giving up.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAlertEmailMaxAttemptsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAlertEmailMaxAttemptsByLocation"/>
         <documentation>
            Set the number of times to attempt sending an email before giving up. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAllowConsecutiveChars">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAllowConsecutiveChars"/>
         <documentation>
            Set whether the same character can appear consecutively in passwords.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setApplianceReturnPathRoutes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setApplianceReturnPathRoutes"/>
         <documentation>
            Replace the configuration with the specified set of return path routes (MAC/IP mappings).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setApplianceReturnPathRoutesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setApplianceReturnPathRoutesByLocation"/>
         <documentation>
            Replace the configuration with the specified set of return path routes (MAC/IP mappings). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setApplianceReturnPathRoutingEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setApplianceReturnPathRoutingEnabled"/>
         <documentation>
            Set whether return path routing is enabled
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setApplianceReturnPathRoutingEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setApplianceReturnPathRoutingEnabledByLocation"/>
         <documentation>
            Set whether return path routing is enabled This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAptimizerMaxOriginalContentBufferSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAptimizerMaxOriginalContentBufferSize"/>
         <documentation>
            Set the maximum size of original content buffer for content sent to Aptimize.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAptimizerWatchdogInterval">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAptimizerWatchdogInterval"/>
         <documentation>
            Set How long (in seconds) the Aptimizer watchdog mechanism should keep count of crashes for.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAptimizerWatchdogLimit">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAptimizerWatchdogLimit"/>
         <documentation>
            Set the maximum number of times the Aptimizer sub-process will be restarted.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscalerVerbose">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAutoscalerVerbose"/>
         <documentation>
            Set detailed logging of autoscaler status and actions
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setAutoscalerVerboseByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setAutoscalerVerboseByLocation"/>
         <documentation>
            Set detailed logging of autoscaler status and actions This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setBackendKeepaliveTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setBackendKeepaliveTimeout"/>
         <documentation>
            setBackendKeepaliveTimeout is deprecated, please use setIdleConnectionTimeout instead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setBackendKeepaliveTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setBackendKeepaliveTimeoutByLocation"/>
         <documentation>
            setBackendKeepaliveTimeout is deprecated, please use setIdleConnectionTimeout instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setBandwidthSharing">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setBandwidthSharing"/>
         <documentation>
            This method is now obsolete and is replaced by Catalog.Bandwidth.setSharing.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setBannerAccept">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setBannerAccept"/>
         <documentation>
            Set whether or not users must explicitly agree to the displayed login_banner text before logging in to the Admin Server.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setBootloaderPassword">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setBootloaderPassword"/>
         <documentation>
            Set the lists of nodes for each of the named pools.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setChunkSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setChunkSize"/>
         <documentation>
            Set the default chunk size for reading and writing data, in bytes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setChunkSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setChunkSizeByLocation"/>
         <documentation>
            Set the default chunk size for reading and writing data, in bytes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setClientFirstOpt">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setClientFirstOpt"/>
         <documentation>
            Set whether client-first network socket optimisations should be used.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setClientFirstOptByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setClientFirstOptByLocation"/>
         <documentation>
            Set whether client-first network socket optimisations should be used. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setControlAllowHosts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setControlAllowHosts"/>
         <documentation>
            Set the hosts that are allowed to contact the internal administration port on each traffic manager.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setControlAllowHostsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setControlAllowHostsByLocation"/>
         <documentation>
            Set the hosts that are allowed to contact the internal administration port on each traffic manager. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setControlCanUpdateDefault">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setControlCanUpdateDefault"/>
         <documentation>
            Set the value of the control!canupdate key for new cluster members.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDNSCacheExpiryTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setDNSCacheExpiryTime"/>
         <documentation>
            This method should be replaced by setDNSCacheMaxTTL/setDNSCacheMinTTL.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDNSCacheExpiryTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setDNSCacheExpiryTimeByLocation"/>
         <documentation>
            This method should be replaced by setDNSCacheMaxTTL/setDNSCacheMinTTL. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDNSCacheMaxTTL">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setDNSCacheMaxTTL"/>
         <documentation>
            Set the maximum time entries are stored in the DNS cache for, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDNSCacheMaxTTLByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setDNSCacheMaxTTLByLocation"/>
         <documentation>
            Set the maximum time entries are stored in the DNS cache for, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDNSCacheMinTTL">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setDNSCacheMinTTL"/>
         <documentation>
            Set the minimum time entries are stored in the DNS cache for, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDNSCacheMinTTLByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setDNSCacheMinTTLByLocation"/>
         <documentation>
            Set the minimum time entries are stored in the DNS cache for, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDNSCacheNegativeExpiryTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setDNSCacheNegativeExpiryTime"/>
         <documentation>
            Set the time failed lookups are stored in the DNS cache for, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDNSCacheNegativeExpiryTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setDNSCacheNegativeExpiryTimeByLocation"/>
         <documentation>
            Set the time failed lookups are stored in the DNS cache for, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDNSCacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setDNSCacheSize"/>
         <documentation>
            Set the maximum number of entries in the DNS cache.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDNSCacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setDNSCacheSizeByLocation"/>
         <documentation>
            Set the maximum number of entries in the DNS cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDNSTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setDNSTimeout"/>
         <documentation>
            Set the timeout for receiving a response from a DNS Server, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDNSTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setDNSTimeoutByLocation"/>
         <documentation>
            Set the timeout for receiving a response from a DNS Server, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setDeadTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setDeadTime"/>
         <documentation>
            This method is now obsolete and is replaced by Pool.setNodeFailTime.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setEC2AccessKeyID">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setEC2AccessKeyID"/>
         <documentation>
            Set the Access Key ID used for interacting with the EC2 API.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setEC2AccessKeyIDByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setEC2AccessKeyIDByLocation"/>
         <documentation>
            Set the Access Key ID used for interacting with the EC2 API. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setEC2SecretAccessKey">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setEC2SecretAccessKey"/>
         <documentation>
            Set the Secret Access Key used for interacting with the EC2 API.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setEC2SecretAccessKeyByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setEC2SecretAccessKeyByLocation"/>
         <documentation>
            Set the Secret Access Key used for interacting with the EC2 API. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setErrorLevel">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setErrorLevel"/>
         <documentation>
            Set the minimum severity of events that should be logged to disk.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setErrorLevelByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setErrorLevelByLocation"/>
         <documentation>
            Set the minimum severity of events that should be logged to disk. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setErrorLogFile">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setErrorLogFile"/>
         <documentation>
            Set the filename that errors are logged to.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setErrorLogFileByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setErrorLogFileByLocation"/>
         <documentation>
            Set the filename that errors are logged to. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFTPDataBindLow">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFTPDataBindLow"/>
         <documentation>
            Set whether your traffic manager should permit use of FTP data connection source ports lower than 1024.  If 'No' your traffic manager can completely drop root privileges, if 'Yes' some or all privileges may be retained in order to bind to low ports.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFTPDataBindLowByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFTPDataBindLowByLocation"/>
         <documentation>
            Set whether your traffic manager should permit use of FTP data connection source ports lower than 1024.  If 'No' your traffic manager can completely drop root privileges, if 'Yes' some or all privileges may be retained in order to bind to low ports. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFipsEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFipsEnabled"/>
         <documentation>
            Set whether FIPS Mode is enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperArpCount">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperArpCount"/>
         <documentation>
            Set the number of ARP packets each traffic manager sends when an IP address is raised.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperArpCountByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperArpCountByLocation"/>
         <documentation>
            Set the number of ARP packets each traffic manager sends when an IP address is raised. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperAutofailback">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperAutofailback"/>
         <documentation>
            Set whether Traffic IPs should automatically failback to recovered machines.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperAutofailbackByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperAutofailbackByLocation"/>
         <documentation>
            Set whether Traffic IPs should automatically failback to recovered machines. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperFrontendCheckAddresses">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperFrontendCheckAddresses"/>
         <documentation>
            Set the IP addresses that should be used to check front-end connectivity.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperFrontendCheckAddressesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperFrontendCheckAddressesByLocation"/>
         <documentation>
            Set the IP addresses that should be used to check front-end connectivity. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperHeartbeatMethod">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperHeartbeatMethod"/>
         <documentation>
            Set the method used to exchange cluster heartbeat messages.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperHeartbeatMethodByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperHeartbeatMethodByLocation"/>
         <documentation>
            Set the method used to exchange cluster heartbeat messages. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperMonitorInterval">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperMonitorInterval"/>
         <documentation>
            Set how frequently (in milliseconds) each traffic manager checks and announces its connectivity.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperMonitorIntervalByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperMonitorIntervalByLocation"/>
         <documentation>
            Set how frequently (in milliseconds) each traffic manager checks and announces its connectivity. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperMonitorTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperMonitorTimeout"/>
         <documentation>
            Set how long (in seconds) each traffic manager waits for a response from its connectivity tests or from other traffic managers before registering a failure.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperMonitorTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperMonitorTimeoutByLocation"/>
         <documentation>
            Set how long (in seconds) each traffic manager waits for a response from its connectivity tests or from other traffic managers before registering a failure. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperMulticastAddress">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperMulticastAddress"/>
         <documentation>
            Set the multicast address and port used to announce connectivity (e.g. 239.100.1.1:9090).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperMulticastAddressByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperMulticastAddressByLocation"/>
         <documentation>
            Set the multicast address and port used to announce connectivity (e.g. 239.100.1.1:9090). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperUnicastPort">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperUnicastPort"/>
         <documentation>
            Set the unicast UDP port used to announce connectivity (e.g. 9090)
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperUnicastPortByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperUnicastPortByLocation"/>
         <documentation>
            Set the unicast UDP port used to announce connectivity (e.g. 9090) This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperUseBindip">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperUseBindip"/>
         <documentation>
            Set whether the heartbeat messages used for fault tolerance are only sent over the management network.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperUseBindipByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperUseBindipByLocation"/>
         <documentation>
            Set whether the heartbeat messages used for fault tolerance are only sent over the management network. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperVerbose">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperVerbose"/>
         <documentation>
            Set whether the traffic manager should logs all the connectivity tests.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setFlipperVerboseByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setFlipperVerboseByLocation"/>
         <documentation>
            Set whether the traffic manager should logs all the connectivity tests. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setGLBLoadChangeLimit">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setGLBLoadChangeLimit"/>
         <documentation>
            Set the maximum change per second to load.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setGLBLoadChangeLimitByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setGLBLoadChangeLimitByLocation"/>
         <documentation>
            Set the maximum change per second to load. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setGLBVerbose">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setGLBVerbose"/>
         <documentation>
            Set whether GSLB should log all DNS queries
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setGLBVerboseByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setGLBVerboseByLocation"/>
         <documentation>
            Set whether GSLB should log all DNS queries This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setHistoricalTrafficDays">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setHistoricalTrafficDays"/>
         <documentation>
            Set the length of time historical traffic information is kept for, in days (0=keep indefinitely).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setHistoricalTrafficDaysByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setHistoricalTrafficDaysByLocation"/>
         <documentation>
            Set the length of time historical traffic information is kept for, in days (0=keep indefinitely). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setIPSessionCacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setIPSessionCacheSize"/>
         <documentation>
            Set the maximum number of entries in the IP session cache.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setIPSessionCacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setIPSessionCacheSizeByLocation"/>
         <documentation>
            Set the maximum number of entries in the IP session cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setIdleConnectionTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setIdleConnectionTimeout"/>
         <documentation>
            Set how long unused HTTP keepalive connections should be kept before being discarded, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setIdleConnectionTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setIdleConnectionTimeoutByLocation"/>
         <documentation>
            Set how long unused HTTP keepalive connections should be kept before being discarded, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setJ2EESessionCacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setJ2EESessionCacheSize"/>
         <documentation>
            Set the maximum number of entries in the J2EE session cache.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setJ2EESessionCacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setJ2EESessionCacheSizeByLocation"/>
         <documentation>
            Set the maximum number of entries in the J2EE session cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setJavaClasspath">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setJavaClasspath"/>
         <documentation>
            Set extra Java CLASSPATH settings required for servlets.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setJavaClasspathByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setJavaClasspathByLocation"/>
         <documentation>
            Set extra Java CLASSPATH settings required for servlets. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setJavaCommand">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setJavaCommand"/>
         <documentation>
            Set the command (and arguments) used to start Java.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setJavaCommandByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setJavaCommandByLocation"/>
         <documentation>
            Set the command (and arguments) used to start Java. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setJavaEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setJavaEnabled"/>
         <documentation>
            Set whether to enable Java support.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setJavaEnabledByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setJavaEnabledByLocation"/>
         <documentation>
            Set whether to enable Java support. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setJavaLib">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setJavaLib"/>
         <documentation>
            Set the location of the java library directory
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setJavaLibByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setJavaLibByLocation"/>
         <documentation>
            Set the location of the java library directory This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setJavaMaxConns">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setJavaMaxConns"/>
         <documentation>
            Set the maximum number of Java threads
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setJavaMaxConnsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setJavaMaxConnsByLocation"/>
         <documentation>
            Set the maximum number of Java threads This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setJavaSessionAge">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setJavaSessionAge"/>
         <documentation>
            Set the default maximum age of Java session persistence
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setJavaSessionAgeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setJavaSessionAgeByLocation"/>
         <documentation>
            Set the default maximum age of Java session persistence This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setListenQueueSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setListenQueueSize"/>
         <documentation>
            Set the size of the listen queue for managing incoming connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setListenQueueSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setListenQueueSizeByLocation"/>
         <documentation>
            Set the size of the listen queue for managing incoming connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogFlushFlushTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setLogFlushFlushTime"/>
         <documentation>
            Set the length of time to wait before flushing the request log files for each virtual server, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogFlushFlushTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setLogFlushFlushTimeByLocation"/>
         <documentation>
            Set the length of time to wait before flushing the request log files for each virtual server, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogInterval">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setLogInterval"/>
         <documentation>
            Set the length of time between log messages for log intensive features e.g. SLM, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogIntervalByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setLogIntervalByLocation"/>
         <documentation>
            Set the length of time between log messages for log intensive features e.g. SLM, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogRate">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setLogRate"/>
         <documentation>
            Set is the maximum number of connection errors logged per second.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogRateByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setLogRateByLocation"/>
         <documentation>
            Set is the maximum number of connection errors logged per second. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogReopenTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setLogReopenTime"/>
         <documentation>
            Set the length of time to wait before re-opening request log files, to handle log file rotation, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLogReopenTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setLogReopenTimeByLocation"/>
         <documentation>
            Set the length of time to wait before re-opening request log files, to handle log file rotation, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLoginBanner">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setLoginBanner"/>
         <documentation>
            Set the banner text to be shown on the Admin Server login page and before logging in to appliance SSH servers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLoginDelay">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setLoginDelay"/>
         <documentation>
            Set the number of seconds before another login attempt can be made after a failed attempt.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxAccepting">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMaxAccepting"/>
         <documentation>
            Set how many traffic manager child processes accept new connections.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxAcceptingByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMaxAcceptingByLocation"/>
         <documentation>
            Set how many traffic manager child processes accept new connections. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxIdleConnections">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMaxIdleConnections"/>
         <documentation>
            Set the maximum number of unused HTTP keepalive connections to all nodes that should maintained for re-use.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxIdleConnectionsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMaxIdleConnectionsByLocation"/>
         <documentation>
            Set the maximum number of unused HTTP keepalive connections to all nodes that should maintained for re-use. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxKeepalives">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMaxKeepalives"/>
         <documentation>
            setMaxKeepalives is deprecated, please use setMaxIdleConnections instead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxKeepalivesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMaxKeepalivesByLocation"/>
         <documentation>
            setMaxKeepalives is deprecated, please use setMaxIdleConnections instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxLoginAttempts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMaxLoginAttempts"/>
         <documentation>
            Set the number of sequential failed login attempts that will cause a user account to be suspended.  Setting this to 0 disables this feature.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxLoginExternal">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMaxLoginExternal"/>
         <documentation>
            Set whether or not usernames blocked due to the max_login_attempts limit should also be blocked from authentication against external services (such as LDAP and RADIUS).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxLoginSuspensionTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMaxLoginSuspensionTime"/>
         <documentation>
            Set number of minutes to suspend users who have exceeded the max_login_attempts limit.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaxRetries">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMaxRetries"/>
         <documentation>
            This method is now obsolete and is replaced by Pool.setNodeConnectionAttempts.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaximumFDCount">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMaximumFDCount"/>
         <documentation>
            Set the maximum number of file descriptors that your traffic manager will allocate
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMaximumFDCountByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMaximumFDCountByLocation"/>
         <documentation>
            Set the maximum number of file descriptors that your traffic manager will allocate This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMinAlphaChars">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMinAlphaChars"/>
         <documentation>
            Set the minimum number of alphabetic characters in a password.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMinNumericChars">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMinNumericChars"/>
         <documentation>
            Set the minimum number of numeric characters in a password.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMinPasswordLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMinPasswordLength"/>
         <documentation>
            Set the minimum number of characters a password must contain.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMinSpecialChars">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMinSpecialChars"/>
         <documentation>
            Set the minimum number of special characters in a password.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMinUppercaseChars">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMinUppercaseChars"/>
         <documentation>
            Set the minimum number of uppercase characters in a password.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMonitorNumNodes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMonitorNumNodes"/>
         <documentation>
            Set the maximum number of nodes that can be monitored.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMonitorNumNodesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMonitorNumNodesByLocation"/>
         <documentation>
            Set the maximum number of nodes that can be monitored. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMultipleAccept">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMultipleAccept"/>
         <documentation>
            Set whether your traffic manager should try and read multiple new connections each time a new client connects.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMultipleAcceptByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setMultipleAcceptByLocation"/>
         <documentation>
            Set whether your traffic manager should try and read multiple new connections each time a new client connects. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNodeConnectionAttempts">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setNodeConnectionAttempts"/>
         <documentation>
            This method is now obsolete and is replaced by Pool.setNodeConnectionAttempts.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNodeFailTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setNodeFailTime"/>
         <documentation>
            This method is now obsolete and is replaced by Pool.setNodeFailTime.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setOCSPCacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setOCSPCacheSize"/>
         <documentation>
            Set the maximum number of cached client certificate OCSP results stored.  This cache is used to speed up OCSP checks against client certificates by caching results.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setOCSPCacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setOCSPCacheSizeByLocation"/>
         <documentation>
            Set the maximum number of cached client certificate OCSP results stored.  This cache is used to speed up OCSP checks against client certificates by caching results. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setPasswordChangesPerDay">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setPasswordChangesPerDay"/>
         <documentation>
            Set the maximum number of times a password can be changed every 24 hours.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setPasswordReuseAfter">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setPasswordReuseAfter"/>
         <documentation>
            Set the number of times a password must have been changed before it can be reused.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setPostLoginBanner">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setPostLoginBanner"/>
         <documentation>
            Set the banner text to be displayed on the appliance console after login.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setProtectionConncountSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setProtectionConncountSize"/>
         <documentation>
            Set the amount of shared memory reserved for an inter-process table of combined connection counts used by Service Protection classes (specified as an absolute size, eg 20MB).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setProtectionConncountSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setProtectionConncountSizeByLocation"/>
         <documentation>
            Set the amount of shared memory reserved for an inter-process table of combined connection counts used by Service Protection classes (specified as an absolute size, eg 20MB). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRESTAuthTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setRESTAuthTimeout"/>
         <documentation>
            Set REST authentication timeout.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRESTEnabled">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setRESTEnabled"/>
         <documentation>
            Set whether REST service is enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRESTMaxHTTPHeaderLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setRESTMaxHTTPHeaderLength"/>
         <documentation>
            Set the maximum allowed length in bytes of a HTTP request's headers.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRESTReplicateAbsoluteTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setRESTReplicateAbsoluteTime"/>
         <documentation>
            Set Absolute time before configuration replication via REST.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRESTReplicateLullTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setRESTReplicateLullTime"/>
         <documentation>
            Set Lull time for configuration replication via REST.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRESTReplicateTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setRESTReplicateTimeout"/>
         <documentation>
            Set the configuration replication timeout via REST.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRateClassLimit">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setRateClassLimit"/>
         <documentation>
            Set the maximum number of Rate classes allowed.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRateClassLimitByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setRateClassLimitByLocation"/>
         <documentation>
            Set the maximum number of Rate classes allowed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRecentConns">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setRecentConns"/>
         <documentation>
            Set the details of how many recently closed connections each traffic manager process should save for use with the Connections page.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRecentConnsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setRecentConnsByLocation"/>
         <documentation>
            Set the details of how many recently closed connections each traffic manager process should save for use with the Connections page. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRecentConnsRetainTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setRecentConnsRetainTime"/>
         <documentation>
            Set for how long a snapshot should be retained on the Connections page.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRecentConnsRetainTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setRecentConnsRetainTimeByLocation"/>
         <documentation>
            Set for how long a snapshot should be retained on the Connections page. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRecentConnsSnapshotSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setRecentConnsSnapshotSize"/>
         <documentation>
            Set the maximum number of connections each traffic manager process should show for a snapshot on the Connections page.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRecentConnsSnapshotSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setRecentConnsSnapshotSizeByLocation"/>
         <documentation>
            Set the maximum number of connections each traffic manager process should show for a snapshot on the Connections page. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSLMClassLimit">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSLMClassLimit"/>
         <documentation>
            Set the maximum number of SLM classes allowed.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSLMClassLimitByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSLMClassLimitByLocation"/>
         <documentation>
            Set the maximum number of SLM classes allowed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSNMPUserCounters">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSNMPUserCounters"/>
         <documentation>
            Set the number of user defined SNMP counters (this single parameter dictates the numbers of both 32- and 64-bit user counters - there is always the same number of counters of each type).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSNMPUserCountersByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSNMPUserCountersByLocation"/>
         <documentation>
            Set the number of user defined SNMP counters (this single parameter dictates the numbers of both 32- and 64-bit user counters - there is always the same number of counters of each type). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSL3AllowRehandshake">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSL3AllowRehandshake"/>
         <documentation>
            Set whether SSL / TLS re-handshakes are supported.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSL3AllowRehandshakeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSL3AllowRehandshakeByLocation"/>
         <documentation>
            Set whether SSL / TLS re-handshakes are supported. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSL3Ciphers">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSL3Ciphers"/>
         <documentation>
            Set the list of configured SSL ciphers (available ciphers can be displayed using the command $ZEUSHOME/zxtm/bin/zeus.zxtm -s).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSL3CiphersByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSL3CiphersByLocation"/>
         <documentation>
            Set the list of configured SSL ciphers (available ciphers can be displayed using the command $ZEUSHOME/zxtm/bin/zeus.zxtm -s). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSL3DiffieHellmanKeyLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSL3DiffieHellmanKeyLength"/>
         <documentation>
            Set the number of bits to use for Diffie-Hellman keys
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSL3DiffieHellmanKeyLengthByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSL3DiffieHellmanKeyLengthByLocation"/>
         <documentation>
            Set the number of bits to use for Diffie-Hellman keys This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSL3MinRehandshakeInterval">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSL3MinRehandshakeInterval"/>
         <documentation>
            Set the minimum time interval (in milliseconds) between handshakes on a single SSL3/TLS connection.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLCRLMemSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLCRLMemSize"/>
         <documentation>
            Set the size of the CRL shared memory.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLCRLMemSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLCRLMemSizeByLocation"/>
         <documentation>
            Set the size of the CRL shared memory. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLDFailureCount">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLDFailureCount"/>
         <documentation>
            setSSLDFailureCount is deprecated, please use setSSLHardwareFailureCount instead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLDFailureCountByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLDFailureCountByLocation"/>
         <documentation>
            setSSLDFailureCount is deprecated, please use setSSLHardwareFailureCount instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLDPKCS11Lib">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLDPKCS11Lib"/>
         <documentation>
            setSSLDPKCS11Lib is deprecated, please use setSSLHardwarePKCS11Lib instead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLDPKCS11LibByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLDPKCS11LibByLocation"/>
         <documentation>
            setSSLDPKCS11Lib is deprecated, please use setSSLHardwarePKCS11Lib instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLDPKCS11UserPIN">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLDPKCS11UserPIN"/>
         <documentation>
            setSSLDPKCS11UserPIN is deprecated, please use setSSLHardwarePKCS11UserPIN instead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLDPKCS11UserPINByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLDPKCS11UserPINByLocation"/>
         <documentation>
            setSSLDPKCS11UserPIN is deprecated, please use setSSLHardwarePKCS11UserPIN instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLHardwareAccelerator">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLHardwareAccelerator"/>
         <documentation>
            Set whether your traffic manager should always attempt to use SSL hardware.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLHardwareAcceleratorByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLHardwareAcceleratorByLocation"/>
         <documentation>
            Set whether your traffic manager should always attempt to use SSL hardware. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLHardwareFailureCount">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLHardwareFailureCount"/>
         <documentation>
            Set the number of consecutive failures from the SSL hardware that will be tolerated before your traffic manager tries to log in again.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLHardwareFailureCountByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLHardwareFailureCountByLocation"/>
         <documentation>
            Set the number of consecutive failures from the SSL hardware that will be tolerated before your traffic manager tries to log in again. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLHardwarePKCS11Lib">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLHardwarePKCS11Lib"/>
         <documentation>
            Set the location of the PKCS#11 library supplied by your hardware vendor.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLHardwarePKCS11LibByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLHardwarePKCS11LibByLocation"/>
         <documentation>
            Set the location of the PKCS#11 library supplied by your hardware vendor. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLHardwarePKCS11SlotLabel">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLHardwarePKCS11SlotLabel"/>
         <documentation>
            Set the label of the SSL hardware slot to use.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLHardwarePKCS11SlotLabelByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLHardwarePKCS11SlotLabelByLocation"/>
         <documentation>
            Set the label of the SSL hardware slot to use. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLHardwarePKCS11SlotType">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLHardwarePKCS11SlotType"/>
         <documentation>
            Set the type of PKCS11 slot to use. Only used for PKCS11.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLHardwarePKCS11SlotTypeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLHardwarePKCS11SlotTypeByLocation"/>
         <documentation>
            Set the type of PKCS11 slot to use. Only used for PKCS11. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLHardwarePKCS11UserPIN">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLHardwarePKCS11UserPIN"/>
         <documentation>
            Set the user PIN for the PKCS token (PKCS#11 devices only)
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLHardwarePKCS11UserPINByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLHardwarePKCS11UserPINByLocation"/>
         <documentation>
            Set the user PIN for the PKCS token (PKCS#11 devices only) This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLHardwareType">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLHardwareType"/>
         <documentation>
            Set the device driver library name.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLHardwareTypeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLHardwareTypeByLocation"/>
         <documentation>
            Set the device driver library name. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLInsertExtraFragment">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLInsertExtraFragment"/>
         <documentation>
            Set whether SSL3 and TLS1 use one byte fragments
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLInsertExtraFragmentByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLInsertExtraFragmentByLocation"/>
         <documentation>
            Set whether SSL3 and TLS1 use one byte fragments This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLMaxHandshakeMessageSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLMaxHandshakeMessageSize"/>
         <documentation>
            Set the maximum acceptable size (in bytes) a SSL handshake message is permitted to be.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLMaxHandshakeMessageSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLMaxHandshakeMessageSizeByLocation"/>
         <documentation>
            Set the maximum acceptable size (in bytes) a SSL handshake message is permitted to be. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLOCSPStaplingDefaultRefreshInterval">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLOCSPStaplingDefaultRefreshInterval"/>
         <documentation>
            Set how long to wait before refreshing requests on behalf of the store of certificate status responses used by OCSP stapling, if we don't have an up-to-date OCSP response.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLOCSPStaplingDefaultRefreshIntervalByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLOCSPStaplingDefaultRefreshIntervalByLocation"/>
         <documentation>
            Set how long to wait before refreshing requests on behalf of the store of certificate status responses used by OCSP stapling, if we don't have an up-to-date OCSP response. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLOCSPStaplingMemSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLOCSPStaplingMemSize"/>
         <documentation>
            Set the size of the OCSP stapling response shared memory.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLOCSPStaplingMemSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLOCSPStaplingMemSizeByLocation"/>
         <documentation>
            Set the size of the OCSP stapling response shared memory. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLPreventTimingSideChannels">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLPreventTimingSideChannels"/>
         <documentation>
            Set whether SSL3 and TLS will take performance degrading steps to prevent exposing timing side-channels.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLPreventTimingSideChannelsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLPreventTimingSideChannelsByLocation"/>
         <documentation>
            Set whether SSL3 and TLS will take performance degrading steps to prevent exposing timing side-channels. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLSessionCacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLSessionCacheSize"/>
         <documentation>
            Set the maximum number of entries in the SSL session cache. This is used to provide persistence based on SSL session IDs.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLSessionCacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLSessionCacheSizeByLocation"/>
         <documentation>
            Set the maximum number of entries in the SSL session cache. This is used to provide persistence based on SSL session IDs. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLSessionIDCacheExpiryTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLSessionIDCacheExpiryTime"/>
         <documentation>
            Set the length of time that SSL session IDs are stored, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLSessionIDCacheExpiryTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLSessionIDCacheExpiryTimeByLocation"/>
         <documentation>
            Set the length of time that SSL session IDs are stored, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLSessionIDCacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLSessionIDCacheSize"/>
         <documentation>
            Set the number of entries in the SSL session ID cache.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLSessionIDCacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLSessionIDCacheSizeByLocation"/>
         <documentation>
            Set the number of entries in the SSL session ID cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLSupportSSL2">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLSupportSSL2"/>
         <documentation>
            Set whether SSLv2 support is enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLSupportSSL2ByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLSupportSSL2ByLocation"/>
         <documentation>
            Set whether SSLv2 support is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLSupportSSL3">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLSupportSSL3"/>
         <documentation>
            Set whether SSLv3 support is enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLSupportSSL3ByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLSupportSSL3ByLocation"/>
         <documentation>
            Set whether SSLv3 support is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLSupportTLS1">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLSupportTLS1"/>
         <documentation>
            Set whether TLSv1 support is enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLSupportTLS11">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLSupportTLS11"/>
         <documentation>
            Set whether TLSv1.1 support is enabled.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLSupportTLS11ByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLSupportTLS11ByLocation"/>
         <documentation>
            Set whether TLSv1.1 support is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSSLSupportTLS1ByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSSLSupportTLS1ByLocation"/>
         <documentation>
            Set whether TLSv1 support is enabled. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSharedPoolSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSharedPoolSize"/>
         <documentation>
            Set is the size of shared memory pool to be used for shared storage across worker processes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSharedPoolSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSharedPoolSizeByLocation"/>
         <documentation>
            Set is the size of shared memory pool to be used for shared storage across worker processes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSoapIdleMinutes">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSoapIdleMinutes"/>
         <documentation>
            Set the number of minutes the SOAP server remain idle before exiting
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSoapIdleMinutesByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSoapIdleMinutesByLocation"/>
         <documentation>
            Set the number of minutes the SOAP server remain idle before exiting This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSocketOptimizations">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSocketOptimizations"/>
         <documentation>
            Set whether potential network socket optimisations should be used.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSocketOptimizationsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSocketOptimizationsByLocation"/>
         <documentation>
            Set whether potential network socket optimisations should be used. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSsldAccel">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSsldAccel"/>
         <documentation>
            setSsldAccel is deprecated, please use setSSLHardwareAccelerator instead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSsldAccelByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSsldAccelByLocation"/>
         <documentation>
            setSsldAccel is deprecated, please use setSSLHardwareAccelerator instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSsldLibrary">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSsldLibrary"/>
         <documentation>
            setSsldLibrary is deprecated, please use setSSLHardwareType instead.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSsldLibraryByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSsldLibraryByLocation"/>
         <documentation>
            setSsldLibrary is deprecated, please use setSSLHardwareType instead. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setStateSyncTime">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setStateSyncTime"/>
         <documentation>
            Set how often the cache state is propagated to other traffic managers in the cluster, in seconds.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setStateSyncTimeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setStateSyncTimeByLocation"/>
         <documentation>
            Set how often the cache state is propagated to other traffic managers in the cluster, in seconds. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setStateSyncTimeout">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setStateSyncTimeout"/>
         <documentation>
            Set the timeout for state propagation between cluster members, in seconds
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setStateSyncTimeoutByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setStateSyncTimeoutByLocation"/>
         <documentation>
            Set the timeout for state propagation between cluster members, in seconds This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSystemReadBufferSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSystemReadBufferSize"/>
         <documentation>
            Set the size of the operating system's read buffer, in bytes (0 means use the system default).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSystemReadBufferSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSystemReadBufferSizeByLocation"/>
         <documentation>
            Set the size of the operating system's read buffer, in bytes (0 means use the system default). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSystemWriteBufferSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSystemWriteBufferSize"/>
         <documentation>
            Set the size of the operating system's write buffer, in bytes (0 means use the system default).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSystemWriteBufferSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setSystemWriteBufferSizeByLocation"/>
         <documentation>
            Set the size of the operating system's write buffer, in bytes (0 means use the system default). This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrackUnknownUsers">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrackUnknownUsers"/>
         <documentation>
            Set whether to remember past login attempts from usernames that are not known to exist (should be No for an Admin Server accessible from the public Internet).
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficIPGroupLimit">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficIPGroupLimit"/>
         <documentation>
            Set the maximum number of Traffic IP Groups allowed.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficIPGroupLimitByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficIPGroupLimitByLocation"/>
         <documentation>
            Set the maximum number of Traffic IP Groups allowed. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficScriptMemoryWarning">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficScriptMemoryWarning"/>
         <documentation>
            Set the amount of buffered network data a TrafficScript rule can buffer before a warning is logged, in bytes.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficScriptMemoryWarningByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficScriptMemoryWarningByLocation"/>
         <documentation>
            Set the amount of buffered network data a TrafficScript rule can buffer before a warning is logged, in bytes. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficscriptArrayElements">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficscriptArrayElements"/>
         <documentation>
            Set the number of array elements that can be stored before additional memory is allocated.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficscriptArrayElementsByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficscriptArrayElementsByLocation"/>
         <documentation>
            Set the number of array elements that can be stored before additional memory is allocated. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficscriptDataLocalSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficscriptDataLocalSize"/>
         <documentation>
            Set the maximum size of the TrafficScript local data pool (specified as a percentage of system RAM, e.g. '5%', or an absolute size, e.g. 200MB)
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficscriptDataLocalSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficscriptDataLocalSizeByLocation"/>
         <documentation>
            Set the maximum size of the TrafficScript local data pool (specified as a percentage of system RAM, e.g. '5%', or an absolute size, e.g. 200MB) This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficscriptDataSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficscriptDataSize"/>
         <documentation>
            Set the maximum size of the TrafficScript shared data pool (specified as a percentage of system RAM, e.g. '5%', or an absolute size, e.g. 200MB)
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficscriptDataSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficscriptDataSizeByLocation"/>
         <documentation>
            Set the maximum size of the TrafficScript shared data pool (specified as a percentage of system RAM, e.g. '5%', or an absolute size, e.g. 200MB) This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficscriptMaxInstr">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficscriptMaxInstr"/>
         <documentation>
            Set the maximum number of instructions a TrafficScript rule will run before being aborted.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficscriptMaxInstrByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficscriptMaxInstrByLocation"/>
         <documentation>
            Set the maximum number of instructions a TrafficScript rule will run before being aborted. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficscriptRegexCacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficscriptRegexCacheSize"/>
         <documentation>
            Set the number of regular expressions to cache
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficscriptRegexCacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficscriptRegexCacheSizeByLocation"/>
         <documentation>
            Set the number of regular expressions to cache This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficscriptRegexMatchLimit">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficscriptRegexMatchLimit"/>
         <documentation>
            Set the maximum number of ways TrafficScript will attempt to match a regular expression at each position in the subject string, before it aborts the rule and reports a TrafficScript error.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficscriptRegexMatchLimitByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficscriptRegexMatchLimitByLocation"/>
         <documentation>
            Set the maximum number of ways TrafficScript will attempt to match a regular expression at each position in the subject string, before it aborts the rule and reports a TrafficScript error. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficscriptRegexMatchWarnPerc">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficscriptRegexMatchWarnPerc"/>
         <documentation>
            Set the percentage of trafficscript!regex_match_limit at which TrafficScript reports a performance warning.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficscriptRegexMatchWarnPercByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficscriptRegexMatchWarnPercByLocation"/>
         <documentation>
            Set the percentage of trafficscript!regex_match_limit at which TrafficScript reports a performance warning. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficscriptVariablePoolUse">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficscriptVariablePoolUse"/>
         <documentation>
            Set whether the 'pool.use' and 'pool.select' TrafficScript functions accept variables as well as literal strings.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setTrafficscriptVariablePoolUseByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setTrafficscriptVariablePoolUseByLocation"/>
         <documentation>
            Set whether the 'pool.use' and 'pool.select' TrafficScript functions accept variables as well as literal strings. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setUipageBanner">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setUipageBanner"/>
         <documentation>
            Set the banner text to be displayed on all Admin Server pages.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setUniversalSessionCacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setUniversalSessionCacheSize"/>
         <documentation>
            Set the maximum number of entries in the universal session cache.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setUniversalSessionCacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setUniversalSessionCacheSizeByLocation"/>
         <documentation>
            Set the maximum number of entries in the universal session cache. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheAvgPathLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setWebcacheAvgPathLength"/>
         <documentation>
            Set the estimated average length of the path for resources to be cached
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheAvgPathLengthByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setWebcacheAvgPathLengthByLocation"/>
         <documentation>
            Set the estimated average length of the path for resources to be cached This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheDisk">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setWebcacheDisk"/>
         <documentation>
            Set whether the webcache is stored on disk
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheDiskByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setWebcacheDiskByLocation"/>
         <documentation>
            Set whether the webcache is stored on disk This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheDiskDir">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setWebcacheDiskDir"/>
         <documentation>
            Set the disk cache location
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheDiskDirByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setWebcacheDiskDirByLocation"/>
         <documentation>
            Set the disk cache location This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheMaxFileNum">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setWebcacheMaxFileNum"/>
         <documentation>
            Set the maximum number of files that can be stored in the web cache
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheMaxFileNumByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setWebcacheMaxFileNumByLocation"/>
         <documentation>
            Set the maximum number of files that can be stored in the web cache This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheMaxFileSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setWebcacheMaxFileSize"/>
         <documentation>
            Set the largest size of a cacheable object, relative to the total cache size, e.g. '2%', or as an absolute size in kB (default), MB or GB, e.g. '20MB'.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheMaxFileSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setWebcacheMaxFileSizeByLocation"/>
         <documentation>
            Set the largest size of a cacheable object, relative to the total cache size, e.g. '2%', or as an absolute size in kB (default), MB or GB, e.g. '20MB'. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheMaxPathLength">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setWebcacheMaxPathLength"/>
         <documentation>
            Set the maximum length of the path for the resource being cached
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheMaxPathLengthByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setWebcacheMaxPathLengthByLocation"/>
         <documentation>
            Set the maximum length of the path for the resource being cached This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheNormalizeQuery">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setWebcacheNormalizeQuery"/>
         <documentation>
            Set whether the assignment sub-strings in the parameter string are put into alphabetical order.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheNormalizeQueryByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setWebcacheNormalizeQueryByLocation"/>
         <documentation>
            Set whether the assignment sub-strings in the parameter string are put into alphabetical order. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheSize">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setWebcacheSize"/>
         <documentation>
            Set the maximum size of the HTTP web page cache, (specified as a percentage of system RAM, e.g. '20%', or an absolute size, e.g. 200MB)
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheSizeByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setWebcacheSizeByLocation"/>
         <documentation>
            Set the maximum size of the HTTP web page cache, (specified as a percentage of system RAM, e.g. '20%', or an absolute size, e.g. 200MB) This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheVerbose">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setWebcacheVerbose"/>
         <documentation>
            Set whether an X-Cache-Info header to show cacheability should be added.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setWebcacheVerboseByLocation">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/GlobalSettings/setWebcacheVerboseByLocation"/>
         <documentation>
            Set whether an X-Cache-Info header to show cacheability should be added. This is a location specific function, any action will operate on the specified location.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/GlobalSettings/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
   </binding>
   
   <service name="GlobalSettings">
      <documentation>
         The Global Settings interface allows management of the traffic manager settings.
      </documentation>
      
      <port name="GlobalSettingsPort" binding="zeusns:GlobalSettingsBinding">
         <soap:address location="https://admin_server:9090/soap"/>
      </port>
   </service>
   
</definitions>
