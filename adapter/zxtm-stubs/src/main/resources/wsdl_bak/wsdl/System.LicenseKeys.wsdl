<?xml version="1.0" ?>

<!--
    Copyright (c) 2005-2013 Zeus Technology. All rights reserved.

-->

<definitions name="System.LicenseKeys"
 targetNamespace="http://soap.zeus.com/zxtm/1.0/"
 xmlns:zeusns="http://soap.zeus.com/zxtm/1.0/"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
 xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
 xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
 xmlns="http://schemas.xmlsoap.org/wsdl/">
   
   <types>
      <xsd:schema targetNamespace='http://soap.zeus.com/zxtm/1.0/'
       xmlns='http://www.w3.org/2001/XMLSchema'
       xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/'
       xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/'>
         
         <xsd:complexType name="StringArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:string[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="StringArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:StringArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="System.LicenseKeys.LicenseKey">
           <xsd:annotation>
             <xsd:documentation>This structure contains the basic information for a license key. It is used 
             when adding, deleting or retrieving license keys.</xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="product" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The name of the product the license is for.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="version" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The traffic manager software version for this machine.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>    
             <xsd:element name="platforms" type="zeusns:StringArray">
               <xsd:annotation>
                 <xsd:documentation>The list of platforms that the software may run on.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="maxcpus" type="xsd:int">
               <xsd:annotation>
                 <xsd:documentation>The maximum number of CPUs that the software may run on. Note that this field 
                 may not exist for all license keys in which case its value will be '0'.
                 </xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="ip_address" type="zeusns:StringArray">
               <xsd:annotation>
                 <xsd:documentation>The IP addresses of the machines that the software may run on. Note that this 
                 field may not exist for all license keys in which case its value will be the empty array.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="mac_address" type="zeusns:StringArray">
               <xsd:annotation>
                 <xsd:documentation>The MAC addresses of the machines that the software may run on. Note that this 
                 field may not exist for all license keys in which case its value will be the empty array.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="features" type="zeusns:StringArray">
               <xsd:annotation>
                 <xsd:documentation>The features that are supported by the license key.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="max_backends" type="xsd:int">
               <xsd:annotation>
                 <xsd:documentation>The maximum number of backends supported by the license key. Note that this 
                 field may not exist for all license keys in which case its value will be '0'.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="customer_info" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>Additional customer information for the license key. Note that this field may not exist 
                 for all license keys in which case its value will be "".</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="customer_id" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The customer ID for the license key. Note that this field may not exist 
                 for all license keys in which case its value will be "".</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="serial" type="xsd:int">
               <xsd:annotation>
                 <xsd:documentation>The serial number of the license key.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="expires" type="xsd:dateTime">
               <xsd:annotation>
                 <xsd:documentation>The time at which the license key will expire.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>        
             <xsd:element name="issued" type="xsd:dateTime">
               <xsd:annotation>
                 <xsd:documentation>The time at which the license key was issued.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="maintenance" type="xsd:dateTime">
               <xsd:annotation>
                 <xsd:documentation>The time at which the support contract for the license key expires. Note that this 
                 field is for future use so may not exist for all license keys, in which case its value will be equal 
                 to '01/01/1970 00:00:00'.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="hwserial" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The hardware serial number for the appliance with this license key. Note that this 
                 field is only applicable to Stingray Appliances and otherwise will have the value "".</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="cluster_size" type="xsd:int">
               <xsd:annotation>
                 <xsd:documentation>The maximum cluster size supported by the license key. Note that this field may not 
                 exist for all license keys in which case its value will be equal to '0'.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>  
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="System.LicenseKeys.LicenseKeyArray">
            <xsd:complexContent>
               <xsd:restriction base='SOAP-ENC:Array'>
                  <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:System.LicenseKeys.LicenseKey[]'/>
               </xsd:restriction>
            </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:boolean[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:booleanArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         
         <xsd:complexType name="doubleArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:double[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="intArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:int[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="longArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:long[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedIntArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedInt[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedLongArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedLong[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidInput">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidInput fault is raised when the input to a function is
              invalid, for example a number was out of range. This fault is also
              raised in cases such as VirtualServer.setPool() where the Pool
              doesn't exist
         
              The details in the fault contain the object, key and value
              that caused the fault. These might be blank if they are not relevant
              to the fault.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectAlreadyExists">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectAlreadyExists fault is raised when attempting to create an
             object (such as a Virtual Server) that already exists. It will also
             be raised in cases such as renaming and copying objects.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectDoesNotExist">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectDoesNotExist fault is raised when attempting to perform an
             operation on an object (such as Virtual Server) that doesn't exist.
         
             This fault will only be raised if the primary object in the call doesn't
             exist. For example if calling VirtualServer.setPool(), then
             this fault will be raised if the Virtual Server doesn't exist, but if
             the Pool doesn't exist then the "InvalidInput" fault will be raised.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
      </xsd:schema>
   </types>
   
   <message name="addLicenseKeysRequest">
      <part name="license_texts" type="zeusns:StringArray" />
   </message>
   
   <message name="addLicenseKeysResponse">
      <part name="serials" type="zeusns:intArray" />
   </message>
   
   <message name="deleteLicenseKeysRequest">
      <part name="serials" type="zeusns:intArray" />
   </message>
   
   <message name="deleteLicenseKeysResponse"></message>
   
   <message name="getAllLicenseKeysRequest"></message>
   
   <message name="getAllLicenseKeysResponse">
      <part name="serials" type="zeusns:intArray" />
   </message>
   
   <message name="getCurrentLicenseKeyRequest"></message>
   
   <message name="getCurrentLicenseKeyResponse">
      <part name="serial" type="xsd:int" />
   </message>
   
   <message name="getLicenseKeysRequest">
      <part name="serials" type="zeusns:intArray" />
   </message>
   
   <message name="getLicenseKeysResponse">
      <part name="license_keys" type="zeusns:System.LicenseKeys.LicenseKeyArray" />
   </message>
   
   <message name="getRawLicenseKeysRequest">
      <part name="serials" type="zeusns:intArray" />
   </message>
   
   <message name="getRawLicenseKeysResponse">
      <part name="license_texts" type="zeusns:StringArray" />
   </message>
   
   <message name="InvalidInput">
      <part name="parameters" type="zeusns:InvalidInput" />
   </message>
   
   <message name="ObjectAlreadyExists">
      <part name="parameters" type="zeusns:ObjectAlreadyExists" />
   </message>
   
   <message name="ObjectDoesNotExist">
      <part name="parameters" type="zeusns:ObjectDoesNotExist" />
   </message>
   
   <portType name="System.LicenseKeysPort">
      <operation name="addLicenseKeys">
         <documentation>
            Create and add each of the named license keys.
         </documentation>
         
         <input message="zeusns:addLicenseKeysRequest"/>
         <output message="zeusns:addLicenseKeysResponse"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="deleteLicenseKeys">
         <documentation>
            Delete each of the named license keys.
         </documentation>
         
         <input message="zeusns:deleteLicenseKeysRequest"/>
         <output message="zeusns:deleteLicenseKeysResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getAllLicenseKeys">
         <documentation>
            Get a list of all the serial numbers of the existing license keys.
         </documentation>
         
         <input message="zeusns:getAllLicenseKeysRequest"/>
         <output message="zeusns:getAllLicenseKeysResponse"/>
      </operation>
      
      <operation name="getCurrentLicenseKey">
         <documentation>
            Get the serial number of the license key currently being used by this machine.
         </documentation>
         
         <input message="zeusns:getCurrentLicenseKeyRequest"/>
         <output message="zeusns:getCurrentLicenseKeyResponse"/>
      </operation>
      
      <operation name="getLicenseKeys">
         <documentation>
            For each of the named license keys, get the license key structure.
         </documentation>
         
         <input message="zeusns:getLicenseKeysRequest"/>
         <output message="zeusns:getLicenseKeysResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRawLicenseKeys">
         <documentation>
            For each of the named license keys, get the raw license key text.
         </documentation>
         
         <input message="zeusns:getRawLicenseKeysRequest"/>
         <output message="zeusns:getRawLicenseKeysResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
   </portType>
   
   <binding name="System.LicenseKeysBinding" type="zeusns:System.LicenseKeysPort">
      <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
      <operation name="addLicenseKeys">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/addLicenseKeys"/>
         <documentation>
            Create and add each of the named license keys.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="deleteLicenseKeys">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/deleteLicenseKeys"/>
         <documentation>
            Delete each of the named license keys.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getAllLicenseKeys">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/getAllLicenseKeys"/>
         <documentation>
            Get a list of all the serial numbers of the existing license keys.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getCurrentLicenseKey">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/getCurrentLicenseKey"/>
         <documentation>
            Get the serial number of the license key currently being used by this machine.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getLicenseKeys">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/getLicenseKeys"/>
         <documentation>
            For each of the named license keys, get the license key structure.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRawLicenseKeys">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/getRawLicenseKeys"/>
         <documentation>
            For each of the named license keys, get the raw license key text.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/System/LicenseKeys/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
   </binding>
   
   <service name="System.LicenseKeys">
      <documentation>
         The System.LicenseKeys interface provides license key information for this machine. 
                                        Using this interface, you can add and delete license keys, and retrieve both the 
                                        license key currently in use and a list of all existing license keys.
      </documentation>
      
      <port name="System.LicenseKeysPort" binding="zeusns:System.LicenseKeysBinding">
         <soap:address location="https://admin_server:9090/soap"/>
      </port>
   </service>
   
</definitions>
