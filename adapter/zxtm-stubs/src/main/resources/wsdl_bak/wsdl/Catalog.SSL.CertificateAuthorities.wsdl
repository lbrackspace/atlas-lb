<?xml version="1.0" ?>

<!--
    Copyright (c) 2005-2013 Zeus Technology. All rights reserved.

-->

<definitions name="Catalog.SSL.CertificateAuthorities"
 targetNamespace="http://soap.zeus.com/zxtm/1.0/"
 xmlns:zeusns="http://soap.zeus.com/zxtm/1.0/"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
 xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
 xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
 xmlns="http://schemas.xmlsoap.org/wsdl/">
   
   <types>
      <xsd:schema targetNamespace='http://soap.zeus.com/zxtm/1.0/'
       xmlns='http://www.w3.org/2001/XMLSchema'
       xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/'
       xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/'>
         
         <xsd:complexType name="Catalog.SSL.CertificateAuthorities.CRL">
           <xsd:annotation>
             <xsd:documentation>This structure contains the information about a Certificate Revocation list.</xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="update" type="xsd:dateTime">
              <xsd:annotation>
               <xsd:documentation>The time when the CRL was updated</xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="next_update" type="xsd:dateTime">
              <xsd:annotation>
               <xsd:documentation>The time that the CRL will next be updated.</xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="revoked_certs" type="zeusns:Catalog.SSL.CertificateAuthorities.RevokedCertArray">
              <xsd:annotation>
               <xsd:documentation>The list of revoked certificates</xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="Catalog.SSL.CertificateAuthorities.Details">
           <xsd:annotation>
             <xsd:documentation>This structure contains the information about a Certificate Authority. It contains both the Certificate, and the list of revoked Certificates contained in the associated CRL.</xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="certificate" type="zeusns:Certificate">
              <xsd:annotation>
               <xsd:documentation>The Certificate Authority certificate</xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="have_crl" type="xsd:boolean">
              <xsd:annotation>
               <xsd:documentation>If set to 'true' then there is an associated CRL, otherwise the CRL structure contains no useful information</xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="crl" type="zeusns:Catalog.SSL.CertificateAuthorities.CRL">
              <xsd:annotation>
               <xsd:documentation>The associated CRL.</xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="Catalog.SSL.CertificateAuthorities.DetailsArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:Catalog.SSL.CertificateAuthorities.Details[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="Catalog.SSL.CertificateAuthorities.RevokedCert">
           <xsd:annotation>
             <xsd:documentation>This structure contains the information about a revoked Certificate.</xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="serial" type="xsd:string">
              <xsd:annotation>
               <xsd:documentation>The serial number of the revoked certificate</xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="revocation_date" type="xsd:dateTime">
              <xsd:annotation>
               <xsd:documentation>The time that the certificate was revoked</xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="Catalog.SSL.CertificateAuthorities.RevokedCertArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:Catalog.SSL.CertificateAuthorities.RevokedCert[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="Certificate">
           <xsd:annotation>
            <xsd:documentation>
             This structure contains information (such as the subject and issuer)
             about a certificate.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="version" type="xsd:int">
               <xsd:annotation>
                 <xsd:documentation>The version of the X509 Certificate</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="serial" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The serial number of the Certificate</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="issuer" type="zeusns:X509Name">
               <xsd:annotation>
                 <xsd:documentation>The issuer (i.e. who signed it) of the Certificate</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="subject" type="zeusns:X509Name">
               <xsd:annotation>
                 <xsd:documentation>The subject (i.e. who it is for) of the Certificate</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="valid_from" type="xsd:dateTime">
               <xsd:annotation>
                 <xsd:documentation>The time the certificate is valid from.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="valid_to" type="xsd:dateTime">
               <xsd:annotation>
                 <xsd:documentation>The time the certificate is valid to.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="modulus" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The modulus of the certificate.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="exponent" type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>The exponent of the certificate.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="self_signed" type="xsd:boolean">
               <xsd:annotation>
                 <xsd:documentation>Whether the certificate is self-signed (i.e. the issuer is the same as the subject)</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="CertificateArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:Certificate[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="CertificateFiles">
           <xsd:annotation>
            <xsd:documentation>
             This structure contains a public certificate and private key. It is used
             when importing certificates into the traffic manager.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="public_cert" type="xsd:string">
               <xsd:annotation>
                <xsd:documentation>
                  The PEM-encoded public certificate (containing the BEGIN CERTIFICATE
                  and END CERTIFICATE tags)
                </xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="private_key" type="xsd:string">
               <xsd:annotation>
                <xsd:documentation>
                  The PEM-encoded private key (containing the BEGIN RSA PRIVATE KEY and
                  END RSA PRIVATE KEY tags)
                 </xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="CertificateFilesArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:CertificateFiles[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="StringArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:string[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="StringArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:StringArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="X509Name">
           <xsd:annotation>
            <xsd:documentation>
             This structure contains a representation of an X509 Name object. These
             are used inside Certificate objects to represent the issuer and subject
             of the certificate.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="common_name"  type="xsd:string">
               <xsd:annotation>
                 <xsd:documentation>
                  The common name (CN). This is usually the name of the site the
                  certificate is issued to (e.g. "secure.example.com")
                </xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="country" type="xsd:string">
               <xsd:annotation>
                  <xsd:documentation>The two-letter country code.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="location" type="xsd:string">
               <xsd:annotation>
                  <xsd:documentation>The location (town or city).</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="state" type="xsd:string">
               <xsd:annotation>
                  <xsd:documentation>The state, this is only needed if the country is 'US'.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="organisation" type="xsd:string">
               <xsd:annotation>
                  <xsd:documentation>The name of the organisation</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="unit" type="xsd:string">
               <xsd:annotation>
                  <xsd:documentation>The unit inside the organisation</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="email" type="xsd:string">
               <xsd:annotation>
                  <xsd:documentation>An email address. This is usually empty.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:boolean[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:booleanArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         
         <xsd:complexType name="doubleArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:double[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="intArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:int[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="longArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:long[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedIntArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedInt[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedLongArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedLong[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidInput">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidInput fault is raised when the input to a function is
              invalid, for example a number was out of range. This fault is also
              raised in cases such as VirtualServer.setPool() where the Pool
              doesn't exist
         
              The details in the fault contain the object, key and value
              that caused the fault. These might be blank if they are not relevant
              to the fault.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidObjectName">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidObjectName fault is raised when attempting to create
              a new object (e.g. via an add, rename or copy) and the name is
              invalid (e.g. it contains a '/').
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidOperation">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidOperation fault is emitted when attempting an operation
              that doesn't make sense or is prohibited, for example deleting
              a built-in monitor, or attempting to rename an object twice in
              the same call. 
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectAlreadyExists">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectAlreadyExists fault is raised when attempting to create an
             object (such as a Virtual Server) that already exists. It will also
             be raised in cases such as renaming and copying objects.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectDoesNotExist">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectDoesNotExist fault is raised when attempting to perform an
             operation on an object (such as Virtual Server) that doesn't exist.
         
             This fault will only be raised if the primary object in the call doesn't
             exist. For example if calling VirtualServer.setPool(), then
             this fault will be raised if the Virtual Server doesn't exist, but if
             the Pool doesn't exist then the "InvalidInput" fault will be raised.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
      </xsd:schema>
   </types>
   
   <message name="deleteCertificateAuthorityRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="deleteCertificateAuthorityResponse"></message>
   
   <message name="getCertificateAuthorityInfoRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCertificateAuthorityInfoResponse">
      <part name="details" type="zeusns:Catalog.SSL.CertificateAuthorities.DetailsArray" />
   </message>
   
   <message name="getCertificateAuthorityNamesRequest"></message>
   
   <message name="getCertificateAuthorityNamesResponse">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRawCertificateRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRawCertificateResponse">
      <part name="certs" type="zeusns:StringArray" />
   </message>
   
   <message name="importCRLRequest">
      <part name="crls" type="zeusns:StringArray" />
   </message>
   
   <message name="importCRLResponse"></message>
   
   <message name="importCertificateAuthorityRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="certs" type="zeusns:StringArray" />
   </message>
   
   <message name="importCertificateAuthorityResponse"></message>
   
   <message name="renameCertificateAuthorityRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="new_names" type="zeusns:StringArray" />
   </message>
   
   <message name="renameCertificateAuthorityResponse"></message>
   
   <message name="InvalidInput">
      <part name="parameters" type="zeusns:InvalidInput" />
   </message>
   
   <message name="InvalidObjectName">
      <part name="parameters" type="zeusns:InvalidObjectName" />
   </message>
   
   <message name="InvalidOperation">
      <part name="parameters" type="zeusns:InvalidOperation" />
   </message>
   
   <message name="ObjectAlreadyExists">
      <part name="parameters" type="zeusns:ObjectAlreadyExists" />
   </message>
   
   <message name="ObjectDoesNotExist">
      <part name="parameters" type="zeusns:ObjectDoesNotExist" />
   </message>
   
   <portType name="Catalog.SSL.CertificateAuthoritiesPort">
      <operation name="deleteCertificateAuthority">
         <documentation>
            Delete the named Certificate Authority and associated Revocation list.
         </documentation>
         
         <input message="zeusns:deleteCertificateAuthorityRequest"/>
         <output message="zeusns:deleteCertificateAuthorityResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCertificateAuthorityInfo">
         <documentation>
            Get the Certificate Information, and the revoked certificates.
         </documentation>
         
         <input message="zeusns:getCertificateAuthorityInfoRequest"/>
         <output message="zeusns:getCertificateAuthorityInfoResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCertificateAuthorityNames">
         <documentation>
            Get the names of the configured Certificate Authorities.
         </documentation>
         
         <input message="zeusns:getCertificateAuthorityNamesRequest"/>
         <output message="zeusns:getCertificateAuthorityNamesResponse"/>
      </operation>
      
      <operation name="getRawCertificate">
         <documentation>
            Get the raw PEM encoded Certificate for the named Certificate Authorities.
         </documentation>
         
         <input message="zeusns:getRawCertificateRequest"/>
         <output message="zeusns:getRawCertificateResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="importCRL">
         <documentation>
            Import Certificate Revocation Lists. The associated Certificate Authority certificates should already be imported.
         </documentation>
         
         <input message="zeusns:importCRLRequest"/>
         <output message="zeusns:importCRLResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="importCertificateAuthority">
         <documentation>
            Import new Certificate Authorities.
         </documentation>
         
         <input message="zeusns:importCertificateAuthorityRequest"/>
         <output message="zeusns:importCertificateAuthorityResponse"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
      </operation>
      
      <operation name="renameCertificateAuthority">
         <documentation>
            Rename the named Certificate Authorities.
         </documentation>
         
         <input message="zeusns:renameCertificateAuthorityRequest"/>
         <output message="zeusns:renameCertificateAuthorityResponse"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
      </operation>
   </portType>
   
   <binding name="Catalog.SSL.CertificateAuthoritiesBinding" type="zeusns:Catalog.SSL.CertificateAuthoritiesPort">
      <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
      <operation name="deleteCertificateAuthority">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/deleteCertificateAuthority"/>
         <documentation>
            Delete the named Certificate Authority and associated Revocation list.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCertificateAuthorityInfo">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/getCertificateAuthorityInfo"/>
         <documentation>
            Get the Certificate Information, and the revoked certificates.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCertificateAuthorityNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/getCertificateAuthorityNames"/>
         <documentation>
            Get the names of the configured Certificate Authorities.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getRawCertificate">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/getRawCertificate"/>
         <documentation>
            Get the raw PEM encoded Certificate for the named Certificate Authorities.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="importCRL">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/importCRL"/>
         <documentation>
            Import Certificate Revocation Lists. The associated Certificate Authority certificates should already be imported.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="importCertificateAuthority">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/importCertificateAuthority"/>
         <documentation>
            Import new Certificate Authorities.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="renameCertificateAuthority">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/renameCertificateAuthority"/>
         <documentation>
            Rename the named Certificate Authorities.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Catalog/SSL/CertificateAuthorities/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
   </binding>
   
   <service name="Catalog.SSL.CertificateAuthorities">
      <documentation>
         The Catalog.SSL.CertificateAuthorities interface allows management of SSL Certificate Authorities which are used to authenticate back-end nodes when doing SSL encryption.
      </documentation>
      
      <port name="Catalog.SSL.CertificateAuthoritiesPort" binding="zeusns:Catalog.SSL.CertificateAuthoritiesBinding">
         <soap:address location="https://admin_server:9090/soap"/>
      </port>
   </service>
   
</definitions>
