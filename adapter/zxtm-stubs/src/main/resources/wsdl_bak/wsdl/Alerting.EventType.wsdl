<?xml version="1.0" ?>

<!--
    Copyright (c) 2005-2013 Zeus Technology. All rights reserved.

-->

<definitions name="Alerting.EventType"
 targetNamespace="http://soap.zeus.com/zxtm/1.0/"
 xmlns:zeusns="http://soap.zeus.com/zxtm/1.0/"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
 xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
 xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
 xmlns="http://schemas.xmlsoap.org/wsdl/">
   
   <types>
      <xsd:schema targetNamespace='http://soap.zeus.com/zxtm/1.0/'
       xmlns='http://www.w3.org/2001/XMLSchema'
       xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/'
       xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/'>
         
         
            <xsd:simpleType name="Alerting.EventType.Event">
               <xsd:restriction base="xsd:string">
            
                  <xsd:enumeration value="ALL">
                     <xsd:annotation>
                        <xsd:documentation>This event matches all events.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="cloudcredentials_ALL">
                     <xsd:annotation>
                        <xsd:documentation>Special value that matches all events of type Cloud Credentials.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="cloudcredentials_apistatusprocesshanging">
                     <xsd:annotation>
                        <xsd:documentation>Cloud Credentials - A cloud API process querying changes to cloud instances is hanging</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="cloudcredentials_autoscaleresponseparseerror">
                     <xsd:annotation>
                        <xsd:documentation>Cloud Credentials - An API call made by the autoscaler process has returned a response that could not be parsed</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="cloudcredentials_autoscalestatusupdateerror">
                     <xsd:annotation>
                        <xsd:documentation>Cloud Credentials - An API call made by the autoscaler process has reported an error</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="cloudcredentials_autoscalingprocesstimedout">
                     <xsd:annotation>
                        <xsd:documentation>Cloud Credentials - A cloud API process has timed out</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="cloudcredentials_usedcredsdeleted">
                     <xsd:annotation>
                        <xsd:documentation>Cloud Credentials - A Cloud Credentials object has been deleted but it was still in use</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="config_ALL">
                     <xsd:annotation>
                        <xsd:documentation>Special value that matches all events of type Configuration Files.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="config_confadd">
                     <xsd:annotation>
                        <xsd:documentation>Configuration Files - Configuration file added</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="config_confdel">
                     <xsd:annotation>
                        <xsd:documentation>Configuration Files - Configuration file deleted</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="config_confmod">
                     <xsd:annotation>
                        <xsd:documentation>Configuration Files - Configuration file modified</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="config_confok">
                     <xsd:annotation>
                        <xsd:documentation>Configuration Files - Configuration file now OK</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_ALL">
                     <xsd:annotation>
                        <xsd:documentation>Special value that matches all events of type Fault Tolerance.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_activatealldead">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Activating this machine automatically because it is the only working machine in its Traffic IP Groups</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_activatedautomatically">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Machine has recovered and been activated automatically because it would cause no service disruption</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_allmachinesok">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - All machines are working</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_clockjump">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - The system clock jumped forwards or backwards by more than one second</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_clocknotmonotonic">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - The monotonic system clock went backwards</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_dropec2ipwarn">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Removing EC2 Elastic IP Address from all machines; it is no longer a part of any Traffic IP Groups</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_dropipinfo">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Dropping Traffic IP Address due to a configuration change or traffic manager recovery</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_dropipwarn">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Dropping Traffic IP Address due to an error</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_ec2flipperraiselocalworking">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Moving EC2 Elastic IP Address; local machine is working</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_ec2flipperraiseothersdead">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Moving EC2 Elastic IP Address; other machines have failed</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_ec2iperr">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Problem occurred when managing an Elastic IP address</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_ec2nopublicip">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Cannot raise Elastic IP on this machine until EC2 provides it with a public IP address</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_ec2nosecondaryprivateip">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Cannot raise Elastic IP on this machine until it has a secondary private IP address with no EIP association assigned to primary network interface</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_flipperbackendsworking">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Back-end nodes are now working</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_flipperdadreraise">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Re-raising Traffic IP Address; Operating system did not fully raise the address</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_flipperfrontendsworking">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Frontend machines are now working</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_flipperipexists">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Failed to raise Traffic IP Address; the address exists elsewhere on your network and cannot be raised</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_flipperraiselocalworking">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Raising Traffic IP Address; local machine is working</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_flipperraiseosdrop">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Raising Traffic IP Address; Operating System had dropped this IP address</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_flipperraiseothersdead">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Raising Traffic IP Address; other machines have failed</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_flipperraiseremotedropped">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - This Traffic Manager has re-raised traffic IP addresses as the remote machine which was hosting them has dropped them</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_flipperrecovered">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Machine is ready to raise Traffic IP addresses</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_machinefail">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Remote machine has failed</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_machineok">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Remote machine is now working</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_machinerecovered">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Remote machine has recovered and can raise Traffic IP addresses</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_machinetimeout">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Remote machine has timed out and been marked as failed</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_multihostload">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - The amount of load handled by the local machine destined for this Traffic IP has changed</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_pingbackendfail">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Failed to ping back-end nodes</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_pingfrontendfail">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Failed to ping any of the machines used to check the front-end connectivity</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_pinggwfail">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Failed to ping default gateway</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_statebaddata">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Received an invalid response from another cluster member</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_stateconnfail">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Failed to connect to another cluster member for state sharing</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_stateok">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Successfully connected to another cluster member for state sharing</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_statereadfail">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Reading state data from another cluster member failed</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_statetimeout">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Timeout while sending state data to another cluster member</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_stateunexpected">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Received unexpected state data from another cluster member</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_statewritefail">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - Writing state data to another cluster member failed</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="faulttolerance_zclustermoderr">
                     <xsd:annotation>
                        <xsd:documentation>Fault Tolerance - An error occurred when using the zcluster Multi-Hosted IP kernel module</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_ALL">
                     <xsd:annotation>
                        <xsd:documentation>Special value that matches all events of type General.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_autherror">
                     <xsd:annotation>
                        <xsd:documentation>General - An error occurred during user authentication</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_autoscalinglicenseerror">
                     <xsd:annotation>
                        <xsd:documentation>General - Autoscaling not permitted by licence key</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_childcommsfail">
                     <xsd:annotation>
                        <xsd:documentation>General - There was an error communicating with a child process</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_confrepfailed">
                     <xsd:annotation>
                        <xsd:documentation>General - Replication of configuration has failed</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_confreptimeout">
                     <xsd:annotation>
                        <xsd:documentation>General - Replication of configuration has timed out</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_fewfreefds">
                     <xsd:annotation>
                        <xsd:documentation>General - Running out of free file descriptors</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_fipsfailinit">
                     <xsd:annotation>
                        <xsd:documentation>General - FIPS 140-2 cryptographic module initialization failed</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_fipsfailops">
                     <xsd:annotation>
                        <xsd:documentation>General - FIPS 140-2 cryptographic module operations failed</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_geodataloadfail">
                     <xsd:annotation>
                        <xsd:documentation>General - Failed to load geolocation data</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_hardware">
                     <xsd:annotation>
                        <xsd:documentation>General - Appliance hardware notification</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_licensetoomanylocations">
                     <xsd:annotation>
                        <xsd:documentation>General - A location has been disabled because you have exceeded the licence limit</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_logdiskfull">
                     <xsd:annotation>
                        <xsd:documentation>General - Log disk partition full</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_logdiskoverload">
                     <xsd:annotation>
                        <xsd:documentation>General - Log disk partition usage has exceeded threshold</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_numlocations-exceeded">
                     <xsd:annotation>
                        <xsd:documentation>General - Total number of locations exceeded the maximum limit</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_numnodes-exceeded">
                     <xsd:annotation>
                        <xsd:documentation>General - Total number of nodes exceeded the maximum number of nodes that can be monitored</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_numpools-exceeded">
                     <xsd:annotation>
                        <xsd:documentation>General - Total number of pools exceeded the maximum limit</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_numtipg-exceeded">
                     <xsd:annotation>
                        <xsd:documentation>General - Total number of traffic IP group exceeded the maximum limit</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_ocspstaplingfail">
                     <xsd:annotation>
                        <xsd:documentation>General - OCSP request (for OCSP stapling) failed</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_ocspstaplingnomem">
                     <xsd:annotation>
                        <xsd:documentation>General - Insufficient memory for OCSP stapling</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_restartrequired">
                     <xsd:annotation>
                        <xsd:documentation>General - Software must be restarted to apply configuration changes</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_running">
                     <xsd:annotation>
                        <xsd:documentation>General - Software is running</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_sslcrltoobig">
                     <xsd:annotation>
                        <xsd:documentation>General - CRL does not fit in the configured amount of shared memory, increase ssl!crl_mem!size and restart software</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_timemovedback">
                     <xsd:annotation>
                        <xsd:documentation>General - Time has been moved back</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_zxtmhighload">
                     <xsd:annotation>
                        <xsd:documentation>General - The number of simultaneously active connections has reached a level that the software cannot process in due time; there is a high risk of connections timing out</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="general_zxtmswerror">
                     <xsd:annotation>
                        <xsd:documentation>General - Stingray Traffic Manager software problem</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="java_ALL">
                     <xsd:annotation>
                        <xsd:documentation>Special value that matches all events of type Java.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="java_javadied">
                     <xsd:annotation>
                        <xsd:documentation>Java - Java runner died</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="java_javanotfound">
                     <xsd:annotation>
                        <xsd:documentation>Java - Cannot start Java runner, program not found</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="java_javastarted">
                     <xsd:annotation>
                        <xsd:documentation>Java - Java runner started</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="java_javastartfail">
                     <xsd:annotation>
                        <xsd:documentation>Java - Java runner failed to start</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="java_javastop">
                     <xsd:annotation>
                        <xsd:documentation>Java - Java support has stopped</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="java_javaterminatefail">
                     <xsd:annotation>
                        <xsd:documentation>Java - Java runner failed to terminate</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="java_servleterror">
                     <xsd:annotation>
                        <xsd:documentation>Java - Servlet encountered an error</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_ALL">
                     <xsd:annotation>
                        <xsd:documentation>Special value that matches all events of type License Keys.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_analyticslicensedisabled">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - Realtime Analytics support has been disabled</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_analyticslicenseenabled">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - Realtime Analytics support has been enabled</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_autoscalinglicensedisabled">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - Autoscaling support has been disabled</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_autoscalinglicenseenabled">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - Autoscaling support has been enabled</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_bwlimited">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - License key bandwidth limit has been hit</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_cachesizereduced">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - Configured cache size exceeds license limit, only using amount allowed by license</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_expired">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - License key has expired</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_expiresoon">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - License key expires within 7 days</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_lessmemallowed">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - License allows less memory for caching</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_license-authorized">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - License key authorized</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_license-authorized-ts">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - License key authorized by authorization code</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_license-explicitlydisabled-ts">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - License key explicitly disabled from authorization code</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_license-graceperiodexpired">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - Unable to authorize license key</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_license-graceperiodexpired-ts">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - Unable to authorize license key</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_license-rejected-authorized">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - License server rejected license key; key remains authorized</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_license-rejected-authorized-ts">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - License key rejected from authorization code; key remains authorized</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_license-rejected-unauthorized">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - License server rejected license key; key is not authorized</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_license-rejected-unauthorized-ts">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - License key rejected from authorization code</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_license-timedout-authorized">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - Unable to contact license server; license key remains authorized</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_license-timedout-authorized-ts">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - Unable to run authorization code to completion; key remains valid</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_license-timedout-unauthorized">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - Unable to contact license server; license key is not authorized</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_license-timedout-unauthorized-ts">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - Unable to run authorization code to completion</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_license-unauthorized">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - License key is not authorized</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_licenseclustertoobig">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - Cluster size exceeds license key limit</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_licensecorrupt">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - License key is corrupt</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_morememallowed">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - License allows more memory for caching</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_ssltpslimited">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - License key SSL transactions-per-second limit has been hit</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_tpslimited">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - License key transactions-per-second limit has been hit</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_unlicensed">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - Started without a license</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_usingdevlicense">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - Using a development license</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="licensekeys_usinglicense">
                     <xsd:annotation>
                        <xsd:documentation>License Keys - Using license key</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="locations_ALL">
                     <xsd:annotation>
                        <xsd:documentation>Special value that matches all events of type Locations.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="locations_locationfail">
                     <xsd:annotation>
                        <xsd:documentation>Locations - Location has failed for GLB Service</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="locations_locationmonitorfail">
                     <xsd:annotation>
                        <xsd:documentation>Locations - A monitor has detected a failure in this location</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="locations_locationmonitorok">
                     <xsd:annotation>
                        <xsd:documentation>Locations - A monitor has indicated this location is now working</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="locations_locationok">
                     <xsd:annotation>
                        <xsd:documentation>Locations - Location is now working for GLB Service</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="locations_locationsoapfail">
                     <xsd:annotation>
                        <xsd:documentation>Locations - An external SOAP agent has detected a failure in this location</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="locations_locationsoapok">
                     <xsd:annotation>
                        <xsd:documentation>Locations - An external SOAP agent indicates this location is now working</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="locations_locempty">
                     <xsd:annotation>
                        <xsd:documentation>Locations - Location no longer contains any machines</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="locations_locmovemachine">
                     <xsd:annotation>
                        <xsd:documentation>Locations - Machine now in location</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="monitors_ALL">
                     <xsd:annotation>
                        <xsd:documentation>Special value that matches all events of type Monitors.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="monitors_monitorfail">
                     <xsd:annotation>
                        <xsd:documentation>Monitors - Monitor has detected a failure</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="monitors_monitorok">
                     <xsd:annotation>
                        <xsd:documentation>Monitors - Monitor is working</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pids_ALL">
                     <xsd:annotation>
                        <xsd:documentation>Special value that matches all events of type Processes.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pids_childhung">
                     <xsd:annotation>
                        <xsd:documentation>Processes - The child process did not respond within the configured time</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pids_childkilled">
                     <xsd:annotation>
                        <xsd:documentation>Processes - The child process has been killed because it did not respond to control requests within the configured time</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_ALL">
                     <xsd:annotation>
                        <xsd:documentation>Special value that matches all events of type Pools.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_apichangeprocesshanging">
                     <xsd:annotation>
                        <xsd:documentation>Pools - API change process still running after refractory period is over</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autonodecreationcomplete">
                     <xsd:annotation>
                        <xsd:documentation>Pools - The creation of a new node requested by an autoscaled pool is now complete</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autonodecreationstarted">
                     <xsd:annotation>
                        <xsd:documentation>Pools - Creation of new node instigated</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autonodedestroyed">
                     <xsd:annotation>
                        <xsd:documentation>Pools - A cloud API call to destroy a node has been started</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autonodedestructioncomplete">
                     <xsd:annotation>
                        <xsd:documentation>Pools - The destruction of a node in an autoscaled pool is now complete</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autonodedisappeared">
                     <xsd:annotation>
                        <xsd:documentation>Pools - A node in an autoscaled pool has disappeared from the cloud</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autonodeexisted">
                     <xsd:annotation>
                        <xsd:documentation>Pools - IP address of newly created instance already existed in pool's node list</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autonodestatuschange">
                     <xsd:annotation>
                        <xsd:documentation>Pools - The status of a node in an autoscaled pool has changed</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autoscalednodecontested">
                     <xsd:annotation>
                        <xsd:documentation>Pools - Two pools are trying to use the same instance</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autoscaledpoolrefractory">
                     <xsd:annotation>
                        <xsd:documentation>Pools - An autoscaled pool is now refractory</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autoscaledpooltoobig">
                     <xsd:annotation>
                        <xsd:documentation>Pools - Over maximum size - shrinking</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autoscaledpooltoosmall">
                     <xsd:annotation>
                        <xsd:documentation>Pools - Minimum size undercut - growing</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autoscaleinvalidargforcreatenode">
                     <xsd:annotation>
                        <xsd:documentation>Pools - The 'imageid' was empty when attempting to create a node in an autoscaled pool</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autoscaleinvalidargfordeletenode">
                     <xsd:annotation>
                        <xsd:documentation>Pools - 'unique id' was empty when attempting to destroy a node in an autoscaled pool</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autoscalepoolconfupdate">
                     <xsd:annotation>
                        <xsd:documentation>Pools - A pool config file has been updated by the autoscaler process</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autoscalewrongimageid">
                     <xsd:annotation>
                        <xsd:documentation>Pools - A node created by the autoscaler has the wrong imageid</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autoscalewrongname">
                     <xsd:annotation>
                        <xsd:documentation>Pools - A node created by the autoscaler has a non-matching name</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autoscalewrongsizeid">
                     <xsd:annotation>
                        <xsd:documentation>Pools - A node created by the autoscaler has the wrong sizeid</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autoscalingchangeprocessfailure">
                     <xsd:annotation>
                        <xsd:documentation>Pools - An API process that should have created or destroyed a node has failed to produce the expected result</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autoscalingdisabled">
                     <xsd:annotation>
                        <xsd:documentation>Pools - Autoscaling for a pool has been disabled due to errors communicating with the cloud API</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autoscalinghitfloor">
                     <xsd:annotation>
                        <xsd:documentation>Pools - Minimum size reached, cannot shrink further</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autoscalinghitroof">
                     <xsd:annotation>
                        <xsd:documentation>Pools - Maximum size reached by autoscaled pool, cannot grow further</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autoscalinghysteresiscantgrow">
                     <xsd:annotation>
                        <xsd:documentation>Pools - An autoscaled pool is waiting to grow</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autoscalinghysteresiscantshrink">
                     <xsd:annotation>
                        <xsd:documentation>Pools - An autoscaled pool is waiting to shrink</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autoscalingpoolstatechange">
                     <xsd:annotation>
                        <xsd:documentation>Pools - An autoscaled pool's state has changed</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_autoscalingresuscitatepool">
                     <xsd:annotation>
                        <xsd:documentation>Pools - An autoscaled pool has failed completely</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_badcontentlen">
                     <xsd:annotation>
                        <xsd:documentation>Pools - HTTP response contained an invalid Content-Length header</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_cannotshrinkemptypool">
                     <xsd:annotation>
                        <xsd:documentation>Pools - Attempt to scale down a pool that only had pending nodes or none at all</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_ehloinvalid">
                     <xsd:annotation>
                        <xsd:documentation>Pools - Node returned invalid EHLO response</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_nodefail">
                     <xsd:annotation>
                        <xsd:documentation>Pools - Node has failed</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_noderesolvefailure">
                     <xsd:annotation>
                        <xsd:documentation>Pools - Failed to resolve node address</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_noderesolvemultiple">
                     <xsd:annotation>
                        <xsd:documentation>Pools - Node resolves to multiple IP addresses</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_nodeworking">
                     <xsd:annotation>
                        <xsd:documentation>Pools - Node is working again</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_nostarttls">
                     <xsd:annotation>
                        <xsd:documentation>Pools - Node doesn't provide STARTTLS support</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_pooldied">
                     <xsd:annotation>
                        <xsd:documentation>Pools - Pool has no back-end nodes responding</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_poolnonodes">
                     <xsd:annotation>
                        <xsd:documentation>Pools - Pool configuration contains no valid backend nodes</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_poolok">
                     <xsd:annotation>
                        <xsd:documentation>Pools - Pool now has working nodes</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="pools_starttlsinvalid">
                     <xsd:annotation>
                        <xsd:documentation>Pools - Node returned invalid STARTTLS response</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="protection_ALL">
                     <xsd:annotation>
                        <xsd:documentation>Special value that matches all events of type Service Protection Classes.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="protection_triggersummary">
                     <xsd:annotation>
                        <xsd:documentation>Service Protection Classes - Summary of recent service protection events</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_ALL">
                     <xsd:annotation>
                        <xsd:documentation>Special value that matches all events of type Rules.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_aptimizedisabled">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Rule attempted to use Aptimizer but it is not enabled</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_aptimizeuseunknownprofile">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Rule selected an unknown Aptimizer profile</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_aptimizeuseunknownscope">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Rule selected an unknown Aptimizer scope</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_datalocalstorefull">
                     <xsd:annotation>
                        <xsd:documentation>Rules - data.local.set() has run out of space</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_datastorefull">
                     <xsd:annotation>
                        <xsd:documentation>Rules - data.set() has run out of space</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_forwardproxybadhost">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Rule selected an unresolvable host</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_invalidemit">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Rule used event.emit() with an invalid custom event</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_norate">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Rule selected an unknown rate shaping class</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_poolactivenodesunknown">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Rule references an unknown pool via pool.activenodes</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_pooluseunknown">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Rule selected an unknown pool</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_ruleabort">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Rule aborted during execution</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_rulebodycomperror">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Rule encountered invalid data while uncompressing response</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_rulebufferlarge">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Rule has buffered more data than expected</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_rulelogmsginfo">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Rule logged an info message using log.info</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_rulelogmsgserious">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Rule logged an error message using log.error</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_rulelogmsgwarn">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Rule logged a warning message using log.warn</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_rulenopersistence">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Rule selected an unknown session persistence class</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_rulesinvalidrequestbody">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Client sent invalid HTTP request body</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_rulestreamerrorgetresponse">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Attempt to use http.getResponse or http.getResponseBody after http.stream.startResponse</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_rulestreamerrorinternal">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Internal error while processing HTTP stream</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_rulestreamerrornotenough">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Rule did not supply enough data in HTTP stream</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_rulestreamerrornotfinished">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Attempt to initialize HTTP stream before previous stream had finished</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_rulestreamerrornotstarted">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Attempt to stream data or finish a stream before streaming had been initialized</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_rulestreamerrorprocessfailure">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Data supplied to HTTP stream could not be processed</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_rulestreamerrortoomuch">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Rule supplied too much data in HTTP stream</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_rulexmlerr">
                     <xsd:annotation>
                        <xsd:documentation>Rules - Rule encountered an XML error</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_serviceruleabort">
                     <xsd:annotation>
                        <xsd:documentation>Rules - GLB service rule aborted during execution</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_servicerulelocdead">
                     <xsd:annotation>
                        <xsd:documentation>Rules - GLB service rule specified a location that has either failed or been marked as draining in the service configuration</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_servicerulelocnotconfigured">
                     <xsd:annotation>
                        <xsd:documentation>Rules - GLB service rule specified a location that is not configured for the service</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="rules_servicerulelocunknown">
                     <xsd:annotation>
                        <xsd:documentation>Rules - GLB service rule specified an unknown location</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="services_ALL">
                     <xsd:annotation>
                        <xsd:documentation>Special value that matches all events of type GLB Services.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="services_glbdeadlocmissingips">
                     <xsd:annotation>
                        <xsd:documentation>GLB Services - A DNS Query returned IP addresses that are not configured for any location that is currently alive</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="services_glbfailalter">
                     <xsd:annotation>
                        <xsd:documentation>GLB Services - Failed to alter DNS packet for global load balancing</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="services_glblogwritefail">
                     <xsd:annotation>
                        <xsd:documentation>GLB Services - Failed to write log file for GLB service</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="services_glbmissingips">
                     <xsd:annotation>
                        <xsd:documentation>GLB Services - A DNS Query returned IP addresses that are not configured in any location</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="services_glbnewmaster">
                     <xsd:annotation>
                        <xsd:documentation>GLB Services - A location has been set as master for a GLB service</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="services_glbnolocations">
                     <xsd:annotation>
                        <xsd:documentation>GLB Services - No valid location could be chosen for Global Load Balancing</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="services_glbservicedied">
                     <xsd:annotation>
                        <xsd:documentation>GLB Services - GLB Service has no working locations</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="services_glbserviceok">
                     <xsd:annotation>
                        <xsd:documentation>GLB Services - GLB Service has recovered</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="slm_ALL">
                     <xsd:annotation>
                        <xsd:documentation>Special value that matches all events of type SLM Classes.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="slm_slmclasslimitexceeded">
                     <xsd:annotation>
                        <xsd:documentation>SLM Classes - SLM shared memory limit exceeded</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="slm_slmfallenbelowserious">
                     <xsd:annotation>
                        <xsd:documentation>SLM Classes - SLM has fallen below serious threshold</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="slm_slmfallenbelowwarn">
                     <xsd:annotation>
                        <xsd:documentation>SLM Classes - SLM has fallen below warning threshold</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="slm_slmnodeinfo">
                     <xsd:annotation>
                        <xsd:documentation>SLM Classes - Node information when SLM is non-conforming (no SNMP trap)</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="slm_slmrecoveredserious">
                     <xsd:annotation>
                        <xsd:documentation>SLM Classes - SLM has risen above the serious threshold</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="slm_slmrecoveredwarn">
                     <xsd:annotation>
                        <xsd:documentation>SLM Classes - SLM has recovered</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="sslhw_ALL">
                     <xsd:annotation>
                        <xsd:documentation>Special value that matches all events of type SSL Hardware.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="sslhw_sslhwfail">
                     <xsd:annotation>
                        <xsd:documentation>SSL Hardware - SSL hardware support failed</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="sslhw_sslhwrestart">
                     <xsd:annotation>
                        <xsd:documentation>SSL Hardware - SSL hardware support restarted</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="sslhw_sslhwstart">
                     <xsd:annotation>
                        <xsd:documentation>SSL Hardware - SSL hardware support started</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="trafficscript_ALL">
                     <xsd:annotation>
                        <xsd:documentation>All custom TrafficScript events.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_ALL">
                     <xsd:annotation>
                        <xsd:documentation>Special value that matches all events of type Virtual Servers.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_connerror">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - A protocol error has occurred</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_connfail">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - A socket connection failure has occurred</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_logfiledeleted">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - A virtual server request log file was deleted (Stingray Appliances only)</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_maxclientbufferdrop">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - Dropped connection, request exceeded max_client_buffer limit</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_poolpersistencemismatch">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - Pool uses a session persistence class that does not work with this virtual server's protocol</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_privkeyok">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - Private key now OK (hardware available)</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_respcompfail">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - Error compressing HTTP response</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_responsetoolarge">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - Response headers from webserver too large</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_rtspstreamnoports">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - No suitable ports available for streaming data connection</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_sipstreamnoports">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - No suitable ports available for streaming data connection</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_ssldrop">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - Request(s) received while SSL configuration invalid, connection closed</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_sslfail">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - One or more SSL connections from clients failed recently</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_sslhandshakemsgsizelimit">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - SSL handshake messages have exceeded the size permitted by configuration</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_sslrehandshakemininterval">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - SSL re-handshake requests have exceeded the frequency permitted by configuration</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_vscacertexpired">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - Certificate Authority certificate expired</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_vscacerttoexpire">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - Certificate Authority certificate will expire within seven days</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_vscrloutofdate">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - CRL for a Certificate Authority is out of date</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_vslogwritefail">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - Failed to write log file for virtual server</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_vssslcertexpired">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - Public SSL certificate expired</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_vssslcerttoexpire">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - Public SSL certificate will expire within seven days</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_vsstart">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - Virtual server started</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="vservers_vsstop">
                     <xsd:annotation>
                        <xsd:documentation>Virtual Servers - Virtual server stopped</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="zxtms_ALL">
                     <xsd:annotation>
                        <xsd:documentation>Special value that matches all events of type Traffic Managers.</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
                  <xsd:enumeration value="zxtms_versionmismatch">
                     <xsd:annotation>
                        <xsd:documentation>Traffic Managers - Configuration update refused: traffic manager version mismatch</xsd:documentation>
                     </xsd:annotation>
                  </xsd:enumeration>
               
         
               </xsd:restriction>
            </xsd:simpleType>
            
         
         <xsd:complexType name="Alerting.EventType.EventArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:Alerting.EventType.Event[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="Alerting.EventType.EventArrayArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:Alerting.EventType.EventArray[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="Alerting.EventType.EventType">
           <xsd:annotation>
            <xsd:documentation>A set of conditions that when met causes an action to be run.</xsd:documentation>
           </xsd:annotation>
           <xsd:all>
         
             <xsd:element name="events" type="zeusns:Alerting.EventType.EventArray">
               <xsd:annotation>
                 <xsd:documentation>The events that will trigger the associated actions.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
         
             <xsd:element name="customEvents" type="zeusns:StringArray">
               <xsd:annotation>
                 <xsd:documentation>The names of all the custom events you want to trigger this event type.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
         
             <xsd:element name="mappedActions" type="zeusns:StringArray">
               <xsd:annotation>
                 <xsd:documentation>The names of all the actions mapped to this custom event.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
         
             <xsd:element name="protectionNames" type="zeusns:StringArray">
               <xsd:annotation>
                 <xsd:documentation>The names of all the Service Protection Classes that should trigger this event type. If this is an empty array all objects of this type will be matched.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="vserverNames" type="zeusns:StringArray">
               <xsd:annotation>
                 <xsd:documentation>The names of all the Virtual Servers that should trigger this event type. If this is an empty array all objects of this type will be matched.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="slmNames" type="zeusns:StringArray">
               <xsd:annotation>
                 <xsd:documentation>The names of all the SLM Classes that should trigger this event type. If this is an empty array all objects of this type will be matched.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="ruleNames" type="zeusns:StringArray">
               <xsd:annotation>
                 <xsd:documentation>The names of all the Rules that should trigger this event type. If this is an empty array all objects of this type will be matched.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="cloudcredentialNames" type="zeusns:StringArray">
               <xsd:annotation>
                 <xsd:documentation>The names of all the Cloud Credentials that should trigger this event type. If this is an empty array all objects of this type will be matched.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="poolNames" type="zeusns:StringArray">
               <xsd:annotation>
                 <xsd:documentation>The names of all the Pools that should trigger this event type. If this is an empty array all objects of this type will be matched.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="locationNames" type="zeusns:StringArray">
               <xsd:annotation>
                 <xsd:documentation>The names of all the Locations that should trigger this event type. If this is an empty array all objects of this type will be matched.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="monitorNames" type="zeusns:StringArray">
               <xsd:annotation>
                 <xsd:documentation>The names of all the Monitors that should trigger this event type. If this is an empty array all objects of this type will be matched.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="serviceNames" type="zeusns:StringArray">
               <xsd:annotation>
                 <xsd:documentation>The names of all the GLB Services that should trigger this event type. If this is an empty array all objects of this type will be matched.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="licensekeyNames" type="zeusns:StringArray">
               <xsd:annotation>
                 <xsd:documentation>The names of all the License Keys that should trigger this event type. If this is an empty array all objects of this type will be matched.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
             <xsd:element name="zxtmNames" type="zeusns:StringArray">
               <xsd:annotation>
                 <xsd:documentation>The names of all the Traffic Managers that should trigger this event type. If this is an empty array all objects of this type will be matched.</xsd:documentation>
               </xsd:annotation>
             </xsd:element>
         
         
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="Alerting.EventType.EventTypeArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='zeusns:Alerting.EventType.EventType[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="StringArray">
           <xsd:complexContent>
             <xsd:restriction base='SOAP-ENC:Array'>
              <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:string[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="StringArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:StringArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:boolean[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="booleanArrayArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType="zeusns:booleanArray[]"/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         
         <xsd:complexType name="doubleArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:double[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="intArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:int[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="longArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:long[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedIntArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedInt[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="unsignedLongArray">
           <xsd:complexContent>
            <xsd:restriction base='SOAP-ENC:Array'>
             <xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:unsignedLong[]'/>
            </xsd:restriction>
           </xsd:complexContent>
         </xsd:complexType>
         
         <xsd:complexType name="DeploymentError">
           <xsd:annotation>
            <xsd:documentation>
              The DeploymentError fault is raised when a configuration
              change causes errors when attempting to apply the configuration
              to a running traffic manager.
         
              It would be raised in cases such as failing to bind to
              a port when enabling a Virtual Server.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidInput">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidInput fault is raised when the input to a function is
              invalid, for example a number was out of range. This fault is also
              raised in cases such as VirtualServer.setPool() where the Pool
              doesn't exist
         
              The details in the fault contain the object, key and value
              that caused the fault. These might be blank if they are not relevant
              to the fault.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidObjectName">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidObjectName fault is raised when attempting to create
              a new object (e.g. via an add, rename or copy) and the name is
              invalid (e.g. it contains a '/').
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="InvalidOperation">
           <xsd:annotation>
            <xsd:documentation>
              The InvalidOperation fault is emitted when attempting an operation
              that doesn't make sense or is prohibited, for example deleting
              a built-in monitor, or attempting to rename an object twice in
              the same call. 
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="key" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The configuration key that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="value" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The value that caused the fault (if appropriate)
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectAlreadyExists">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectAlreadyExists fault is raised when attempting to create an
             object (such as a Virtual Server) that already exists. It will also
             be raised in cases such as renaming and copying objects.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
         
         <xsd:complexType name="ObjectDoesNotExist">
           <xsd:annotation>
            <xsd:documentation>
             The ObjectDoesNotExist fault is raised when attempting to perform an
             operation on an object (such as Virtual Server) that doesn't exist.
         
             This fault will only be raised if the primary object in the call doesn't
             exist. For example if calling VirtualServer.setPool(), then
             this fault will be raised if the Virtual Server doesn't exist, but if
             the Pool doesn't exist then the "InvalidInput" fault will be raised.
            </xsd:documentation>
           </xsd:annotation>
           <xsd:all>
             <xsd:element name="errmsg" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  A human readable string describing the error
                </xsd:documentation>
              </xsd:annotation>
             </xsd:element>
             <xsd:element name="object" type="xsd:string">
              <xsd:annotation>
                <xsd:documentation>
                  The name of the object that caused the fault
                </xsd:documentation>
               </xsd:annotation>
             </xsd:element>
           </xsd:all>
         </xsd:complexType>
      </xsd:schema>
   </types>
   
   <message name="addCloudcredentialNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addCloudcredentialNamesResponse"></message>
   
   <message name="addCustomEventsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="events" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addCustomEventsResponse"></message>
   
   <message name="addEventTypeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="eventtypes" type="zeusns:Alerting.EventType.EventTypeArray" />
   </message>
   
   <message name="addEventTypeResponse"></message>
   
   <message name="addEventsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="events" type="zeusns:Alerting.EventType.EventArrayArray" />
   </message>
   
   <message name="addEventsResponse"></message>
   
   <message name="addLicensekeyNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addLicensekeyNamesResponse"></message>
   
   <message name="addLocationNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addLocationNamesResponse"></message>
   
   <message name="addMappedActionsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addMappedActionsResponse"></message>
   
   <message name="addMonitorNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addMonitorNamesResponse"></message>
   
   <message name="addNodeNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="events" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addNodeNamesResponse"></message>
   
   <message name="addPoolNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addPoolNamesResponse"></message>
   
   <message name="addProtectionNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addProtectionNamesResponse"></message>
   
   <message name="addRuleNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addRuleNamesResponse"></message>
   
   <message name="addServiceNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addServiceNamesResponse"></message>
   
   <message name="addSlmNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addSlmNamesResponse"></message>
   
   <message name="addVserverNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addVserverNamesResponse"></message>
   
   <message name="addZxtmNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="addZxtmNamesResponse"></message>
   
   <message name="copyEventTypeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="new_names" type="zeusns:StringArray" />
   </message>
   
   <message name="copyEventTypeResponse"></message>
   
   <message name="deleteEventTypeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="deleteEventTypeResponse"></message>
   
   <message name="getCloudcredentialNamesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCloudcredentialNamesResponse">
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getCustomEventsRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getCustomEventsResponse">
      <part name="events" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getEventTypeRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getEventTypeResponse">
      <part name="event_types" type="zeusns:Alerting.EventType.EventTypeArray" />
   </message>
   
   <message name="getEventTypeNamesRequest"></message>
   
   <message name="getEventTypeNamesResponse">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getEventsRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getEventsResponse">
      <part name="events" type="zeusns:Alerting.EventType.EventArrayArray" />
   </message>
   
   <message name="getLicensekeyNamesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLicensekeyNamesResponse">
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getLocationNamesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getLocationNamesResponse">
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getMappedActionsRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMappedActionsResponse">
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getMonitorNamesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getMonitorNamesResponse">
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getNodeNamesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getNodeNamesResponse">
      <part name="events" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getNoteRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getNoteResponse">
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="getPoolNamesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getPoolNamesResponse">
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getProtectionNamesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getProtectionNamesResponse">
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getRuleNamesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getRuleNamesResponse">
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getServiceNamesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getServiceNamesResponse">
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getSlmNamesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getSlmNamesResponse">
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getVserverNamesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getVserverNamesResponse">
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="getZxtmNamesRequest">
      <part name="names" type="zeusns:StringArray" />
   </message>
   
   <message name="getZxtmNamesResponse">
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeCloudcredentialNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeCloudcredentialNamesResponse"></message>
   
   <message name="removeCustomEventsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="events" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeCustomEventsResponse"></message>
   
   <message name="removeEventsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="events" type="zeusns:Alerting.EventType.EventArrayArray" />
   </message>
   
   <message name="removeEventsResponse"></message>
   
   <message name="removeLicensekeyNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeLicensekeyNamesResponse"></message>
   
   <message name="removeLocationNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeLocationNamesResponse"></message>
   
   <message name="removeMappedActionsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeMappedActionsResponse"></message>
   
   <message name="removeMonitorNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeMonitorNamesResponse"></message>
   
   <message name="removeNodeNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="events" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeNodeNamesResponse"></message>
   
   <message name="removePoolNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removePoolNamesResponse"></message>
   
   <message name="removeProtectionNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeProtectionNamesResponse"></message>
   
   <message name="removeRuleNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeRuleNamesResponse"></message>
   
   <message name="removeServiceNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeServiceNamesResponse"></message>
   
   <message name="removeSlmNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeSlmNamesResponse"></message>
   
   <message name="removeVserverNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeVserverNamesResponse"></message>
   
   <message name="removeZxtmNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="removeZxtmNamesResponse"></message>
   
   <message name="renameEventTypeRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="new_names" type="zeusns:StringArray" />
   </message>
   
   <message name="renameEventTypeResponse"></message>
   
   <message name="setCloudcredentialNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setCloudcredentialNamesResponse"></message>
   
   <message name="setCustomEventsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="events" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setCustomEventsResponse"></message>
   
   <message name="setEventsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="events" type="zeusns:Alerting.EventType.EventArrayArray" />
   </message>
   
   <message name="setEventsResponse"></message>
   
   <message name="setLicensekeyNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setLicensekeyNamesResponse"></message>
   
   <message name="setLocationNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setLocationNamesResponse"></message>
   
   <message name="setMappedActionsRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setMappedActionsResponse"></message>
   
   <message name="setMonitorNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setMonitorNamesResponse"></message>
   
   <message name="setNodeNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="events" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setNodeNamesResponse"></message>
   
   <message name="setNoteRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="values" type="zeusns:StringArray" />
   </message>
   
   <message name="setNoteResponse"></message>
   
   <message name="setPoolNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setPoolNamesResponse"></message>
   
   <message name="setProtectionNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setProtectionNamesResponse"></message>
   
   <message name="setRuleNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setRuleNamesResponse"></message>
   
   <message name="setServiceNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setServiceNamesResponse"></message>
   
   <message name="setSlmNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setSlmNamesResponse"></message>
   
   <message name="setVserverNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setVserverNamesResponse"></message>
   
   <message name="setZxtmNamesRequest">
      <part name="names" type="zeusns:StringArray" />
      <part name="objects" type="zeusns:StringArrayArray" />
   </message>
   
   <message name="setZxtmNamesResponse"></message>
   
   <message name="DeploymentError">
      <part name="parameters" type="zeusns:DeploymentError" />
   </message>
   
   <message name="InvalidInput">
      <part name="parameters" type="zeusns:InvalidInput" />
   </message>
   
   <message name="InvalidObjectName">
      <part name="parameters" type="zeusns:InvalidObjectName" />
   </message>
   
   <message name="InvalidOperation">
      <part name="parameters" type="zeusns:InvalidOperation" />
   </message>
   
   <message name="ObjectAlreadyExists">
      <part name="parameters" type="zeusns:ObjectAlreadyExists" />
   </message>
   
   <message name="ObjectDoesNotExist">
      <part name="parameters" type="zeusns:ObjectDoesNotExist" />
   </message>
   
   <portType name="Alerting.EventTypePort">
      <operation name="addCloudcredentialNames">
         <documentation>
            Add the names of Cloud Credentials that will trigger the specified event types. If the event type has no Cloud Credentials names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:addCloudcredentialNamesRequest"/>
         <output message="zeusns:addCloudcredentialNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addCustomEvents">
         <documentation>
            Adds custom events the specified event types will trigger on. Custom events are generated by TrafficScript using the event.emit function. To match all custom events, include '*' in the passed array.
         </documentation>
         
         <input message="zeusns:addCustomEventsRequest"/>
         <output message="zeusns:addCustomEventsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addEventType">
         <documentation>
            Add an event type that will cause an action to be triggered when its conditions are met.
         </documentation>
         
         <input message="zeusns:addEventTypeRequest"/>
         <output message="zeusns:addEventTypeResponse"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addEvents">
         <documentation>
            Adds events to an event type. An event is something that must occur for the associated actions to be triggered (only one event needs to happen to trigger the actions). At least one event must be specified.
         </documentation>
         
         <input message="zeusns:addEventsRequest"/>
         <output message="zeusns:addEventsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addLicensekeyNames">
         <documentation>
            Add the names of License Key that will trigger the specified event types. If the event type has no License Key names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:addLicensekeyNamesRequest"/>
         <output message="zeusns:addLicensekeyNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addLocationNames">
         <documentation>
            Add the names of Location that will trigger the specified event types. If the event type has no Location names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:addLocationNamesRequest"/>
         <output message="zeusns:addLocationNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addMappedActions">
         <documentation>
            Add an action that will be run when this event type is triggered.
         </documentation>
         
         <input message="zeusns:addMappedActionsRequest"/>
         <output message="zeusns:addMappedActionsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addMonitorNames">
         <documentation>
            Add the names of Monitor that will trigger the specified event types. If the event type has no Monitor names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:addMonitorNamesRequest"/>
         <output message="zeusns:addMonitorNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addNodeNames">
         <documentation>
            Add the names of Node that will trigger the specified event types. If the event type has no Node names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:addNodeNamesRequest"/>
         <output message="zeusns:addNodeNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addPoolNames">
         <documentation>
            Add the names of Pool that will trigger the specified event types. If the event type has no Pool names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:addPoolNamesRequest"/>
         <output message="zeusns:addPoolNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addProtectionNames">
         <documentation>
            Add the names of Service Protection Class that will trigger the specified event types. If the event type has no Service Protection Class names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:addProtectionNamesRequest"/>
         <output message="zeusns:addProtectionNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addRuleNames">
         <documentation>
            Add the names of Rule that will trigger the specified event types. If the event type has no Rule names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:addRuleNamesRequest"/>
         <output message="zeusns:addRuleNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addServiceNames">
         <documentation>
            Add the names of GLB Service that will trigger the specified event types. If the event type has no GLB Service names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:addServiceNamesRequest"/>
         <output message="zeusns:addServiceNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addSlmNames">
         <documentation>
            Add the names of SLM Class that will trigger the specified event types. If the event type has no SLM Class names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:addSlmNamesRequest"/>
         <output message="zeusns:addSlmNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addVserverNames">
         <documentation>
            Add the names of Virtual Server that will trigger the specified event types. If the event type has no Virtual Server names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:addVserverNamesRequest"/>
         <output message="zeusns:addVserverNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="addZxtmNames">
         <documentation>
            Add the names of Traffic Manager that will trigger the specified event types. If the event type has no Traffic Manager names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:addZxtmNamesRequest"/>
         <output message="zeusns:addZxtmNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="copyEventType">
         <documentation>
            Copy each of the named event types.
         </documentation>
         
         <input message="zeusns:copyEventTypeRequest"/>
         <output message="zeusns:copyEventTypeResponse"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="deleteEventType">
         <documentation>
            Removes one or more event types.
         </documentation>
         
         <input message="zeusns:deleteEventTypeRequest"/>
         <output message="zeusns:deleteEventTypeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="getCloudcredentialNames">
         <documentation>
            Get the names of Cloud Credentials that will trigger the specified event types. If the event type has no Cloud Credentials names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:getCloudcredentialNamesRequest"/>
         <output message="zeusns:getCloudcredentialNamesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getCustomEvents">
         <documentation>
            Gets the custom events of the specified event types. Custom events are generated by TrafficScript using the event.emit function. If '*' is returned, all custom events will trigger this event type.
         </documentation>
         
         <input message="zeusns:getCustomEventsRequest"/>
         <output message="zeusns:getCustomEventsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getEventType">
         <documentation>
            Returns a set of event type objects for the specified names.
         </documentation>
         
         <input message="zeusns:getEventTypeRequest"/>
         <output message="zeusns:getEventTypeResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getEventTypeNames">
         <documentation>
            Returns the names of all event types in the system.
         </documentation>
         
         <input message="zeusns:getEventTypeNamesRequest"/>
         <output message="zeusns:getEventTypeNamesResponse"/>
      </operation>
      
      <operation name="getEvents">
         <documentation>
            Gets an event type's events. An event is something that must occur for the associated actions to be triggered (only one event needs to happen to trigger the actions). At least one event must be specified.
         </documentation>
         
         <input message="zeusns:getEventsRequest"/>
         <output message="zeusns:getEventsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLicensekeyNames">
         <documentation>
            Get the names of License Key that will trigger the specified event types. If the event type has no License Key names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:getLicensekeyNamesRequest"/>
         <output message="zeusns:getLicensekeyNamesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getLocationNames">
         <documentation>
            Get the names of Location that will trigger the specified event types. If the event type has no Location names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:getLocationNamesRequest"/>
         <output message="zeusns:getLocationNamesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMappedActions">
         <documentation>
            Get an action that will be run when this event type is triggered.
         </documentation>
         
         <input message="zeusns:getMappedActionsRequest"/>
         <output message="zeusns:getMappedActionsResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getMonitorNames">
         <documentation>
            Get the names of Monitor that will trigger the specified event types. If the event type has no Monitor names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:getMonitorNamesRequest"/>
         <output message="zeusns:getMonitorNamesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNodeNames">
         <documentation>
            Get the names of Node that will trigger the specified event types. If the event type has no Node names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:getNodeNamesRequest"/>
         <output message="zeusns:getNodeNamesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getNote">
         <documentation>
            Get the note for each of the named Event Types.
         </documentation>
         
         <input message="zeusns:getNoteRequest"/>
         <output message="zeusns:getNoteResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getPoolNames">
         <documentation>
            Get the names of Pool that will trigger the specified event types. If the event type has no Pool names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:getPoolNamesRequest"/>
         <output message="zeusns:getPoolNamesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getProtectionNames">
         <documentation>
            Get the names of Service Protection Class that will trigger the specified event types. If the event type has no Service Protection Class names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:getProtectionNamesRequest"/>
         <output message="zeusns:getProtectionNamesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getRuleNames">
         <documentation>
            Get the names of Rule that will trigger the specified event types. If the event type has no Rule names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:getRuleNamesRequest"/>
         <output message="zeusns:getRuleNamesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getServiceNames">
         <documentation>
            Get the names of GLB Service that will trigger the specified event types. If the event type has no GLB Service names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:getServiceNamesRequest"/>
         <output message="zeusns:getServiceNamesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getSlmNames">
         <documentation>
            Get the names of SLM Class that will trigger the specified event types. If the event type has no SLM Class names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:getSlmNamesRequest"/>
         <output message="zeusns:getSlmNamesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getVserverNames">
         <documentation>
            Get the names of Virtual Server that will trigger the specified event types. If the event type has no Virtual Server names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:getVserverNamesRequest"/>
         <output message="zeusns:getVserverNamesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="getZxtmNames">
         <documentation>
            Get the names of Traffic Manager that will trigger the specified event types. If the event type has no Traffic Manager names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:getZxtmNamesRequest"/>
         <output message="zeusns:getZxtmNamesResponse"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
      </operation>
      
      <operation name="removeCloudcredentialNames">
         <documentation>
            Remove the names of Cloud Credentials that will trigger the specified event types. If the event type has no Cloud Credentials names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:removeCloudcredentialNamesRequest"/>
         <output message="zeusns:removeCloudcredentialNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeCustomEvents">
         <documentation>
            Removes custom events from the specified event types. Custom events are generated by TrafficScript using the event.emit function. If you pass '*', all custom events will be removed.
         </documentation>
         
         <input message="zeusns:removeCustomEventsRequest"/>
         <output message="zeusns:removeCustomEventsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeEvents">
         <documentation>
            Removes events from the event type. An event is something that must occur for the associated actions to be triggered (only one event needs to happen to trigger the actions). At least one event must be specified.
         </documentation>
         
         <input message="zeusns:removeEventsRequest"/>
         <output message="zeusns:removeEventsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeLicensekeyNames">
         <documentation>
            Remove the names of License Key that will trigger the specified event types. If the event type has no License Key names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:removeLicensekeyNamesRequest"/>
         <output message="zeusns:removeLicensekeyNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeLocationNames">
         <documentation>
            Remove the names of Location that will trigger the specified event types. If the event type has no Location names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:removeLocationNamesRequest"/>
         <output message="zeusns:removeLocationNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeMappedActions">
         <documentation>
            Remove an action that will be run when this event type is triggered.
         </documentation>
         
         <input message="zeusns:removeMappedActionsRequest"/>
         <output message="zeusns:removeMappedActionsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeMonitorNames">
         <documentation>
            Remove the names of Monitor that will trigger the specified event types. If the event type has no Monitor names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:removeMonitorNamesRequest"/>
         <output message="zeusns:removeMonitorNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeNodeNames">
         <documentation>
            Remove the names of Node that will trigger the specified event types. If the event type has no Node names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:removeNodeNamesRequest"/>
         <output message="zeusns:removeNodeNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removePoolNames">
         <documentation>
            Remove the names of Pool that will trigger the specified event types. If the event type has no Pool names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:removePoolNamesRequest"/>
         <output message="zeusns:removePoolNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeProtectionNames">
         <documentation>
            Remove the names of Service Protection Class that will trigger the specified event types. If the event type has no Service Protection Class names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:removeProtectionNamesRequest"/>
         <output message="zeusns:removeProtectionNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeRuleNames">
         <documentation>
            Remove the names of Rule that will trigger the specified event types. If the event type has no Rule names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:removeRuleNamesRequest"/>
         <output message="zeusns:removeRuleNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeServiceNames">
         <documentation>
            Remove the names of GLB Service that will trigger the specified event types. If the event type has no GLB Service names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:removeServiceNamesRequest"/>
         <output message="zeusns:removeServiceNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeSlmNames">
         <documentation>
            Remove the names of SLM Class that will trigger the specified event types. If the event type has no SLM Class names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:removeSlmNamesRequest"/>
         <output message="zeusns:removeSlmNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeVserverNames">
         <documentation>
            Remove the names of Virtual Server that will trigger the specified event types. If the event type has no Virtual Server names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:removeVserverNamesRequest"/>
         <output message="zeusns:removeVserverNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="removeZxtmNames">
         <documentation>
            Remove the names of Traffic Manager that will trigger the specified event types. If the event type has no Traffic Manager names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:removeZxtmNamesRequest"/>
         <output message="zeusns:removeZxtmNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="renameEventType">
         <documentation>
            Rename each of the named event types.
         </documentation>
         
         <input message="zeusns:renameEventTypeRequest"/>
         <output message="zeusns:renameEventTypeResponse"/>
         <fault name="ObjectAlreadyExists" message="zeusns:ObjectAlreadyExists"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidObjectName" message="zeusns:InvalidObjectName"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
      </operation>
      
      <operation name="setCloudcredentialNames">
         <documentation>
            Set the names of Cloud Credentials that will trigger the specified event types. If the event type has no Cloud Credentials names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:setCloudcredentialNamesRequest"/>
         <output message="zeusns:setCloudcredentialNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setCustomEvents">
         <documentation>
            Gets the custom events the specified event types will trigger on. Custom events are generated by TrafficScript using the event.emit function. To match all custom events, include '*' in the passed array.
         </documentation>
         
         <input message="zeusns:setCustomEventsRequest"/>
         <output message="zeusns:setCustomEventsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setEvents">
         <documentation>
            Sets an event type's events (all old events will be removed). An event is something that must occur for the associated actions to be triggered (only one event needs to happen to trigger the actions). At least one event must be specified.
         </documentation>
         
         <input message="zeusns:setEventsRequest"/>
         <output message="zeusns:setEventsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLicensekeyNames">
         <documentation>
            Set the names of License Key that will trigger the specified event types. If the event type has no License Key names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:setLicensekeyNamesRequest"/>
         <output message="zeusns:setLicensekeyNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setLocationNames">
         <documentation>
            Set the names of Location that will trigger the specified event types. If the event type has no Location names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:setLocationNamesRequest"/>
         <output message="zeusns:setLocationNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMappedActions">
         <documentation>
            Set an action that will be run when this event type is triggered.
         </documentation>
         
         <input message="zeusns:setMappedActionsRequest"/>
         <output message="zeusns:setMappedActionsResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setMonitorNames">
         <documentation>
            Set the names of Monitor that will trigger the specified event types. If the event type has no Monitor names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:setMonitorNamesRequest"/>
         <output message="zeusns:setMonitorNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNodeNames">
         <documentation>
            Set the names of Node that will trigger the specified event types. If the event type has no Node names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:setNodeNamesRequest"/>
         <output message="zeusns:setNodeNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setNote">
         <documentation>
            Set the note for each of the named Event Types.
         </documentation>
         
         <input message="zeusns:setNoteRequest"/>
         <output message="zeusns:setNoteResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setPoolNames">
         <documentation>
            Set the names of Pool that will trigger the specified event types. If the event type has no Pool names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:setPoolNamesRequest"/>
         <output message="zeusns:setPoolNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setProtectionNames">
         <documentation>
            Set the names of Service Protection Class that will trigger the specified event types. If the event type has no Service Protection Class names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:setProtectionNamesRequest"/>
         <output message="zeusns:setProtectionNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setRuleNames">
         <documentation>
            Set the names of Rule that will trigger the specified event types. If the event type has no Rule names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:setRuleNamesRequest"/>
         <output message="zeusns:setRuleNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setServiceNames">
         <documentation>
            Set the names of GLB Service that will trigger the specified event types. If the event type has no GLB Service names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:setServiceNamesRequest"/>
         <output message="zeusns:setServiceNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setSlmNames">
         <documentation>
            Set the names of SLM Class that will trigger the specified event types. If the event type has no SLM Class names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:setSlmNamesRequest"/>
         <output message="zeusns:setSlmNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setVserverNames">
         <documentation>
            Set the names of Virtual Server that will trigger the specified event types. If the event type has no Virtual Server names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:setVserverNamesRequest"/>
         <output message="zeusns:setVserverNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
      
      <operation name="setZxtmNames">
         <documentation>
            Set the names of Traffic Manager that will trigger the specified event types. If the event type has no Traffic Manager names configured, all objects of this type will match.
         </documentation>
         
         <input message="zeusns:setZxtmNamesRequest"/>
         <output message="zeusns:setZxtmNamesResponse"/>
         <fault name="InvalidInput" message="zeusns:InvalidInput"/>
         <fault name="ObjectDoesNotExist" message="zeusns:ObjectDoesNotExist"/>
         <fault name="InvalidOperation" message="zeusns:InvalidOperation"/>
         <fault name="DeploymentError" message="zeusns:DeploymentError"/>
      </operation>
   </portType>
   
   <binding name="Alerting.EventTypeBinding" type="zeusns:Alerting.EventTypePort">
      <soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
      <operation name="addCloudcredentialNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/addCloudcredentialNames"/>
         <documentation>
            Add the names of Cloud Credentials that will trigger the specified event types. If the event type has no Cloud Credentials names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addCustomEvents">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/addCustomEvents"/>
         <documentation>
            Adds custom events the specified event types will trigger on. Custom events are generated by TrafficScript using the event.emit function. To match all custom events, include '*' in the passed array.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addEventType">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/addEventType"/>
         <documentation>
            Add an event type that will cause an action to be triggered when its conditions are met.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addEvents">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/addEvents"/>
         <documentation>
            Adds events to an event type. An event is something that must occur for the associated actions to be triggered (only one event needs to happen to trigger the actions). At least one event must be specified.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addLicensekeyNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/addLicensekeyNames"/>
         <documentation>
            Add the names of License Key that will trigger the specified event types. If the event type has no License Key names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addLocationNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/addLocationNames"/>
         <documentation>
            Add the names of Location that will trigger the specified event types. If the event type has no Location names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addMappedActions">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/addMappedActions"/>
         <documentation>
            Add an action that will be run when this event type is triggered.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addMonitorNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/addMonitorNames"/>
         <documentation>
            Add the names of Monitor that will trigger the specified event types. If the event type has no Monitor names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addNodeNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/addNodeNames"/>
         <documentation>
            Add the names of Node that will trigger the specified event types. If the event type has no Node names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addPoolNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/addPoolNames"/>
         <documentation>
            Add the names of Pool that will trigger the specified event types. If the event type has no Pool names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addProtectionNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/addProtectionNames"/>
         <documentation>
            Add the names of Service Protection Class that will trigger the specified event types. If the event type has no Service Protection Class names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addRuleNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/addRuleNames"/>
         <documentation>
            Add the names of Rule that will trigger the specified event types. If the event type has no Rule names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addServiceNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/addServiceNames"/>
         <documentation>
            Add the names of GLB Service that will trigger the specified event types. If the event type has no GLB Service names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addSlmNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/addSlmNames"/>
         <documentation>
            Add the names of SLM Class that will trigger the specified event types. If the event type has no SLM Class names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addVserverNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/addVserverNames"/>
         <documentation>
            Add the names of Virtual Server that will trigger the specified event types. If the event type has no Virtual Server names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="addZxtmNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/addZxtmNames"/>
         <documentation>
            Add the names of Traffic Manager that will trigger the specified event types. If the event type has no Traffic Manager names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="copyEventType">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/copyEventType"/>
         <documentation>
            Copy each of the named event types.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="deleteEventType">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/deleteEventType"/>
         <documentation>
            Removes one or more event types.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCloudcredentialNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/getCloudcredentialNames"/>
         <documentation>
            Get the names of Cloud Credentials that will trigger the specified event types. If the event type has no Cloud Credentials names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getCustomEvents">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/getCustomEvents"/>
         <documentation>
            Gets the custom events of the specified event types. Custom events are generated by TrafficScript using the event.emit function. If '*' is returned, all custom events will trigger this event type.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getEventType">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/getEventType"/>
         <documentation>
            Returns a set of event type objects for the specified names.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getEventTypeNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/getEventTypeNames"/>
         <documentation>
            Returns the names of all event types in the system.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
      </operation>
      
      <operation name="getEvents">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/getEvents"/>
         <documentation>
            Gets an event type's events. An event is something that must occur for the associated actions to be triggered (only one event needs to happen to trigger the actions). At least one event must be specified.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLicensekeyNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/getLicensekeyNames"/>
         <documentation>
            Get the names of License Key that will trigger the specified event types. If the event type has no License Key names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getLocationNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/getLocationNames"/>
         <documentation>
            Get the names of Location that will trigger the specified event types. If the event type has no Location names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMappedActions">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/getMappedActions"/>
         <documentation>
            Get an action that will be run when this event type is triggered.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getMonitorNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/getMonitorNames"/>
         <documentation>
            Get the names of Monitor that will trigger the specified event types. If the event type has no Monitor names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNodeNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/getNodeNames"/>
         <documentation>
            Get the names of Node that will trigger the specified event types. If the event type has no Node names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getNote">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/getNote"/>
         <documentation>
            Get the note for each of the named Event Types.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getPoolNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/getPoolNames"/>
         <documentation>
            Get the names of Pool that will trigger the specified event types. If the event type has no Pool names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getProtectionNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/getProtectionNames"/>
         <documentation>
            Get the names of Service Protection Class that will trigger the specified event types. If the event type has no Service Protection Class names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getRuleNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/getRuleNames"/>
         <documentation>
            Get the names of Rule that will trigger the specified event types. If the event type has no Rule names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getServiceNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/getServiceNames"/>
         <documentation>
            Get the names of GLB Service that will trigger the specified event types. If the event type has no GLB Service names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getSlmNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/getSlmNames"/>
         <documentation>
            Get the names of SLM Class that will trigger the specified event types. If the event type has no SLM Class names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getVserverNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/getVserverNames"/>
         <documentation>
            Get the names of Virtual Server that will trigger the specified event types. If the event type has no Virtual Server names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="getZxtmNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/getZxtmNames"/>
         <documentation>
            Get the names of Traffic Manager that will trigger the specified event types. If the event type has no Traffic Manager names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeCloudcredentialNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/removeCloudcredentialNames"/>
         <documentation>
            Remove the names of Cloud Credentials that will trigger the specified event types. If the event type has no Cloud Credentials names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeCustomEvents">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/removeCustomEvents"/>
         <documentation>
            Removes custom events from the specified event types. Custom events are generated by TrafficScript using the event.emit function. If you pass '*', all custom events will be removed.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeEvents">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/removeEvents"/>
         <documentation>
            Removes events from the event type. An event is something that must occur for the associated actions to be triggered (only one event needs to happen to trigger the actions). At least one event must be specified.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeLicensekeyNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/removeLicensekeyNames"/>
         <documentation>
            Remove the names of License Key that will trigger the specified event types. If the event type has no License Key names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeLocationNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/removeLocationNames"/>
         <documentation>
            Remove the names of Location that will trigger the specified event types. If the event type has no Location names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeMappedActions">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/removeMappedActions"/>
         <documentation>
            Remove an action that will be run when this event type is triggered.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeMonitorNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/removeMonitorNames"/>
         <documentation>
            Remove the names of Monitor that will trigger the specified event types. If the event type has no Monitor names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeNodeNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/removeNodeNames"/>
         <documentation>
            Remove the names of Node that will trigger the specified event types. If the event type has no Node names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removePoolNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/removePoolNames"/>
         <documentation>
            Remove the names of Pool that will trigger the specified event types. If the event type has no Pool names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeProtectionNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/removeProtectionNames"/>
         <documentation>
            Remove the names of Service Protection Class that will trigger the specified event types. If the event type has no Service Protection Class names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeRuleNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/removeRuleNames"/>
         <documentation>
            Remove the names of Rule that will trigger the specified event types. If the event type has no Rule names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeServiceNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/removeServiceNames"/>
         <documentation>
            Remove the names of GLB Service that will trigger the specified event types. If the event type has no GLB Service names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeSlmNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/removeSlmNames"/>
         <documentation>
            Remove the names of SLM Class that will trigger the specified event types. If the event type has no SLM Class names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeVserverNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/removeVserverNames"/>
         <documentation>
            Remove the names of Virtual Server that will trigger the specified event types. If the event type has no Virtual Server names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="removeZxtmNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/removeZxtmNames"/>
         <documentation>
            Remove the names of Traffic Manager that will trigger the specified event types. If the event type has no Traffic Manager names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="renameEventType">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/renameEventType"/>
         <documentation>
            Rename each of the named event types.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="ObjectAlreadyExists">
            <soap:fault use="encoded" name="ObjectAlreadyExists" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidObjectName">
            <soap:fault use="encoded" name="InvalidObjectName" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCloudcredentialNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/setCloudcredentialNames"/>
         <documentation>
            Set the names of Cloud Credentials that will trigger the specified event types. If the event type has no Cloud Credentials names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setCustomEvents">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/setCustomEvents"/>
         <documentation>
            Gets the custom events the specified event types will trigger on. Custom events are generated by TrafficScript using the event.emit function. To match all custom events, include '*' in the passed array.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setEvents">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/setEvents"/>
         <documentation>
            Sets an event type's events (all old events will be removed). An event is something that must occur for the associated actions to be triggered (only one event needs to happen to trigger the actions). At least one event must be specified.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLicensekeyNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/setLicensekeyNames"/>
         <documentation>
            Set the names of License Key that will trigger the specified event types. If the event type has no License Key names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setLocationNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/setLocationNames"/>
         <documentation>
            Set the names of Location that will trigger the specified event types. If the event type has no Location names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMappedActions">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/setMappedActions"/>
         <documentation>
            Set an action that will be run when this event type is triggered.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setMonitorNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/setMonitorNames"/>
         <documentation>
            Set the names of Monitor that will trigger the specified event types. If the event type has no Monitor names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNodeNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/setNodeNames"/>
         <documentation>
            Set the names of Node that will trigger the specified event types. If the event type has no Node names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setNote">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/setNote"/>
         <documentation>
            Set the note for each of the named Event Types.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setPoolNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/setPoolNames"/>
         <documentation>
            Set the names of Pool that will trigger the specified event types. If the event type has no Pool names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setProtectionNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/setProtectionNames"/>
         <documentation>
            Set the names of Service Protection Class that will trigger the specified event types. If the event type has no Service Protection Class names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setRuleNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/setRuleNames"/>
         <documentation>
            Set the names of Rule that will trigger the specified event types. If the event type has no Rule names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setServiceNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/setServiceNames"/>
         <documentation>
            Set the names of GLB Service that will trigger the specified event types. If the event type has no GLB Service names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setSlmNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/setSlmNames"/>
         <documentation>
            Set the names of SLM Class that will trigger the specified event types. If the event type has no SLM Class names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setVserverNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/setVserverNames"/>
         <documentation>
            Set the names of Virtual Server that will trigger the specified event types. If the event type has no Virtual Server names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
      
      <operation name="setZxtmNames">
         <soap:operation soapAction="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/setZxtmNames"/>
         <documentation>
            Set the names of Traffic Manager that will trigger the specified event types. If the event type has no Traffic Manager names configured, all objects of this type will match.
         </documentation>
         
         <input>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </input>
         <output>
            <soap:body use="encoded" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </output>
         <fault name="InvalidInput">
            <soap:fault use="encoded" name="InvalidInput" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="ObjectDoesNotExist">
            <soap:fault use="encoded" name="ObjectDoesNotExist" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="InvalidOperation">
            <soap:fault use="encoded" name="InvalidOperation" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
         <fault name="DeploymentError">
            <soap:fault use="encoded" name="DeploymentError" namespace="http://soap.zeus.com/zxtm/1.0/Alerting/EventType/" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
         </fault>
      </operation>
   </binding>
   
   <service name="Alerting.EventType">
      <documentation>
         Alerting.EventType is an interface that allows you to manage event types.  Event
         Types are groups of events and are associated with a list of actions that are
         invoked when one of the events in the Event Type is triggered.
      </documentation>
      
      <port name="Alerting.EventTypePort" binding="zeusns:Alerting.EventTypeBinding">
         <soap:address location="https://admin_server:9090/soap"/>
      </port>
   </service>
   
</definitions>
